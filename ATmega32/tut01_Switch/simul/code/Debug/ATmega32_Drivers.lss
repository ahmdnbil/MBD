
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  000076a8  0000773c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800198  00800198  00007874  2**0
                  ALLOC
  3 .stab         000079d4  00000000  00000000  00007874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003fcf  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00013217  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  000133f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ca8  00000000  00000000  00013629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f5  00000000  00000000  000162d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001485  00000000  00000000  000178c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00018d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000038f  00000000  00000000  00018f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018da  00000000  00000000  000192db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0001abb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__vector_1>
       8:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__vector_2>
       c:	0c 94 16 20 	jmp	0x402c	; 0x402c <__vector_3>
      10:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__vector_4>
      14:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__vector_5>
      18:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__vector_6>
      1c:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__vector_7>
      20:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__vector_8>
      24:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <__vector_9>
      28:	0c 94 6b 1d 	jmp	0x3ad6	; 0x3ad6 <__vector_10>
      2c:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__vector_11>
      30:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__vector_12>
      34:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__vector_13>
      38:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__vector_14>
      3c:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_15>
      40:	0c 94 dc 24 	jmp	0x49b8	; 0x49b8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 3a 	call	0x7576	; 0x7576 <main>
      8a:	0c 94 52 3b 	jmp	0x76a4	; 0x76a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 37 3b 	jmp	0x766e	; 0x766e <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a0 e6       	ldi	r26, 0x60	; 96
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 37 3b 	jmp	0x766e	; 0x766e <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	80 e6       	ldi	r24, 0x60	; 96
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 37 3b 	jmp	0x766e	; 0x766e <__epilogue_restores__>

0000141a <__divsf3>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <__prologue_saves__+0x10>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	b9 e0       	ldi	r27, 0x09	; 9
    1438:	eb 2e       	mov	r14, r27
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    145a:	29 85       	ldd	r18, Y+9	; 0x09
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	08 f4       	brcc	.+2      	; 0x1462 <__divsf3+0x48>
    1460:	7e c0       	rjmp	.+252    	; 0x155e <__divsf3+0x144>
    1462:	39 89       	ldd	r19, Y+17	; 0x11
    1464:	32 30       	cpi	r19, 0x02	; 2
    1466:	10 f4       	brcc	.+4      	; 0x146c <__divsf3+0x52>
    1468:	b8 01       	movw	r22, r16
    146a:	7c c0       	rjmp	.+248    	; 0x1564 <__divsf3+0x14a>
    146c:	8a 85       	ldd	r24, Y+10	; 0x0a
    146e:	9a 89       	ldd	r25, Y+18	; 0x12
    1470:	89 27       	eor	r24, r25
    1472:	8a 87       	std	Y+10, r24	; 0x0a
    1474:	24 30       	cpi	r18, 0x04	; 4
    1476:	11 f0       	breq	.+4      	; 0x147c <__divsf3+0x62>
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 f4       	brne	.+12     	; 0x1488 <__divsf3+0x6e>
    147c:	23 17       	cp	r18, r19
    147e:	09 f0       	breq	.+2      	; 0x1482 <__divsf3+0x68>
    1480:	6e c0       	rjmp	.+220    	; 0x155e <__divsf3+0x144>
    1482:	60 e6       	ldi	r22, 0x60	; 96
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	6e c0       	rjmp	.+220    	; 0x1564 <__divsf3+0x14a>
    1488:	34 30       	cpi	r19, 0x04	; 4
    148a:	39 f4       	brne	.+14     	; 0x149a <__divsf3+0x80>
    148c:	1d 86       	std	Y+13, r1	; 0x0d
    148e:	1e 86       	std	Y+14, r1	; 0x0e
    1490:	1f 86       	std	Y+15, r1	; 0x0f
    1492:	18 8a       	std	Y+16, r1	; 0x10
    1494:	1c 86       	std	Y+12, r1	; 0x0c
    1496:	1b 86       	std	Y+11, r1	; 0x0b
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <__divsf3+0x88>
    149a:	32 30       	cpi	r19, 0x02	; 2
    149c:	21 f4       	brne	.+8      	; 0x14a6 <__divsf3+0x8c>
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	89 87       	std	Y+9, r24	; 0x09
    14a2:	b7 01       	movw	r22, r14
    14a4:	5f c0       	rjmp	.+190    	; 0x1564 <__divsf3+0x14a>
    14a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    14a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14aa:	8b 89       	ldd	r24, Y+19	; 0x13
    14ac:	9c 89       	ldd	r25, Y+20	; 0x14
    14ae:	28 1b       	sub	r18, r24
    14b0:	39 0b       	sbc	r19, r25
    14b2:	3c 87       	std	Y+12, r19	; 0x0c
    14b4:	2b 87       	std	Y+11, r18	; 0x0b
    14b6:	ed 84       	ldd	r14, Y+13	; 0x0d
    14b8:	fe 84       	ldd	r15, Y+14	; 0x0e
    14ba:	0f 85       	ldd	r16, Y+15	; 0x0f
    14bc:	18 89       	ldd	r17, Y+16	; 0x10
    14be:	ad 88       	ldd	r10, Y+21	; 0x15
    14c0:	be 88       	ldd	r11, Y+22	; 0x16
    14c2:	cf 88       	ldd	r12, Y+23	; 0x17
    14c4:	d8 8c       	ldd	r13, Y+24	; 0x18
    14c6:	ea 14       	cp	r14, r10
    14c8:	fb 04       	cpc	r15, r11
    14ca:	0c 05       	cpc	r16, r12
    14cc:	1d 05       	cpc	r17, r13
    14ce:	40 f4       	brcc	.+16     	; 0x14e0 <__divsf3+0xc6>
    14d0:	ee 0c       	add	r14, r14
    14d2:	ff 1c       	adc	r15, r15
    14d4:	00 1f       	adc	r16, r16
    14d6:	11 1f       	adc	r17, r17
    14d8:	21 50       	subi	r18, 0x01	; 1
    14da:	30 40       	sbci	r19, 0x00	; 0
    14dc:	3c 87       	std	Y+12, r19	; 0x0c
    14de:	2b 87       	std	Y+11, r18	; 0x0b
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e4       	ldi	r27, 0x40	; 64
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	ea 14       	cp	r14, r10
    14f6:	fb 04       	cpc	r15, r11
    14f8:	0c 05       	cpc	r16, r12
    14fa:	1d 05       	cpc	r17, r13
    14fc:	40 f0       	brcs	.+16     	; 0x150e <__divsf3+0xf4>
    14fe:	28 2b       	or	r18, r24
    1500:	39 2b       	or	r19, r25
    1502:	4a 2b       	or	r20, r26
    1504:	5b 2b       	or	r21, r27
    1506:	ea 18       	sub	r14, r10
    1508:	fb 08       	sbc	r15, r11
    150a:	0c 09       	sbc	r16, r12
    150c:	1d 09       	sbc	r17, r13
    150e:	b6 95       	lsr	r27
    1510:	a7 95       	ror	r26
    1512:	97 95       	ror	r25
    1514:	87 95       	ror	r24
    1516:	ee 0c       	add	r14, r14
    1518:	ff 1c       	adc	r15, r15
    151a:	00 1f       	adc	r16, r16
    151c:	11 1f       	adc	r17, r17
    151e:	6f 5f       	subi	r22, 0xFF	; 255
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	6f 31       	cpi	r22, 0x1F	; 31
    1524:	71 05       	cpc	r23, r1
    1526:	31 f7       	brne	.-52     	; 0x14f4 <__divsf3+0xda>
    1528:	da 01       	movw	r26, r20
    152a:	c9 01       	movw	r24, r18
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	a0 70       	andi	r26, 0x00	; 0
    1532:	b0 70       	andi	r27, 0x00	; 0
    1534:	80 34       	cpi	r24, 0x40	; 64
    1536:	91 05       	cpc	r25, r1
    1538:	a1 05       	cpc	r26, r1
    153a:	b1 05       	cpc	r27, r1
    153c:	61 f4       	brne	.+24     	; 0x1556 <__divsf3+0x13c>
    153e:	27 fd       	sbrc	r18, 7
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <__divsf3+0x13c>
    1542:	e1 14       	cp	r14, r1
    1544:	f1 04       	cpc	r15, r1
    1546:	01 05       	cpc	r16, r1
    1548:	11 05       	cpc	r17, r1
    154a:	29 f0       	breq	.+10     	; 0x1556 <__divsf3+0x13c>
    154c:	20 5c       	subi	r18, 0xC0	; 192
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	4f 4f       	sbci	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	20 78       	andi	r18, 0x80	; 128
    1556:	2d 87       	std	Y+13, r18	; 0x0d
    1558:	3e 87       	std	Y+14, r19	; 0x0e
    155a:	4f 87       	std	Y+15, r20	; 0x0f
    155c:	58 8b       	std	Y+16, r21	; 0x10
    155e:	be 01       	movw	r22, r28
    1560:	67 5f       	subi	r22, 0xF7	; 247
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	cb 01       	movw	r24, r22
    1566:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    156a:	68 96       	adiw	r28, 0x18	; 24
    156c:	ea e0       	ldi	r30, 0x0A	; 10
    156e:	0c 94 3f 3b 	jmp	0x767e	; 0x767e <__epilogue_restores__+0x10>

00001572 <__gtsf2>:
    1572:	a8 e1       	ldi	r26, 0x18	; 24
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef eb       	ldi	r30, 0xBF	; 191
    1578:	fa e0       	ldi	r31, 0x0A	; 10
    157a:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__prologue_saves__+0x18>
    157e:	69 83       	std	Y+1, r22	; 0x01
    1580:	7a 83       	std	Y+2, r23	; 0x02
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	2d 83       	std	Y+5, r18	; 0x05
    1588:	3e 83       	std	Y+6, r19	; 0x06
    158a:	4f 83       	std	Y+7, r20	; 0x07
    158c:	58 87       	std	Y+8, r21	; 0x08
    158e:	89 e0       	ldi	r24, 0x09	; 9
    1590:	e8 2e       	mov	r14, r24
    1592:	f1 2c       	mov	r15, r1
    1594:	ec 0e       	add	r14, r28
    1596:	fd 1e       	adc	r15, r29
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	b7 01       	movw	r22, r14
    159e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    15a2:	8e 01       	movw	r16, r28
    15a4:	0f 5e       	subi	r16, 0xEF	; 239
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	ce 01       	movw	r24, r28
    15aa:	05 96       	adiw	r24, 0x05	; 5
    15ac:	b8 01       	movw	r22, r16
    15ae:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    15b2:	89 85       	ldd	r24, Y+9	; 0x09
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	40 f0       	brcs	.+16     	; 0x15c8 <__gtsf2+0x56>
    15b8:	89 89       	ldd	r24, Y+17	; 0x11
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	28 f0       	brcs	.+10     	; 0x15c8 <__gtsf2+0x56>
    15be:	c7 01       	movw	r24, r14
    15c0:	b8 01       	movw	r22, r16
    15c2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fpcmp_parts_f>
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <__gtsf2+0x58>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	68 96       	adiw	r28, 0x18	; 24
    15cc:	e6 e0       	ldi	r30, 0x06	; 6
    15ce:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <__epilogue_restores__+0x18>

000015d2 <__gesf2>:
    15d2:	a8 e1       	ldi	r26, 0x18	; 24
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ef ee       	ldi	r30, 0xEF	; 239
    15d8:	fa e0       	ldi	r31, 0x0A	; 10
    15da:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__prologue_saves__+0x18>
    15de:	69 83       	std	Y+1, r22	; 0x01
    15e0:	7a 83       	std	Y+2, r23	; 0x02
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	2d 83       	std	Y+5, r18	; 0x05
    15e8:	3e 83       	std	Y+6, r19	; 0x06
    15ea:	4f 83       	std	Y+7, r20	; 0x07
    15ec:	58 87       	std	Y+8, r21	; 0x08
    15ee:	89 e0       	ldi	r24, 0x09	; 9
    15f0:	e8 2e       	mov	r14, r24
    15f2:	f1 2c       	mov	r15, r1
    15f4:	ec 0e       	add	r14, r28
    15f6:	fd 1e       	adc	r15, r29
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	b7 01       	movw	r22, r14
    15fe:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1602:	8e 01       	movw	r16, r28
    1604:	0f 5e       	subi	r16, 0xEF	; 239
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	ce 01       	movw	r24, r28
    160a:	05 96       	adiw	r24, 0x05	; 5
    160c:	b8 01       	movw	r22, r16
    160e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	40 f0       	brcs	.+16     	; 0x1628 <__gesf2+0x56>
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	28 f0       	brcs	.+10     	; 0x1628 <__gesf2+0x56>
    161e:	c7 01       	movw	r24, r14
    1620:	b8 01       	movw	r22, r16
    1622:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fpcmp_parts_f>
    1626:	01 c0       	rjmp	.+2      	; 0x162a <__gesf2+0x58>
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	68 96       	adiw	r28, 0x18	; 24
    162c:	e6 e0       	ldi	r30, 0x06	; 6
    162e:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <__epilogue_restores__+0x18>

00001632 <__ltsf2>:
    1632:	a8 e1       	ldi	r26, 0x18	; 24
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e1       	ldi	r30, 0x1F	; 31
    1638:	fb e0       	ldi	r31, 0x0B	; 11
    163a:	0c 94 27 3b 	jmp	0x764e	; 0x764e <__prologue_saves__+0x18>
    163e:	69 83       	std	Y+1, r22	; 0x01
    1640:	7a 83       	std	Y+2, r23	; 0x02
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	2d 83       	std	Y+5, r18	; 0x05
    1648:	3e 83       	std	Y+6, r19	; 0x06
    164a:	4f 83       	std	Y+7, r20	; 0x07
    164c:	58 87       	std	Y+8, r21	; 0x08
    164e:	89 e0       	ldi	r24, 0x09	; 9
    1650:	e8 2e       	mov	r14, r24
    1652:	f1 2c       	mov	r15, r1
    1654:	ec 0e       	add	r14, r28
    1656:	fd 1e       	adc	r15, r29
    1658:	ce 01       	movw	r24, r28
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	b7 01       	movw	r22, r14
    165e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1662:	8e 01       	movw	r16, r28
    1664:	0f 5e       	subi	r16, 0xEF	; 239
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	ce 01       	movw	r24, r28
    166a:	05 96       	adiw	r24, 0x05	; 5
    166c:	b8 01       	movw	r22, r16
    166e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	40 f0       	brcs	.+16     	; 0x1688 <__ltsf2+0x56>
    1678:	89 89       	ldd	r24, Y+17	; 0x11
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	28 f0       	brcs	.+10     	; 0x1688 <__ltsf2+0x56>
    167e:	c7 01       	movw	r24, r14
    1680:	b8 01       	movw	r22, r16
    1682:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fpcmp_parts_f>
    1686:	01 c0       	rjmp	.+2      	; 0x168a <__ltsf2+0x58>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	68 96       	adiw	r28, 0x18	; 24
    168c:	e6 e0       	ldi	r30, 0x06	; 6
    168e:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <__epilogue_restores__+0x18>

00001692 <__fixsfsi>:
    1692:	ac e0       	ldi	r26, 0x0C	; 12
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__prologue_saves__+0x20>
    169e:	69 83       	std	Y+1, r22	; 0x01
    16a0:	7a 83       	std	Y+2, r23	; 0x02
    16a2:	8b 83       	std	Y+3, r24	; 0x03
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	be 01       	movw	r22, r28
    16ac:	6b 5f       	subi	r22, 0xFB	; 251
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	61 f1       	breq	.+88     	; 0x1712 <__fixsfsi+0x80>
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	50 f1       	brcs	.+84     	; 0x1712 <__fixsfsi+0x80>
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	21 f4       	brne	.+8      	; 0x16ca <__fixsfsi+0x38>
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	88 23       	and	r24, r24
    16c6:	51 f1       	breq	.+84     	; 0x171c <__fixsfsi+0x8a>
    16c8:	2e c0       	rjmp	.+92     	; 0x1726 <__fixsfsi+0x94>
    16ca:	2f 81       	ldd	r18, Y+7	; 0x07
    16cc:	38 85       	ldd	r19, Y+8	; 0x08
    16ce:	37 fd       	sbrc	r19, 7
    16d0:	20 c0       	rjmp	.+64     	; 0x1712 <__fixsfsi+0x80>
    16d2:	6e 81       	ldd	r22, Y+6	; 0x06
    16d4:	2f 31       	cpi	r18, 0x1F	; 31
    16d6:	31 05       	cpc	r19, r1
    16d8:	1c f0       	brlt	.+6      	; 0x16e0 <__fixsfsi+0x4e>
    16da:	66 23       	and	r22, r22
    16dc:	f9 f0       	breq	.+62     	; 0x171c <__fixsfsi+0x8a>
    16de:	23 c0       	rjmp	.+70     	; 0x1726 <__fixsfsi+0x94>
    16e0:	8e e1       	ldi	r24, 0x1E	; 30
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	82 1b       	sub	r24, r18
    16e6:	93 0b       	sbc	r25, r19
    16e8:	29 85       	ldd	r18, Y+9	; 0x09
    16ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    16ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <__fixsfsi+0x68>
    16f2:	56 95       	lsr	r21
    16f4:	47 95       	ror	r20
    16f6:	37 95       	ror	r19
    16f8:	27 95       	ror	r18
    16fa:	8a 95       	dec	r24
    16fc:	d2 f7       	brpl	.-12     	; 0x16f2 <__fixsfsi+0x60>
    16fe:	66 23       	and	r22, r22
    1700:	b1 f0       	breq	.+44     	; 0x172e <__fixsfsi+0x9c>
    1702:	50 95       	com	r21
    1704:	40 95       	com	r20
    1706:	30 95       	com	r19
    1708:	21 95       	neg	r18
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	4f 4f       	sbci	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	0e c0       	rjmp	.+28     	; 0x172e <__fixsfsi+0x9c>
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	09 c0       	rjmp	.+18     	; 0x172e <__fixsfsi+0x9c>
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	4f ef       	ldi	r20, 0xFF	; 255
    1722:	5f e7       	ldi	r21, 0x7F	; 127
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__fixsfsi+0x9c>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	50 e8       	ldi	r21, 0x80	; 128
    172e:	b9 01       	movw	r22, r18
    1730:	ca 01       	movw	r24, r20
    1732:	2c 96       	adiw	r28, 0x0c	; 12
    1734:	e2 e0       	ldi	r30, 0x02	; 2
    1736:	0c 94 47 3b 	jmp	0x768e	; 0x768e <__epilogue_restores__+0x20>

0000173a <__floatunsisf>:
    173a:	a8 e0       	ldi	r26, 0x08	; 8
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 ea       	ldi	r30, 0xA3	; 163
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <__prologue_saves__+0x10>
    1746:	7b 01       	movw	r14, r22
    1748:	8c 01       	movw	r16, r24
    174a:	61 15       	cp	r22, r1
    174c:	71 05       	cpc	r23, r1
    174e:	81 05       	cpc	r24, r1
    1750:	91 05       	cpc	r25, r1
    1752:	19 f4       	brne	.+6      	; 0x175a <__floatunsisf+0x20>
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	60 c0       	rjmp	.+192    	; 0x181a <__floatunsisf+0xe0>
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	8e e1       	ldi	r24, 0x1E	; 30
    1760:	c8 2e       	mov	r12, r24
    1762:	d1 2c       	mov	r13, r1
    1764:	dc 82       	std	Y+4, r13	; 0x04
    1766:	cb 82       	std	Y+3, r12	; 0x03
    1768:	ed 82       	std	Y+5, r14	; 0x05
    176a:	fe 82       	std	Y+6, r15	; 0x06
    176c:	0f 83       	std	Y+7, r16	; 0x07
    176e:	18 87       	std	Y+8, r17	; 0x08
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
    1774:	0e 94 16 0c 	call	0x182c	; 0x182c <__clzsi2>
    1778:	fc 01       	movw	r30, r24
    177a:	31 97       	sbiw	r30, 0x01	; 1
    177c:	f7 ff       	sbrs	r31, 7
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <__floatunsisf+0xbc>
    1780:	22 27       	eor	r18, r18
    1782:	33 27       	eor	r19, r19
    1784:	2e 1b       	sub	r18, r30
    1786:	3f 0b       	sbc	r19, r31
    1788:	57 01       	movw	r10, r14
    178a:	68 01       	movw	r12, r16
    178c:	02 2e       	mov	r0, r18
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <__floatunsisf+0x5e>
    1790:	d6 94       	lsr	r13
    1792:	c7 94       	ror	r12
    1794:	b7 94       	ror	r11
    1796:	a7 94       	ror	r10
    1798:	0a 94       	dec	r0
    179a:	d2 f7       	brpl	.-12     	; 0x1790 <__floatunsisf+0x56>
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <__floatunsisf+0x7c>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	aa 1f       	adc	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	2a 95       	dec	r18
    17b8:	d2 f7       	brpl	.-12     	; 0x17ae <__floatunsisf+0x74>
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	a1 09       	sbc	r26, r1
    17be:	b1 09       	sbc	r27, r1
    17c0:	8e 21       	and	r24, r14
    17c2:	9f 21       	and	r25, r15
    17c4:	a0 23       	and	r26, r16
    17c6:	b1 23       	and	r27, r17
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	a1 05       	cpc	r26, r1
    17cc:	b1 05       	cpc	r27, r1
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <__floatunsisf+0x9e>
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	4a 29       	or	r20, r10
    17da:	5b 29       	or	r21, r11
    17dc:	6c 29       	or	r22, r12
    17de:	7d 29       	or	r23, r13
    17e0:	4d 83       	std	Y+5, r20	; 0x05
    17e2:	5e 83       	std	Y+6, r21	; 0x06
    17e4:	6f 83       	std	Y+7, r22	; 0x07
    17e6:	78 87       	std	Y+8, r23	; 0x08
    17e8:	8e e1       	ldi	r24, 0x1E	; 30
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	8e 1b       	sub	r24, r30
    17ee:	9f 0b       	sbc	r25, r31
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	12 c0       	rjmp	.+36     	; 0x181a <__floatunsisf+0xe0>
    17f6:	30 97       	sbiw	r30, 0x00	; 0
    17f8:	81 f0       	breq	.+32     	; 0x181a <__floatunsisf+0xe0>
    17fa:	0e 2e       	mov	r0, r30
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <__floatunsisf+0xcc>
    17fe:	ee 0c       	add	r14, r14
    1800:	ff 1c       	adc	r15, r15
    1802:	00 1f       	adc	r16, r16
    1804:	11 1f       	adc	r17, r17
    1806:	0a 94       	dec	r0
    1808:	d2 f7       	brpl	.-12     	; 0x17fe <__floatunsisf+0xc4>
    180a:	ed 82       	std	Y+5, r14	; 0x05
    180c:	fe 82       	std	Y+6, r15	; 0x06
    180e:	0f 83       	std	Y+7, r16	; 0x07
    1810:	18 87       	std	Y+8, r17	; 0x08
    1812:	ce 1a       	sub	r12, r30
    1814:	df 0a       	sbc	r13, r31
    1816:	dc 82       	std	Y+4, r13	; 0x04
    1818:	cb 82       	std	Y+3, r12	; 0x03
    181a:	1a 82       	std	Y+2, r1	; 0x02
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    1824:	28 96       	adiw	r28, 0x08	; 8
    1826:	ea e0       	ldi	r30, 0x0A	; 10
    1828:	0c 94 3f 3b 	jmp	0x767e	; 0x767e <__epilogue_restores__+0x10>

0000182c <__clzsi2>:
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	7b 01       	movw	r14, r22
    1836:	8c 01       	movw	r16, r24
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	e8 16       	cp	r14, r24
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	f8 06       	cpc	r15, r24
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	08 07       	cpc	r16, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	18 07       	cpc	r17, r24
    1848:	88 f4       	brcc	.+34     	; 0x186c <__clzsi2+0x40>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	e8 16       	cp	r14, r24
    184e:	f1 04       	cpc	r15, r1
    1850:	01 05       	cpc	r16, r1
    1852:	11 05       	cpc	r17, r1
    1854:	31 f0       	breq	.+12     	; 0x1862 <__clzsi2+0x36>
    1856:	28 f0       	brcs	.+10     	; 0x1862 <__clzsi2+0x36>
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	17 c0       	rjmp	.+46     	; 0x1890 <__clzsi2+0x64>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	12 c0       	rjmp	.+36     	; 0x1890 <__clzsi2+0x64>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	e8 16       	cp	r14, r24
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	f8 06       	cpc	r15, r24
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	08 07       	cpc	r16, r24
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	18 07       	cpc	r17, r24
    187c:	28 f0       	brcs	.+10     	; 0x1888 <__clzsi2+0x5c>
    187e:	88 e1       	ldi	r24, 0x18	; 24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <__clzsi2+0x64>
    1888:	80 e1       	ldi	r24, 0x10	; 16
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	20 e2       	ldi	r18, 0x20	; 32
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	28 1b       	sub	r18, r24
    189a:	39 0b       	sbc	r19, r25
    189c:	4a 0b       	sbc	r20, r26
    189e:	5b 0b       	sbc	r21, r27
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__clzsi2+0x7e>
    18a2:	16 95       	lsr	r17
    18a4:	07 95       	ror	r16
    18a6:	f7 94       	ror	r15
    18a8:	e7 94       	ror	r14
    18aa:	8a 95       	dec	r24
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <__clzsi2+0x76>
    18ae:	f7 01       	movw	r30, r14
    18b0:	e8 59       	subi	r30, 0x98	; 152
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	28 1b       	sub	r18, r24
    18b8:	31 09       	sbc	r19, r1
    18ba:	41 09       	sbc	r20, r1
    18bc:	51 09       	sbc	r21, r1
    18be:	c9 01       	movw	r24, r18
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	08 95       	ret

000018ca <__pack_f>:
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	fc 01       	movw	r30, r24
    18d6:	e4 80       	ldd	r14, Z+4	; 0x04
    18d8:	f5 80       	ldd	r15, Z+5	; 0x05
    18da:	06 81       	ldd	r16, Z+6	; 0x06
    18dc:	17 81       	ldd	r17, Z+7	; 0x07
    18de:	d1 80       	ldd	r13, Z+1	; 0x01
    18e0:	80 81       	ld	r24, Z
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	48 f4       	brcc	.+18     	; 0x18f8 <__pack_f+0x2e>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e1       	ldi	r26, 0x10	; 16
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 2a       	or	r14, r24
    18f0:	f9 2a       	or	r15, r25
    18f2:	0a 2b       	or	r16, r26
    18f4:	1b 2b       	or	r17, r27
    18f6:	a5 c0       	rjmp	.+330    	; 0x1a42 <__pack_f+0x178>
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	09 f4       	brne	.+2      	; 0x18fe <__pack_f+0x34>
    18fc:	9f c0       	rjmp	.+318    	; 0x1a3c <__pack_f+0x172>
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	21 f4       	brne	.+8      	; 0x190a <__pack_f+0x40>
    1902:	ee 24       	eor	r14, r14
    1904:	ff 24       	eor	r15, r15
    1906:	87 01       	movw	r16, r14
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <__pack_f+0x4a>
    190a:	e1 14       	cp	r14, r1
    190c:	f1 04       	cpc	r15, r1
    190e:	01 05       	cpc	r16, r1
    1910:	11 05       	cpc	r17, r1
    1912:	19 f4       	brne	.+6      	; 0x191a <__pack_f+0x50>
    1914:	e0 e0       	ldi	r30, 0x00	; 0
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	96 c0       	rjmp	.+300    	; 0x1a46 <__pack_f+0x17c>
    191a:	62 81       	ldd	r22, Z+2	; 0x02
    191c:	73 81       	ldd	r23, Z+3	; 0x03
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	62 38       	cpi	r22, 0x82	; 130
    1922:	79 07       	cpc	r23, r25
    1924:	0c f0       	brlt	.+2      	; 0x1928 <__pack_f+0x5e>
    1926:	5b c0       	rjmp	.+182    	; 0x19de <__pack_f+0x114>
    1928:	22 e8       	ldi	r18, 0x82	; 130
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	26 1b       	sub	r18, r22
    192e:	37 0b       	sbc	r19, r23
    1930:	2a 31       	cpi	r18, 0x1A	; 26
    1932:	31 05       	cpc	r19, r1
    1934:	2c f0       	brlt	.+10     	; 0x1940 <__pack_f+0x76>
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	2a c0       	rjmp	.+84     	; 0x1994 <__pack_f+0xca>
    1940:	b8 01       	movw	r22, r16
    1942:	a7 01       	movw	r20, r14
    1944:	02 2e       	mov	r0, r18
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <__pack_f+0x86>
    1948:	76 95       	lsr	r23
    194a:	67 95       	ror	r22
    194c:	57 95       	ror	r21
    194e:	47 95       	ror	r20
    1950:	0a 94       	dec	r0
    1952:	d2 f7       	brpl	.-12     	; 0x1948 <__pack_f+0x7e>
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <__pack_f+0x9c>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	2a 95       	dec	r18
    1968:	d2 f7       	brpl	.-12     	; 0x195e <__pack_f+0x94>
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	a1 09       	sbc	r26, r1
    196e:	b1 09       	sbc	r27, r1
    1970:	8e 21       	and	r24, r14
    1972:	9f 21       	and	r25, r15
    1974:	a0 23       	and	r26, r16
    1976:	b1 23       	and	r27, r17
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	a1 05       	cpc	r26, r1
    197c:	b1 05       	cpc	r27, r1
    197e:	21 f0       	breq	.+8      	; 0x1988 <__pack_f+0xbe>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	9a 01       	movw	r18, r20
    198a:	ab 01       	movw	r20, r22
    198c:	28 2b       	or	r18, r24
    198e:	39 2b       	or	r19, r25
    1990:	4a 2b       	or	r20, r26
    1992:	5b 2b       	or	r21, r27
    1994:	da 01       	movw	r26, r20
    1996:	c9 01       	movw	r24, r18
    1998:	8f 77       	andi	r24, 0x7F	; 127
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	a0 70       	andi	r26, 0x00	; 0
    199e:	b0 70       	andi	r27, 0x00	; 0
    19a0:	80 34       	cpi	r24, 0x40	; 64
    19a2:	91 05       	cpc	r25, r1
    19a4:	a1 05       	cpc	r26, r1
    19a6:	b1 05       	cpc	r27, r1
    19a8:	39 f4       	brne	.+14     	; 0x19b8 <__pack_f+0xee>
    19aa:	27 ff       	sbrs	r18, 7
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <__pack_f+0xf6>
    19ae:	20 5c       	subi	r18, 0xC0	; 192
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	4f 4f       	sbci	r20, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <__pack_f+0xf6>
    19b8:	21 5c       	subi	r18, 0xC1	; 193
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	4f 4f       	sbci	r20, 0xFF	; 255
    19be:	5f 4f       	sbci	r21, 0xFF	; 255
    19c0:	e0 e0       	ldi	r30, 0x00	; 0
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	20 30       	cpi	r18, 0x00	; 0
    19c6:	a0 e0       	ldi	r26, 0x00	; 0
    19c8:	3a 07       	cpc	r19, r26
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	4a 07       	cpc	r20, r26
    19ce:	a0 e4       	ldi	r26, 0x40	; 64
    19d0:	5a 07       	cpc	r21, r26
    19d2:	10 f0       	brcs	.+4      	; 0x19d8 <__pack_f+0x10e>
    19d4:	e1 e0       	ldi	r30, 0x01	; 1
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	79 01       	movw	r14, r18
    19da:	8a 01       	movw	r16, r20
    19dc:	27 c0       	rjmp	.+78     	; 0x1a2c <__pack_f+0x162>
    19de:	60 38       	cpi	r22, 0x80	; 128
    19e0:	71 05       	cpc	r23, r1
    19e2:	64 f5       	brge	.+88     	; 0x1a3c <__pack_f+0x172>
    19e4:	fb 01       	movw	r30, r22
    19e6:	e1 58       	subi	r30, 0x81	; 129
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	d8 01       	movw	r26, r16
    19ec:	c7 01       	movw	r24, r14
    19ee:	8f 77       	andi	r24, 0x7F	; 127
    19f0:	90 70       	andi	r25, 0x00	; 0
    19f2:	a0 70       	andi	r26, 0x00	; 0
    19f4:	b0 70       	andi	r27, 0x00	; 0
    19f6:	80 34       	cpi	r24, 0x40	; 64
    19f8:	91 05       	cpc	r25, r1
    19fa:	a1 05       	cpc	r26, r1
    19fc:	b1 05       	cpc	r27, r1
    19fe:	39 f4       	brne	.+14     	; 0x1a0e <__pack_f+0x144>
    1a00:	e7 fe       	sbrs	r14, 7
    1a02:	0d c0       	rjmp	.+26     	; 0x1a1e <__pack_f+0x154>
    1a04:	80 e4       	ldi	r24, 0x40	; 64
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <__pack_f+0x14c>
    1a0e:	8f e3       	ldi	r24, 0x3F	; 63
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 0e       	add	r14, r24
    1a18:	f9 1e       	adc	r15, r25
    1a1a:	0a 1f       	adc	r16, r26
    1a1c:	1b 1f       	adc	r17, r27
    1a1e:	17 ff       	sbrs	r17, 7
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <__pack_f+0x162>
    1a22:	16 95       	lsr	r17
    1a24:	07 95       	ror	r16
    1a26:	f7 94       	ror	r15
    1a28:	e7 94       	ror	r14
    1a2a:	31 96       	adiw	r30, 0x01	; 1
    1a2c:	87 e0       	ldi	r24, 0x07	; 7
    1a2e:	16 95       	lsr	r17
    1a30:	07 95       	ror	r16
    1a32:	f7 94       	ror	r15
    1a34:	e7 94       	ror	r14
    1a36:	8a 95       	dec	r24
    1a38:	d1 f7       	brne	.-12     	; 0x1a2e <__pack_f+0x164>
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <__pack_f+0x17c>
    1a3c:	ee 24       	eor	r14, r14
    1a3e:	ff 24       	eor	r15, r15
    1a40:	87 01       	movw	r16, r14
    1a42:	ef ef       	ldi	r30, 0xFF	; 255
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	6e 2f       	mov	r22, r30
    1a48:	67 95       	ror	r22
    1a4a:	66 27       	eor	r22, r22
    1a4c:	67 95       	ror	r22
    1a4e:	90 2f       	mov	r25, r16
    1a50:	9f 77       	andi	r25, 0x7F	; 127
    1a52:	d7 94       	ror	r13
    1a54:	dd 24       	eor	r13, r13
    1a56:	d7 94       	ror	r13
    1a58:	8e 2f       	mov	r24, r30
    1a5a:	86 95       	lsr	r24
    1a5c:	49 2f       	mov	r20, r25
    1a5e:	46 2b       	or	r20, r22
    1a60:	58 2f       	mov	r21, r24
    1a62:	5d 29       	or	r21, r13
    1a64:	b7 01       	movw	r22, r14
    1a66:	ca 01       	movw	r24, r20
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	08 95       	ret

00001a74 <__unpack_f>:
    1a74:	fc 01       	movw	r30, r24
    1a76:	db 01       	movw	r26, r22
    1a78:	40 81       	ld	r20, Z
    1a7a:	51 81       	ldd	r21, Z+1	; 0x01
    1a7c:	22 81       	ldd	r18, Z+2	; 0x02
    1a7e:	62 2f       	mov	r22, r18
    1a80:	6f 77       	andi	r22, 0x7F	; 127
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	22 1f       	adc	r18, r18
    1a86:	22 27       	eor	r18, r18
    1a88:	22 1f       	adc	r18, r18
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	89 2f       	mov	r24, r25
    1a8e:	88 0f       	add	r24, r24
    1a90:	82 2b       	or	r24, r18
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	99 1f       	adc	r25, r25
    1a98:	99 27       	eor	r25, r25
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	11 96       	adiw	r26, 0x01	; 1
    1a9e:	9c 93       	st	X, r25
    1aa0:	11 97       	sbiw	r26, 0x01	; 1
    1aa2:	21 15       	cp	r18, r1
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	a9 f5       	brne	.+106    	; 0x1b12 <__unpack_f+0x9e>
    1aa8:	41 15       	cp	r20, r1
    1aaa:	51 05       	cpc	r21, r1
    1aac:	61 05       	cpc	r22, r1
    1aae:	71 05       	cpc	r23, r1
    1ab0:	11 f4       	brne	.+4      	; 0x1ab6 <__unpack_f+0x42>
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	37 c0       	rjmp	.+110    	; 0x1b24 <__unpack_f+0xb0>
    1ab6:	82 e8       	ldi	r24, 0x82	; 130
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	13 96       	adiw	r26, 0x03	; 3
    1abc:	9c 93       	st	X, r25
    1abe:	8e 93       	st	-X, r24
    1ac0:	12 97       	sbiw	r26, 0x02	; 2
    1ac2:	9a 01       	movw	r18, r20
    1ac4:	ab 01       	movw	r20, r22
    1ac6:	67 e0       	ldi	r22, 0x07	; 7
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	44 1f       	adc	r20, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	6a 95       	dec	r22
    1ad2:	d1 f7       	brne	.-12     	; 0x1ac8 <__unpack_f+0x54>
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	8c 93       	st	X, r24
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <__unpack_f+0x80>
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	44 1f       	adc	r20, r20
    1ae0:	55 1f       	adc	r21, r21
    1ae2:	12 96       	adiw	r26, 0x02	; 2
    1ae4:	8d 91       	ld	r24, X+
    1ae6:	9c 91       	ld	r25, X
    1ae8:	13 97       	sbiw	r26, 0x03	; 3
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	13 96       	adiw	r26, 0x03	; 3
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	12 97       	sbiw	r26, 0x02	; 2
    1af4:	20 30       	cpi	r18, 0x00	; 0
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	38 07       	cpc	r19, r24
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	48 07       	cpc	r20, r24
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	58 07       	cpc	r21, r24
    1b02:	58 f3       	brcs	.-42     	; 0x1ada <__unpack_f+0x66>
    1b04:	14 96       	adiw	r26, 0x04	; 4
    1b06:	2d 93       	st	X+, r18
    1b08:	3d 93       	st	X+, r19
    1b0a:	4d 93       	st	X+, r20
    1b0c:	5c 93       	st	X, r21
    1b0e:	17 97       	sbiw	r26, 0x07	; 7
    1b10:	08 95       	ret
    1b12:	2f 3f       	cpi	r18, 0xFF	; 255
    1b14:	31 05       	cpc	r19, r1
    1b16:	79 f4       	brne	.+30     	; 0x1b36 <__unpack_f+0xc2>
    1b18:	41 15       	cp	r20, r1
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	61 05       	cpc	r22, r1
    1b1e:	71 05       	cpc	r23, r1
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <__unpack_f+0xb4>
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	8c 93       	st	X, r24
    1b26:	08 95       	ret
    1b28:	64 ff       	sbrs	r22, 4
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <__unpack_f+0xbe>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	8c 93       	st	X, r24
    1b30:	12 c0       	rjmp	.+36     	; 0x1b56 <__unpack_f+0xe2>
    1b32:	1c 92       	st	X, r1
    1b34:	10 c0       	rjmp	.+32     	; 0x1b56 <__unpack_f+0xe2>
    1b36:	2f 57       	subi	r18, 0x7F	; 127
    1b38:	30 40       	sbci	r19, 0x00	; 0
    1b3a:	13 96       	adiw	r26, 0x03	; 3
    1b3c:	3c 93       	st	X, r19
    1b3e:	2e 93       	st	-X, r18
    1b40:	12 97       	sbiw	r26, 0x02	; 2
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	8c 93       	st	X, r24
    1b46:	87 e0       	ldi	r24, 0x07	; 7
    1b48:	44 0f       	add	r20, r20
    1b4a:	55 1f       	adc	r21, r21
    1b4c:	66 1f       	adc	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	8a 95       	dec	r24
    1b52:	d1 f7       	brne	.-12     	; 0x1b48 <__unpack_f+0xd4>
    1b54:	70 64       	ori	r23, 0x40	; 64
    1b56:	14 96       	adiw	r26, 0x04	; 4
    1b58:	4d 93       	st	X+, r20
    1b5a:	5d 93       	st	X+, r21
    1b5c:	6d 93       	st	X+, r22
    1b5e:	7c 93       	st	X, r23
    1b60:	17 97       	sbiw	r26, 0x07	; 7
    1b62:	08 95       	ret

00001b64 <__fpcmp_parts_f>:
    1b64:	1f 93       	push	r17
    1b66:	dc 01       	movw	r26, r24
    1b68:	fb 01       	movw	r30, r22
    1b6a:	9c 91       	ld	r25, X
    1b6c:	92 30       	cpi	r25, 0x02	; 2
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <__fpcmp_parts_f+0xe>
    1b70:	47 c0       	rjmp	.+142    	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1b72:	80 81       	ld	r24, Z
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <__fpcmp_parts_f+0x16>
    1b78:	43 c0       	rjmp	.+134    	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1b7a:	94 30       	cpi	r25, 0x04	; 4
    1b7c:	51 f4       	brne	.+20     	; 0x1b92 <__fpcmp_parts_f+0x2e>
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	1c 91       	ld	r17, X
    1b82:	84 30       	cpi	r24, 0x04	; 4
    1b84:	99 f5       	brne	.+102    	; 0x1bec <__fpcmp_parts_f+0x88>
    1b86:	81 81       	ldd	r24, Z+1	; 0x01
    1b88:	68 2f       	mov	r22, r24
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	61 1b       	sub	r22, r17
    1b8e:	71 09       	sbc	r23, r1
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <__fpcmp_parts_f+0xac>
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <__fpcmp_parts_f+0x3a>
    1b96:	92 30       	cpi	r25, 0x02	; 2
    1b98:	31 f4       	brne	.+12     	; 0x1ba6 <__fpcmp_parts_f+0x42>
    1b9a:	82 30       	cpi	r24, 0x02	; 2
    1b9c:	b9 f1       	breq	.+110    	; 0x1c0c <__fpcmp_parts_f+0xa8>
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	88 23       	and	r24, r24
    1ba2:	89 f1       	breq	.+98     	; 0x1c06 <__fpcmp_parts_f+0xa2>
    1ba4:	2d c0       	rjmp	.+90     	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1ba6:	11 96       	adiw	r26, 0x01	; 1
    1ba8:	1c 91       	ld	r17, X
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <__fpcmp_parts_f+0x88>
    1bb0:	81 81       	ldd	r24, Z+1	; 0x01
    1bb2:	18 17       	cp	r17, r24
    1bb4:	d9 f4       	brne	.+54     	; 0x1bec <__fpcmp_parts_f+0x88>
    1bb6:	12 96       	adiw	r26, 0x02	; 2
    1bb8:	2d 91       	ld	r18, X+
    1bba:	3c 91       	ld	r19, X
    1bbc:	13 97       	sbiw	r26, 0x03	; 3
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	82 17       	cp	r24, r18
    1bc4:	93 07       	cpc	r25, r19
    1bc6:	94 f0       	brlt	.+36     	; 0x1bec <__fpcmp_parts_f+0x88>
    1bc8:	28 17       	cp	r18, r24
    1bca:	39 07       	cpc	r19, r25
    1bcc:	bc f0       	brlt	.+46     	; 0x1bfc <__fpcmp_parts_f+0x98>
    1bce:	14 96       	adiw	r26, 0x04	; 4
    1bd0:	8d 91       	ld	r24, X+
    1bd2:	9d 91       	ld	r25, X+
    1bd4:	0d 90       	ld	r0, X+
    1bd6:	bc 91       	ld	r27, X
    1bd8:	a0 2d       	mov	r26, r0
    1bda:	24 81       	ldd	r18, Z+4	; 0x04
    1bdc:	35 81       	ldd	r19, Z+5	; 0x05
    1bde:	46 81       	ldd	r20, Z+6	; 0x06
    1be0:	57 81       	ldd	r21, Z+7	; 0x07
    1be2:	28 17       	cp	r18, r24
    1be4:	39 07       	cpc	r19, r25
    1be6:	4a 07       	cpc	r20, r26
    1be8:	5b 07       	cpc	r21, r27
    1bea:	18 f4       	brcc	.+6      	; 0x1bf2 <__fpcmp_parts_f+0x8e>
    1bec:	11 23       	and	r17, r17
    1bee:	41 f0       	breq	.+16     	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1bf0:	0a c0       	rjmp	.+20     	; 0x1c06 <__fpcmp_parts_f+0xa2>
    1bf2:	82 17       	cp	r24, r18
    1bf4:	93 07       	cpc	r25, r19
    1bf6:	a4 07       	cpc	r26, r20
    1bf8:	b5 07       	cpc	r27, r21
    1bfa:	40 f4       	brcc	.+16     	; 0x1c0c <__fpcmp_parts_f+0xa8>
    1bfc:	11 23       	and	r17, r17
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <__fpcmp_parts_f+0xa2>
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <__fpcmp_parts_f+0xac>
    1c06:	6f ef       	ldi	r22, 0xFF	; 255
    1c08:	7f ef       	ldi	r23, 0xFF	; 255
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <__fpcmp_parts_f+0xac>
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	cb 01       	movw	r24, r22
    1c12:	1f 91       	pop	r17
    1c14:	08 95       	ret

00001c16 <UART_voidSendStringSynchBlocking>:
/**********************************************************************************/
                            /*send string techniques*/

//Send String synch blocking
void UART_voidSendStringSynchBlocking(u8 *A_u8Word)
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <UART_voidSendStringSynchBlocking+0x6>
    1c1c:	0f 92       	push	r0
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	9b 83       	std	Y+3, r25	; 0x03
    1c24:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Counter=0;
    1c26:	19 82       	std	Y+1, r1	; 0x01
    1c28:	0e c0       	rjmp	.+28     	; 0x1c46 <UART_voidSendStringSynchBlocking+0x30>
    while(A_u8Word[local_u8Counter] != '\0')
    {
        UART_voidSendByteSynchBlocking(A_u8Word[local_u8Counter]);
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	fc 01       	movw	r30, r24
    1c36:	e2 0f       	add	r30, r18
    1c38:	f3 1f       	adc	r31, r19
    1c3a:	80 81       	ld	r24, Z
    1c3c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <UART_voidSendByteSynchBlocking>
        local_u8Counter++;
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	89 83       	std	Y+1, r24	; 0x01

//Send String synch blocking
void UART_voidSendStringSynchBlocking(u8 *A_u8Word)
{
    u8 local_u8Counter=0;
    while(A_u8Word[local_u8Counter] != '\0')
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	fc 01       	movw	r30, r24
    1c52:	e2 0f       	add	r30, r18
    1c54:	f3 1f       	adc	r31, r19
    1c56:	80 81       	ld	r24, Z
    1c58:	88 23       	and	r24, r24
    1c5a:	39 f7       	brne	.-50     	; 0x1c2a <UART_voidSendStringSynchBlocking+0x14>
    {
        UART_voidSendByteSynchBlocking(A_u8Word[local_u8Counter]);
        local_u8Counter++;
    }
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <UART_voidSendStingAsynch>:

//send string asynch non-blocking
void UART_voidSendStingAsynch(u8 *ptr)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <UART_voidSendStingAsynch+0x6>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    UART_voidSetCallTXC(FUNC_TX);
    1c76:	81 e5       	ldi	r24, 0x51	; 81
    1c78:	9e e0       	ldi	r25, 0x0E	; 14
    1c7a:	0e 94 65 13 	call	0x26ca	; 0x26ca <UART_voidSetCallTXC>
    UART_voidTXCompleteInterruptEnable();
    1c7e:	0e 94 09 13 	call	0x2612	; 0x2612 <UART_voidTXCompleteInterruptEnable>
    UART_voidSendByteAsynch(ptr[0]);
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	80 81       	ld	r24, Z
    1c88:	0e 94 98 12 	call	0x2530	; 0x2530 <UART_voidSendByteAsynch>
    Asynch_Sent_Str=ptr;
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	90 93 99 01 	sts	0x0199, r25
    1c94:	80 93 98 01 	sts	0x0198, r24
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <FUNC_TX>:

//send this function to ISR
void FUNC_TX()
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    static u8 i=1;
    if(Asynch_Sent_Str[i]!='\0')
    1caa:	20 91 98 01 	lds	r18, 0x0198
    1cae:	30 91 99 01 	lds	r19, 0x0199
    1cb2:	80 91 68 01 	lds	r24, 0x0168
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	f9 01       	movw	r30, r18
    1cbc:	e8 0f       	add	r30, r24
    1cbe:	f9 1f       	adc	r31, r25
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 23       	and	r24, r24
    1cc4:	a1 f0       	breq	.+40     	; 0x1cee <FUNC_TX+0x4c>
    {
        UART_voidSendByteAsynch(Asynch_Sent_Str[i]);
    1cc6:	20 91 98 01 	lds	r18, 0x0198
    1cca:	30 91 99 01 	lds	r19, 0x0199
    1cce:	80 91 68 01 	lds	r24, 0x0168
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	e8 0f       	add	r30, r24
    1cda:	f9 1f       	adc	r31, r25
    1cdc:	80 81       	ld	r24, Z
    1cde:	0e 94 98 12 	call	0x2530	; 0x2530 <UART_voidSendByteAsynch>
        i++;
    1ce2:	80 91 68 01 	lds	r24, 0x0168
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	80 93 68 01 	sts	0x0168, r24
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <FUNC_TX+0x52>
    }
    else i=1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 93 68 01 	sts	0x0168, r24
}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <UART_voidReceiveString>:


/**********************************************************************************/
                            /*receive string techniques*/
void UART_voidReceiveString(u8 *ptr)
{
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <UART_voidReceiveString+0xa>
    1d04:	0f 92       	push	r0
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	9b 83       	std	Y+3, r25	; 0x03
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    ptr[i] = UART_u8ReadByteSynchBlocking();
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1a:	8c 01       	movw	r16, r24
    1d1c:	02 0f       	add	r16, r18
    1d1e:	13 1f       	adc	r17, r19
    1d20:	0e 94 a6 12 	call	0x254c	; 0x254c <UART_u8ReadByteSynchBlocking>
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 83       	st	Z, r24
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <UART_voidReceiveString+0x4e>
        0x0d is hex code for enter in proteus
        in docklight you send two numbers when you push enter 10 13 for example
    */
    while(ptr[i]!=0x0d)
    {
        i++;
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	89 83       	std	Y+1, r24	; 0x01
        ptr[i] = UART_u8ReadByteSynchBlocking();
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	02 0f       	add	r16, r18
    1d3e:	13 1f       	adc	r17, r19
    1d40:	0e 94 a6 12 	call	0x254c	; 0x254c <UART_u8ReadByteSynchBlocking>
    1d44:	f8 01       	movw	r30, r16
    1d46:	80 83       	st	Z, r24
    ptr[i] = UART_u8ReadByteSynchBlocking();
    /*
        0x0d is hex code for enter in proteus
        in docklight you send two numbers when you push enter 10 13 for example
    */
    while(ptr[i]!=0x0d)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	80 81       	ld	r24, Z
    1d5a:	8d 30       	cpi	r24, 0x0D	; 13
    1d5c:	31 f7       	brne	.-52     	; 0x1d2a <UART_voidReceiveString+0x30>
    {
        i++;
        ptr[i] = UART_u8ReadByteSynchBlocking();
    }
    ptr[i]='\0';
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e2 0f       	add	r30, r18
    1d6c:	f3 1f       	adc	r31, r19
    1d6e:	10 82       	st	Z, r1
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	08 95       	ret

00001d80 <UART_voidReceiveStringAsynch>:

void UART_voidReceiveStringAsynch(u8 *str)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <UART_voidReceiveStringAsynch+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    UART_voidSetCallRXC(FUNC_RX);
    1d8e:	88 ed       	ldi	r24, 0xD8	; 216
    1d90:	9e e0       	ldi	r25, 0x0E	; 14
    1d92:	0e 94 41 13 	call	0x2682	; 0x2682 <UART_voidSetCallRXC>
    UART_voidRXCompleteInterruptEnable();
    1d96:	0e 94 ed 12 	call	0x25da	; 0x25da <UART_voidRXCompleteInterruptEnable>
    Asynch_receive_Str=str;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	90 93 9b 01 	sts	0x019B, r25
    1da2:	80 93 9a 01 	sts	0x019A, r24
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <FUNC_RX>:

void FUNC_RX()
{
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    static u8 i=0;
    Asynch_receive_Str[i] = UART_u8ReadByteAsynch();
    1dbc:	20 91 9a 01 	lds	r18, 0x019A
    1dc0:	30 91 9b 01 	lds	r19, 0x019B
    1dc4:	80 91 9c 01 	lds	r24, 0x019C
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	89 01       	movw	r16, r18
    1dce:	08 0f       	add	r16, r24
    1dd0:	19 1f       	adc	r17, r25
    1dd2:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <UART_u8ReadByteAsynch>
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 83       	st	Z, r24
    i++;
    1dda:	80 91 9c 01 	lds	r24, 0x019C
    1dde:	8f 5f       	subi	r24, 0xFF	; 255
    1de0:	80 93 9c 01 	sts	0x019C, r24
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	08 95       	ret

00001dee <UART_voidSendStringMyProtocol>:


/**********************************************************************************/
                            /*My Protocol to send And receive*/
void UART_voidSendStringMyProtocol(u8 *str)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <UART_voidSendStringMyProtocol+0x6>
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <UART_voidSendStringMyProtocol+0x8>
    1df6:	0f 92       	push	r0
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9d 83       	std	Y+5, r25	; 0x05
    1dfe:	8c 83       	std	Y+4, r24	; 0x04
    u8 lens=0,sum=0,i=0;
    1e00:	1b 82       	std	Y+3, r1	; 0x03
    1e02:	1a 82       	std	Y+2, r1	; 0x02
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <UART_voidSendStringMyProtocol+0x38>
    while(str[lens]!='\0')
    {
        sum+=str[lens];
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	90 81       	ld	r25, Z
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	89 0f       	add	r24, r25
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
        lens++;
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************/
                            /*My Protocol to send And receive*/
void UART_voidSendStringMyProtocol(u8 *str)
{
    u8 lens=0,sum=0,i=0;
    while(str[lens]!='\0')
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	fc 01       	movw	r30, r24
    1e32:	e2 0f       	add	r30, r18
    1e34:	f3 1f       	adc	r31, r19
    1e36:	80 81       	ld	r24, Z
    1e38:	88 23       	and	r24, r24
    1e3a:	31 f7       	brne	.-52     	; 0x1e08 <UART_voidSendStringMyProtocol+0x1a>
    {
        sum+=str[lens];
        lens++;
    }
    UART_voidSendByteSynchBlocking(lens);
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <UART_voidSendByteSynchBlocking>
    1e42:	0b c0       	rjmp	.+22     	; 0x1e5a <UART_voidSendStringMyProtocol+0x6c>

    while(str[i]!='\0')
    {
        UART_voidSendByteSynchBlocking(str[i]);
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	fc 01       	movw	r30, r24
    1e50:	e2 0f       	add	r30, r18
    1e52:	f3 1f       	adc	r31, r19
    1e54:	80 81       	ld	r24, Z
    1e56:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <UART_voidSendByteSynchBlocking>
        sum+=str[lens];
        lens++;
    }
    UART_voidSendByteSynchBlocking(lens);

    while(str[i]!='\0')
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	9d 81       	ldd	r25, Y+5	; 0x05
    1e64:	fc 01       	movw	r30, r24
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 23       	and	r24, r24
    1e6e:	51 f7       	brne	.-44     	; 0x1e44 <UART_voidSendStringMyProtocol+0x56>
    {
        UART_voidSendByteSynchBlocking(str[i]);
    }
    UART_voidSendByteSynchBlocking((u8)sum);
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <UART_voidSendByteSynchBlocking>
    UART_voidSendByteSynchBlocking((u8)(sum >> 8));
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	89 2f       	mov	r24, r25
    1e7e:	99 0f       	add	r25, r25
    1e80:	99 0b       	sbc	r25, r25
    1e82:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <UART_voidSendByteSynchBlocking>
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <UART_voidReceiveStringMyProtocol>:

u8 UART_voidReceiveStringMyProtocol(u8 *str)
{
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	9a 87       	std	Y+10, r25	; 0x0a
    1eb0:	89 87       	std	Y+9, r24	; 0x09
    u8 i, lens = UART_u8ReadByteSynchBlocking();
    1eb2:	0e 94 a6 12 	call	0x254c	; 0x254c <UART_u8ReadByteSynchBlocking>
    1eb6:	8f 83       	std	Y+7, r24	; 0x07
    u16 sum_rec=0,sum_cal=0;
    1eb8:	1e 82       	std	Y+6, r1	; 0x06
    1eba:	1d 82       	std	Y+5, r1	; 0x05
    1ebc:	1c 82       	std	Y+4, r1	; 0x04
    1ebe:	1b 82       	std	Y+3, r1	; 0x03
    u8 first_byte,second_byte;

    for(i=0;i<lens;i++)
    1ec0:	18 86       	std	Y+8, r1	; 0x08
    1ec2:	20 c0       	rjmp	.+64     	; 0x1f04 <UART_voidReceiveStringMyProtocol+0x6e>
    {
        str[i] = UART_u8ReadByteSynchBlocking();
    1ec4:	88 85       	ldd	r24, Y+8	; 0x08
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	89 85       	ldd	r24, Y+9	; 0x09
    1ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ece:	8c 01       	movw	r16, r24
    1ed0:	02 0f       	add	r16, r18
    1ed2:	13 1f       	adc	r17, r19
    1ed4:	0e 94 a6 12 	call	0x254c	; 0x254c <UART_u8ReadByteSynchBlocking>
    1ed8:	f8 01       	movw	r30, r16
    1eda:	80 83       	st	Z, r24
        sum_cal+=str[i];
    1edc:	88 85       	ldd	r24, Y+8	; 0x08
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	e2 0f       	add	r30, r18
    1eea:	f3 1f       	adc	r31, r19
    1eec:	80 81       	ld	r24, Z
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	82 0f       	add	r24, r18
    1ef8:	93 1f       	adc	r25, r19
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
{
    u8 i, lens = UART_u8ReadByteSynchBlocking();
    u16 sum_rec=0,sum_cal=0;
    u8 first_byte,second_byte;

    for(i=0;i<lens;i++)
    1efe:	88 85       	ldd	r24, Y+8	; 0x08
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	88 87       	std	Y+8, r24	; 0x08
    1f04:	98 85       	ldd	r25, Y+8	; 0x08
    1f06:	8f 81       	ldd	r24, Y+7	; 0x07
    1f08:	98 17       	cp	r25, r24
    1f0a:	e0 f2       	brcs	.-72     	; 0x1ec4 <UART_voidReceiveStringMyProtocol+0x2e>
    {
        str[i] = UART_u8ReadByteSynchBlocking();
        sum_cal+=str[i];
    }
    first_byte = UART_u8ReadByteSynchBlocking();
    1f0c:	0e 94 a6 12 	call	0x254c	; 0x254c <UART_u8ReadByteSynchBlocking>
    1f10:	8a 83       	std	Y+2, r24	; 0x02
    second_byte = UART_u8ReadByteSynchBlocking();
    1f12:	0e 94 a6 12 	call	0x254c	; 0x254c <UART_u8ReadByteSynchBlocking>
    1f16:	89 83       	std	Y+1, r24	; 0x01
    sum_cal=first_byte | (second_byte<<8);
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	88 2f       	mov	r24, r24
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	98 2f       	mov	r25, r24
    1f26:	88 27       	eor	r24, r24
    1f28:	82 2b       	or	r24, r18
    1f2a:	93 2b       	or	r25, r19
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    if(sum_cal == sum_rec) return 1;
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	3c 81       	ldd	r19, Y+4	; 0x04
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	28 17       	cp	r18, r24
    1f3a:	39 07       	cpc	r19, r25
    1f3c:	19 f4       	brne	.+6      	; 0x1f44 <UART_voidReceiveStringMyProtocol+0xae>
    1f3e:	f1 e0       	ldi	r31, 0x01	; 1
    1f40:	fb 87       	std	Y+11, r31	; 0x0b
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <UART_voidReceiveStringMyProtocol+0xb0>
    return 0;
    1f44:	1b 86       	std	Y+11, r1	; 0x0b
    1f46:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    1f48:	2b 96       	adiw	r28, 0x0b	; 11
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	08 95       	ret

00001f5e <UART_u8Frame>:

/**********************************************************************************/
u8 UART_u8Frame(u8 *str, u8 *s1, u8 *s2, u8 *pnum1, u8 *pnum2)
{
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	63 97       	sbiw	r28, 0x13	; 19
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	9a 87       	std	Y+10, r25	; 0x0a
    1f78:	89 87       	std	Y+9, r24	; 0x09
    1f7a:	7c 87       	std	Y+12, r23	; 0x0c
    1f7c:	6b 87       	std	Y+11, r22	; 0x0b
    1f7e:	5e 87       	std	Y+14, r21	; 0x0e
    1f80:	4d 87       	std	Y+13, r20	; 0x0d
    1f82:	38 8b       	std	Y+16, r19	; 0x10
    1f84:	2f 87       	std	Y+15, r18	; 0x0f
    1f86:	1a 8b       	std	Y+18, r17	; 0x12
    1f88:	09 8b       	std	Y+17, r16	; 0x11
	//our frame: hello,509,hi,76
	
	u8 i=0,flag=0,j=0,k=0;
    1f8a:	18 86       	std	Y+8, r1	; 0x08
    1f8c:	1f 82       	std	Y+7, r1	; 0x07
    1f8e:	1e 82       	std	Y+6, r1	; 0x06
    1f90:	1d 82       	std	Y+5, r1	; 0x05
    1f92:	9d c0       	rjmp	.+314    	; 0x20ce <UART_u8Frame+0x170>
	u16 num1,num2;
	
	while(str[i]!='\0')
	{
		if(str[i]==',') flag++;
    1f94:	88 85       	ldd	r24, Y+8	; 0x08
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8c 32       	cpi	r24, 0x2C	; 44
    1fa8:	21 f4       	brne	.+8      	; 0x1fb2 <UART_u8Frame+0x54>
    1faa:	8f 81       	ldd	r24, Y+7	; 0x07
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	8f 83       	std	Y+7, r24	; 0x07
    1fb0:	8b c0       	rjmp	.+278    	; 0x20c8 <UART_u8Frame+0x16a>
		else
		{
			if(flag==0)
    1fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb4:	88 23       	and	r24, r24
    1fb6:	b1 f4       	brne	.+44     	; 0x1fe4 <UART_u8Frame+0x86>
			{
				s1[j]=str[i];
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	a2 0f       	add	r26, r18
    1fc6:	b3 1f       	adc	r27, r19
    1fc8:	88 85       	ldd	r24, Y+8	; 0x08
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	e2 0f       	add	r30, r18
    1fd6:	f3 1f       	adc	r31, r19
    1fd8:	80 81       	ld	r24, Z
    1fda:	8c 93       	st	X, r24
				j++; 
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	72 c0       	rjmp	.+228    	; 0x20c8 <UART_u8Frame+0x16a>
			}
			else if(flag==1)
    1fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	b1 f5       	brne	.+108    	; 0x2056 <UART_u8Frame+0xf8>
			{
				if(str[i] >='0' && str[i] <='9')
    1fea:	88 85       	ldd	r24, Y+8	; 0x08
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 33       	cpi	r24, 0x30	; 48
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <UART_u8Frame+0xa4>
    2000:	63 c0       	rjmp	.+198    	; 0x20c8 <UART_u8Frame+0x16a>
    2002:	88 85       	ldd	r24, Y+8	; 0x08
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	fc 01       	movw	r30, r24
    200e:	e2 0f       	add	r30, r18
    2010:	f3 1f       	adc	r31, r19
    2012:	80 81       	ld	r24, Z
    2014:	8a 33       	cpi	r24, 0x3A	; 58
    2016:	08 f0       	brcs	.+2      	; 0x201a <UART_u8Frame+0xbc>
    2018:	57 c0       	rjmp	.+174    	; 0x20c8 <UART_u8Frame+0x16a>
				{
					num1=num1*10+(str[i]-'0');
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	9c 01       	movw	r18, r24
    2020:	22 0f       	add	r18, r18
    2022:	33 1f       	adc	r19, r19
    2024:	c9 01       	movw	r24, r18
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	a9 01       	movw	r20, r18
    2030:	48 0f       	add	r20, r24
    2032:	59 1f       	adc	r21, r25
    2034:	88 85       	ldd	r24, Y+8	; 0x08
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	fc 01       	movw	r30, r24
    2040:	e2 0f       	add	r30, r18
    2042:	f3 1f       	adc	r31, r19
    2044:	80 81       	ld	r24, Z
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	84 0f       	add	r24, r20
    204c:	95 1f       	adc	r25, r21
    204e:	c0 97       	sbiw	r24, 0x30	; 48
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
    2054:	39 c0       	rjmp	.+114    	; 0x20c8 <UART_u8Frame+0x16a>
				}
			}
			else if(flag==2)
    2056:	8f 81       	ldd	r24, Y+7	; 0x07
    2058:	82 30       	cpi	r24, 0x02	; 2
    205a:	b1 f4       	brne	.+44     	; 0x2088 <UART_u8Frame+0x12a>
			{
				s2[k]=str[i];
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	8d 85       	ldd	r24, Y+13	; 0x0d
    2064:	9e 85       	ldd	r25, Y+14	; 0x0e
    2066:	dc 01       	movw	r26, r24
    2068:	a2 0f       	add	r26, r18
    206a:	b3 1f       	adc	r27, r19
    206c:	88 85       	ldd	r24, Y+8	; 0x08
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	89 85       	ldd	r24, Y+9	; 0x09
    2074:	9a 85       	ldd	r25, Y+10	; 0x0a
    2076:	fc 01       	movw	r30, r24
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	80 81       	ld	r24, Z
    207e:	8c 93       	st	X, r24
				k++; 
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	20 c0       	rjmp	.+64     	; 0x20c8 <UART_u8Frame+0x16a>
			}
			else if(flag==3) num2=num2*10+(str[i]-'0');
    2088:	8f 81       	ldd	r24, Y+7	; 0x07
    208a:	83 30       	cpi	r24, 0x03	; 3
    208c:	e9 f4       	brne	.+58     	; 0x20c8 <UART_u8Frame+0x16a>
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	9c 01       	movw	r18, r24
    2094:	22 0f       	add	r18, r18
    2096:	33 1f       	adc	r19, r19
    2098:	c9 01       	movw	r24, r18
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	a9 01       	movw	r20, r18
    20a4:	48 0f       	add	r20, r24
    20a6:	59 1f       	adc	r21, r25
    20a8:	88 85       	ldd	r24, Y+8	; 0x08
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	fc 01       	movw	r30, r24
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	80 81       	ld	r24, Z
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	84 0f       	add	r24, r20
    20c0:	95 1f       	adc	r25, r21
    20c2:	c0 97       	sbiw	r24, 0x30	; 48
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
		}
		i++;
    20c8:	88 85       	ldd	r24, Y+8	; 0x08
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	88 87       	std	Y+8, r24	; 0x08
	//our frame: hello,509,hi,76
	
	u8 i=0,flag=0,j=0,k=0;
	u16 num1,num2;
	
	while(str[i]!='\0')
    20ce:	88 85       	ldd	r24, Y+8	; 0x08
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	fc 01       	movw	r30, r24
    20da:	e2 0f       	add	r30, r18
    20dc:	f3 1f       	adc	r31, r19
    20de:	80 81       	ld	r24, Z
    20e0:	88 23       	and	r24, r24
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <UART_u8Frame+0x188>
    20e4:	57 cf       	rjmp	.-338    	; 0x1f94 <UART_u8Frame+0x36>
			}
			else if(flag==3) num2=num2*10+(str[i]-'0');
		}
		i++;
	}
	s1[j]='\0';
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    20f0:	fc 01       	movw	r30, r24
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	10 82       	st	Z, r1
	s2[k]='\0';
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	fc 01       	movw	r30, r24
    2104:	e2 0f       	add	r30, r18
    2106:	f3 1f       	adc	r31, r19
    2108:	10 82       	st	Z, r1
	*pnum1=num1;
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	ef 85       	ldd	r30, Y+15	; 0x0f
    210e:	f8 89       	ldd	r31, Y+16	; 0x10
    2110:	80 83       	st	Z, r24
	*pnum2=num2;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	e9 89       	ldd	r30, Y+17	; 0x11
    2116:	fa 89       	ldd	r31, Y+18	; 0x12
    2118:	80 83       	st	Z, r24
	if(flag!=3) return 0;
    211a:	8f 81       	ldd	r24, Y+7	; 0x07
    211c:	83 30       	cpi	r24, 0x03	; 3
    211e:	11 f0       	breq	.+4      	; 0x2124 <UART_u8Frame+0x1c6>
    2120:	1b 8a       	std	Y+19, r1	; 0x13
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <UART_u8Frame+0x1ca>
	return 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
}
    212a:	63 96       	adiw	r28, 0x13	; 19
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <RTOS_voidInit>:
#include "./RTOS_Private.h"

RTOS_TCB RTOS_AOfTasks[RTOS_MAX_NUMBER_OF_TASKS];

void RTOS_voidInit(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    // set callback function for timer0 ctc mode
    TIMER0_voidCTCSetCallBack(RTOS_voidScheduler);
    2148:	85 e2       	ldi	r24, 0x25	; 37
    214a:	91 e1       	ldi	r25, 0x11	; 17
    214c:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <TIMER0_voidCTCSetCallBack>
    TIMER0_voidInit(TIMER0_NORMAL_MODE, TIMER0_PRESCALER_8, TIMER0_COMPARE_OUTPUT_MODE_NORMAL);
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 1c 1c 	call	0x3838	; 0x3838 <TIMER0_voidInit>
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <RTOS_voidInitArrayFunctions>:

void RTOS_voidInitArrayFunctions()
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	0f 92       	push	r0
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    u8 local_u8Counter = 0;
    216a:	19 82       	std	Y+1, r1	; 0x01
    216c:	12 c0       	rjmp	.+36     	; 0x2192 <RTOS_voidInitArrayFunctions+0x32>
    for (; local_u8Counter < RTOS_MAX_NUMBER_OF_TASKS; local_u8Counter++)
    {
        RTOS_AOfTasks[local_u8Counter].pf = NULL;
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	c9 01       	movw	r24, r18
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	fc 01       	movw	r30, r24
    2184:	e7 53       	subi	r30, 0x37	; 55
    2186:	fe 4f       	sbci	r31, 0xFE	; 254
    2188:	11 82       	std	Z+1, r1	; 0x01
    218a:	10 82       	st	Z, r1
}

void RTOS_voidInitArrayFunctions()
{
    u8 local_u8Counter = 0;
    for (; local_u8Counter < RTOS_MAX_NUMBER_OF_TASKS; local_u8Counter++)
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	8f 5f       	subi	r24, 0xFF	; 255
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	83 30       	cpi	r24, 0x03	; 3
    2196:	58 f3       	brcs	.-42     	; 0x216e <RTOS_voidInitArrayFunctions+0xe>
    {
        RTOS_AOfTasks[local_u8Counter].pf = NULL;
    }
}
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <RTOS_voidCreateTask>:

void RTOS_voidCreateTask(u8 A_u8Priority, u16 A_u16Periodicty, u16 A_u16FirstDelay, void (*pf)(void))
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	27 97       	sbiw	r28, 0x07	; 7
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	89 83       	std	Y+1, r24	; 0x01
    21b6:	7b 83       	std	Y+3, r23	; 0x03
    21b8:	6a 83       	std	Y+2, r22	; 0x02
    21ba:	5d 83       	std	Y+5, r21	; 0x05
    21bc:	4c 83       	std	Y+4, r20	; 0x04
    21be:	3f 83       	std	Y+7, r19	; 0x07
    21c0:	2e 83       	std	Y+6, r18	; 0x06
    if (A_u8Priority < RTOS_MAX_NUMBER_OF_TASKS && pf != NULL)
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	83 30       	cpi	r24, 0x03	; 3
    21c6:	c0 f5       	brcc	.+112    	; 0x2238 <RTOS_voidCreateTask+0x98>
    21c8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ca:	9f 81       	ldd	r25, Y+7	; 0x07
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	a1 f1       	breq	.+104    	; 0x2238 <RTOS_voidCreateTask+0x98>
    {
        RTOS_AOfTasks[A_u8Priority].FirstDelay = A_u16FirstDelay;
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	c9 01       	movw	r24, r18
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	82 0f       	add	r24, r18
    21de:	93 1f       	adc	r25, r19
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	fc 01       	movw	r30, r24
    21e6:	eb 53       	subi	r30, 0x3B	; 59
    21e8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	9d 81       	ldd	r25, Y+5	; 0x05
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
        RTOS_AOfTasks[A_u8Priority].Periodicty = A_u16Periodicty;
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	c9 01       	movw	r24, r18
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	82 0f       	add	r24, r18
    2200:	93 1f       	adc	r25, r19
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	fc 01       	movw	r30, r24
    220a:	eb 53       	subi	r30, 0x3B	; 59
    220c:	fe 4f       	sbci	r31, 0xFE	; 254
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	9b 81       	ldd	r25, Y+3	; 0x03
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
        RTOS_AOfTasks[A_u8Priority].pf = pf;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	c9 01       	movw	r24, r18
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	fc 01       	movw	r30, r24
    222c:	e7 53       	subi	r30, 0x37	; 55
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	8e 81       	ldd	r24, Y+6	; 0x06
    2232:	9f 81       	ldd	r25, Y+7	; 0x07
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
    }
}
    2238:	27 96       	adiw	r28, 0x07	; 7
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <RTOS_voidScheduler>:

void RTOS_voidScheduler(void)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    u8 local_u8TaskCounter = 0;
    2254:	19 82       	std	Y+1, r1	; 0x01
    2256:	78 c0       	rjmp	.+240    	; 0x2348 <RTOS_voidScheduler+0xfe>
    for (; local_u8TaskCounter < RTOS_MAX_NUMBER_OF_TASKS; local_u8TaskCounter++)
    {
        if (RTOS_AOfTasks[local_u8TaskCounter].FirstDelay == 0)
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	c9 01       	movw	r24, r18
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	82 0f       	add	r24, r18
    2266:	93 1f       	adc	r25, r19
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	fc 01       	movw	r30, r24
    226e:	eb 53       	subi	r30, 0x3B	; 59
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	09 f0       	breq	.+2      	; 0x227c <RTOS_voidScheduler+0x32>
    227a:	45 c0       	rjmp	.+138    	; 0x2306 <RTOS_voidScheduler+0xbc>
        {
            if (RTOS_AOfTasks[local_u8TaskCounter].pf != NULL)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	c9 01       	movw	r24, r18
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	82 0f       	add	r24, r18
    228a:	93 1f       	adc	r25, r19
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	fc 01       	movw	r30, r24
    2292:	e7 53       	subi	r30, 0x37	; 55
    2294:	fe 4f       	sbci	r31, 0xFE	; 254
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	89 f0       	breq	.+34     	; 0x22c0 <RTOS_voidScheduler+0x76>
            {
                RTOS_AOfTasks[local_u8TaskCounter].pf();
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	c9 01       	movw	r24, r18
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	82 0f       	add	r24, r18
    22ac:	93 1f       	adc	r25, r19
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	fc 01       	movw	r30, r24
    22b4:	e7 53       	subi	r30, 0x37	; 55
    22b6:	fe 4f       	sbci	r31, 0xFE	; 254
    22b8:	01 90       	ld	r0, Z+
    22ba:	f0 81       	ld	r31, Z
    22bc:	e0 2d       	mov	r30, r0
    22be:	09 95       	icall
            }
            RTOS_AOfTasks[local_u8TaskCounter].FirstDelay = RTOS_AOfTasks[local_u8TaskCounter].Periodicty - 1;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	48 2f       	mov	r20, r24
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	c9 01       	movw	r24, r18
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	82 0f       	add	r24, r18
    22d4:	93 1f       	adc	r25, r19
    22d6:	01 96       	adiw	r24, 0x01	; 1
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	fc 01       	movw	r30, r24
    22de:	eb 53       	subi	r30, 0x3B	; 59
    22e0:	fe 4f       	sbci	r31, 0xFE	; 254
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	9c 01       	movw	r18, r24
    22e8:	21 50       	subi	r18, 0x01	; 1
    22ea:	30 40       	sbci	r19, 0x00	; 0
    22ec:	ca 01       	movw	r24, r20
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	84 0f       	add	r24, r20
    22f4:	95 1f       	adc	r25, r21
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	fc 01       	movw	r30, r24
    22fc:	eb 53       	subi	r30, 0x3B	; 59
    22fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2300:	31 83       	std	Z+1, r19	; 0x01
    2302:	20 83       	st	Z, r18
    2304:	1e c0       	rjmp	.+60     	; 0x2342 <RTOS_voidScheduler+0xf8>
        }
        else
        {
            RTOS_AOfTasks[local_u8TaskCounter].FirstDelay--;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	c9 01       	movw	r24, r18
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	82 0f       	add	r24, r18
    2314:	93 1f       	adc	r25, r19
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	fc 01       	movw	r30, r24
    231c:	eb 53       	subi	r30, 0x3B	; 59
    231e:	fe 4f       	sbci	r31, 0xFE	; 254
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	ac 01       	movw	r20, r24
    2326:	41 50       	subi	r20, 0x01	; 1
    2328:	50 40       	sbci	r21, 0x00	; 0
    232a:	c9 01       	movw	r24, r18
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	fc 01       	movw	r30, r24
    233a:	eb 53       	subi	r30, 0x3B	; 59
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	51 83       	std	Z+1, r21	; 0x01
    2340:	40 83       	st	Z, r20
}

void RTOS_voidScheduler(void)
{
    u8 local_u8TaskCounter = 0;
    for (; local_u8TaskCounter < RTOS_MAX_NUMBER_OF_TASKS; local_u8TaskCounter++)
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	08 f4       	brcc	.+2      	; 0x2350 <RTOS_voidScheduler+0x106>
    234e:	84 cf       	rjmp	.-248    	; 0x2258 <RTOS_voidScheduler+0xe>
        else
        {
            RTOS_AOfTasks[local_u8TaskCounter].FirstDelay--;
        }
    }
}
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <WDT_voidEnableWDT>:
#include "./WDT_Configurations.h"
#include "./WDT_Interface.h"
#include "./WDT_Private.h"

void WDT_voidEnableWDT(void)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    WDTCR &= ~(0b111 << WDP0);
    2360:	a1 e4       	ldi	r26, 0x41	; 65
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e1 e4       	ldi	r30, 0x41	; 65
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 7f       	andi	r24, 0xF8	; 248
    236c:	8c 93       	st	X, r24
    WDTCR |= (WDT_PRESCALER << WDP0);
    236e:	a1 e4       	ldi	r26, 0x41	; 65
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e1 e4       	ldi	r30, 0x41	; 65
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	87 60       	ori	r24, 0x07	; 7
    237a:	8c 93       	st	X, r24
    SET_BIT(WDTCR, WDE);
    237c:	a1 e4       	ldi	r26, 0x41	; 65
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e1 e4       	ldi	r30, 0x41	; 65
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 60       	ori	r24, 0x08	; 8
    2388:	8c 93       	st	X, r24
    CLR_BIT(WDTCR, WDTOE);
    238a:	a1 e4       	ldi	r26, 0x41	; 65
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e1 e4       	ldi	r30, 0x41	; 65
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8f 7e       	andi	r24, 0xEF	; 239
    2396:	8c 93       	st	X, r24
}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <WDT_voidDisableWDT>:

void WDT_voidDisableWDT(void)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(WDTCR, WDE);
    23a6:	a1 e4       	ldi	r26, 0x41	; 65
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e1 e4       	ldi	r30, 0x41	; 65
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	87 7f       	andi	r24, 0xF7	; 247
    23b2:	8c 93       	st	X, r24
    SET_BIT(WDTCR, WDTOE);
    23b4:	a1 e4       	ldi	r26, 0x41	; 65
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e1 e4       	ldi	r30, 0x41	; 65
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	80 61       	ori	r24, 0x10	; 16
    23c0:	8c 93       	st	X, r24
}
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <UART_voidInit>:
static void (*USART_RXC_CALL)(void) = NULLPTR;
static void (*USART_UDRE_CALL)(void) = NULLPTR;
static void (*USART_TXC_CALL)(void) = NULLPTR;

void UART_voidInit(void)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <UART_voidInit+0x6>
    23ce:	0f 92       	push	r0
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    u8 UCSRC_var = 0;
    23d4:	1b 82       	std	Y+3, r1	; 0x03
    u16 local_u16BaudRateValue = BAUD_RATE_EQN;
    23d6:	83 e3       	ldi	r24, 0x33	; 51
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    UBRRL = (u8)local_u16BaudRateValue;
    23de:	e9 e2       	ldi	r30, 0x29	; 41
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	80 83       	st	Z, r24

    /*
        note: shifting bits firstly then casting
        if you cast firt, the bits from 8 will be zeros
    */
    UBRRH = (u8)((local_u16BaudRateValue) >> 8);
    23e6:	e0 e4       	ldi	r30, 0x40	; 64
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	89 2f       	mov	r24, r25
    23f0:	99 27       	eor	r25, r25
    23f2:	80 83       	st	Z, r24

#if USART_SPPED == DOUBLE_SPEED
    SET_BIT(UCSRA, U2X);
#else
    CLR_BIT(UCSRA, U2X);
    23f4:	ab e2       	ldi	r26, 0x2B	; 43
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	eb e2       	ldi	r30, 0x2B	; 43
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8d 7f       	andi	r24, 0xFD	; 253
    2400:	8c 93       	st	X, r24
    /*
        Register Select
        this first bit must be configured, if you configure any bits before it
        it will not work correctly
    */
    SET_BIT(UCSRC_var, URSEL);
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	80 68       	ori	r24, 0x80	; 128
    2406:	8b 83       	std	Y+3, r24	; 0x03
#elif CHARACTER_SIZE == CHARACTER_SIZE_7BIT
    CLR_BIT(UCSRB, UCSZ2);
    SET_BIT(UCSRC_var, UCSZ1);
    CLR_BIT(UCSRC_var, UCSZ0);
#elif CHARACTER_SIZE == CHARACTER_SIZE_8BIT
    CLR_BIT(UCSRB, UCSZ2);
    2408:	aa e2       	ldi	r26, 0x2A	; 42
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	ea e2       	ldi	r30, 0x2A	; 42
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8b 7f       	andi	r24, 0xFB	; 251
    2414:	8c 93       	st	X, r24
    SET_BIT(UCSRC_var, UCSZ1);
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	84 60       	ori	r24, 0x04	; 4
    241a:	8b 83       	std	Y+3, r24	; 0x03
    SET_BIT(UCSRC_var, UCSZ0);
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	82 60       	ori	r24, 0x02	; 2
    2420:	8b 83       	std	Y+3, r24	; 0x03
    SET_BIT(UCSRB, UCSZ2);
    SET_BIT(UCSRC_var, UCSZ1);
    SET_BIT(UCSRC_var, UCSZ0);
#endif
    // Enabling Receiver
    SET_BIT(UCSRB, RXEN);
    2422:	aa e2       	ldi	r26, 0x2A	; 42
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ea e2       	ldi	r30, 0x2A	; 42
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	80 61       	ori	r24, 0x10	; 16
    242e:	8c 93       	st	X, r24
    // Enabling Transmitter
    SET_BIT(UCSRB, TXEN);
    2430:	aa e2       	ldi	r26, 0x2A	; 42
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ea e2       	ldi	r30, 0x2A	; 42
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	88 60       	ori	r24, 0x08	; 8
    243c:	8c 93       	st	X, r24

#if USART_MODE == SYNCH_OPERATION
    SET_BIT(UCSRC_var, UMSEL);
#else
    CLR_BIT(UCSRC_var, UMSEL);
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	8f 7b       	andi	r24, 0xBF	; 191
    2442:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if PARITY_MODE == PARITY_DISABLED
    UCSRC_var &= ~(0b11 << UPM0);
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	8f 7c       	andi	r24, 0xCF	; 207
    2448:	8b 83       	std	Y+3, r24	; 0x03
    UCSRC_var &= ~(0b11 << UPM0);
    UCSRC_var |= (PARITY_EN_ODD << UPM0);
#endif

#if STOP_BIT_SLECT == ONE_STOP_BIT
    CLR_BIT(UCSRC_var, USBS);
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	87 7f       	andi	r24, 0xF7	; 247
    244e:	8b 83       	std	Y+3, r24	; 0x03
#else
    SET(UCSRC_var, USBS);
#endif

#if CLK_POLARITY == RISING_THEN_FALLING_UART
    CLR_BIT(UCSRC_var, UCPOL);
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	8b 83       	std	Y+3, r24	; 0x03
#endif

    /*
        to set all bits once
    */
    UCSRC = UCSRC_var;
    2456:	e0 e4       	ldi	r30, 0x40	; 64
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	80 83       	st	Z, r24
}
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <UART_voidSendByteSynchNonBlocking>:

void UART_voidSendByteSynchNonBlocking(u8 A_u8Byte)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <UART_voidSendByteSynchNonBlocking+0x6>
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32TimeOut = 0;
    2478:	1a 82       	std	Y+2, r1	; 0x02
    247a:	19 82       	std	Y+1, r1	; 0x01
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <UART_voidSendByteSynchNonBlocking+0x1e>
    while (GET_BIT(UCSRA, UDRE) == 0)
    {
        local_u32TimeOut++;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
}

void UART_voidSendByteSynchNonBlocking(u8 A_u8Byte)
{
    u32 local_u32TimeOut = 0;
    while (GET_BIT(UCSRA, UDRE) == 0)
    2488:	eb e2       	ldi	r30, 0x2B	; 43
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9c 01       	movw	r18, r24
    2494:	2f 7d       	andi	r18, 0xDF	; 223
    2496:	eb e2       	ldi	r30, 0x2B	; 43
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	28 17       	cp	r18, r24
    24a2:	39 07       	cpc	r19, r25
    24a4:	61 f3       	breq	.-40     	; 0x247e <UART_voidSendByteSynchNonBlocking+0x14>
            break;
    }

    if (local_u32TimeOut != TIME_OUT)
    {
        local_u32TimeOut = 0;
    24a6:	1a 82       	std	Y+2, r1	; 0x02
    24a8:	19 82       	std	Y+1, r1	; 0x01
        UDR = A_u8Byte;
    24aa:	ec e2       	ldi	r30, 0x2C	; 44
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	80 83       	st	Z, r24
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <UART_voidSendByteSynchNonBlocking+0x54>
        while (GET_BIT(UCSRA, UDRE) == 0)
        {
            local_u32TimeOut++;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01

    if (local_u32TimeOut != TIME_OUT)
    {
        local_u32TimeOut = 0;
        UDR = A_u8Byte;
        while (GET_BIT(UCSRA, UDRE) == 0)
    24be:	eb e2       	ldi	r30, 0x2B	; 43
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 01       	movw	r18, r24
    24ca:	2f 7d       	andi	r18, 0xDF	; 223
    24cc:	eb e2       	ldi	r30, 0x2B	; 43
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	28 17       	cp	r18, r24
    24d8:	39 07       	cpc	r19, r25
    24da:	61 f3       	breq	.-40     	; 0x24b4 <UART_voidSendByteSynchNonBlocking+0x4a>
        }
    }

    // set the flag by one to be cleared
    // you can skip this step cause it's already cleared automatically
    SET_BIT(UCSRA, TXC);
    24dc:	ab e2       	ldi	r26, 0x2B	; 43
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	eb e2       	ldi	r30, 0x2B	; 43
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 64       	ori	r24, 0x40	; 64
    24e8:	8c 93       	st	X, r24
}
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <UART_voidSendByteSynchBlocking>:

void UART_voidSendByteSynchBlocking(u8 A_u8Byte)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	89 83       	std	Y+1, r24	; 0x01
    while (GET_BIT(UCSRA, UDRE) == 0)
    2502:	eb e2       	ldi	r30, 0x2B	; 43
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9c 01       	movw	r18, r24
    250e:	2f 7d       	andi	r18, 0xDF	; 223
    2510:	eb e2       	ldi	r30, 0x2B	; 43
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	28 17       	cp	r18, r24
    251c:	39 07       	cpc	r19, r25
    251e:	89 f3       	breq	.-30     	; 0x2502 <UART_voidSendByteSynchBlocking+0xc>
        ;
    UDR = A_u8Byte;
    2520:	ec e2       	ldi	r30, 0x2C	; 44
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	80 83       	st	Z, r24
}
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <UART_voidSendByteAsynch>:

void UART_voidSendByteAsynch(u8 A_u8Byte)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	89 83       	std	Y+1, r24	; 0x01
    UDR = A_u8Byte;
    253c:	ec e2       	ldi	r30, 0x2C	; 44
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	80 83       	st	Z, r24
}
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <UART_u8ReadByteSynchBlocking>:

u8 UART_u8ReadByteSynchBlocking(void)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA, RXC) == 0)
    2554:	eb e2       	ldi	r30, 0x2B	; 43
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9c 01       	movw	r18, r24
    2560:	2f 77       	andi	r18, 0x7F	; 127
    2562:	eb e2       	ldi	r30, 0x2B	; 43
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	28 17       	cp	r18, r24
    256e:	39 07       	cpc	r19, r25
    2570:	89 f3       	breq	.-30     	; 0x2554 <UART_u8ReadByteSynchBlocking+0x8>
        ;
    return UDR;
    2572:	ec e2       	ldi	r30, 0x2C	; 44
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
}
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <UART_u8ReadByteSynchNonBlocking>:
u8 UART_u8ReadByteSynchNonBlocking(void)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <UART_u8ReadByteSynchNonBlocking+0x6>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    u32 local_u32TimeOut = 0;
    2588:	1a 82       	std	Y+2, r1	; 0x02
    258a:	19 82       	std	Y+1, r1	; 0x01
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <UART_u8ReadByteSynchNonBlocking+0x1a>
    while (GET_BIT(UCSRA, RXC) == 0)
    {
        local_u32TimeOut++;
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    return UDR;
}
u8 UART_u8ReadByteSynchNonBlocking(void)
{
    u32 local_u32TimeOut = 0;
    while (GET_BIT(UCSRA, RXC) == 0)
    2598:	eb e2       	ldi	r30, 0x2B	; 43
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9c 01       	movw	r18, r24
    25a4:	2f 77       	andi	r18, 0x7F	; 127
    25a6:	eb e2       	ldi	r30, 0x2B	; 43
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	88 2f       	mov	r24, r24
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	28 17       	cp	r18, r24
    25b2:	39 07       	cpc	r19, r25
    25b4:	61 f3       	breq	.-40     	; 0x258e <UART_u8ReadByteSynchNonBlocking+0x10>
        local_u32TimeOut++;
        if (local_u32TimeOut == TIME_OUT)
            break;
    }
    if (local_u32TimeOut != TIME_OUT)
        return UDR;
    25b6:	ec e2       	ldi	r30, 0x2C	; 44
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    return DUMMY_DATA;
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <UART_u8ReadByteAsynch>:

u8 UART_u8ReadByteAsynch(void)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    return UDR;
    25ce:	ec e2       	ldi	r30, 0x2C	; 44
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
}
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <UART_voidRXCompleteInterruptEnable>:

/*****************************************************************************/
/* Interrupt Section */
void UART_voidRXCompleteInterruptEnable(void)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB, RXCIE);
    25e2:	aa e2       	ldi	r26, 0x2A	; 42
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	ea e2       	ldi	r30, 0x2A	; 42
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	80 68       	ori	r24, 0x80	; 128
    25ee:	8c 93       	st	X, r24
}
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <UART_voidRXCompleteInterruptDisable>:

void UART_voidRXCompleteInterruptDisable(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB, RXCIE);
    25fe:	aa e2       	ldi	r26, 0x2A	; 42
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ea e2       	ldi	r30, 0x2A	; 42
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8f 77       	andi	r24, 0x7F	; 127
    260a:	8c 93       	st	X, r24
}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <UART_voidTXCompleteInterruptEnable>:

void UART_voidTXCompleteInterruptEnable(void)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB, TXCIE);
    261a:	aa e2       	ldi	r26, 0x2A	; 42
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ea e2       	ldi	r30, 0x2A	; 42
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	80 64       	ori	r24, 0x40	; 64
    2626:	8c 93       	st	X, r24
}
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <UART_voidTXCompleteInterruptDisable>:

void UART_voidTXCompleteInterruptDisable(void)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB, TXCIE);
    2636:	aa e2       	ldi	r26, 0x2A	; 42
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ea e2       	ldi	r30, 0x2A	; 42
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	8f 7b       	andi	r24, 0xBF	; 191
    2642:	8c 93       	st	X, r24
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <UART_voidUDRInterruptEnable>:

void UART_voidUDRInterruptEnable(void)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB, UDRIE);
    2652:	aa e2       	ldi	r26, 0x2A	; 42
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ea e2       	ldi	r30, 0x2A	; 42
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	80 62       	ori	r24, 0x20	; 32
    265e:	8c 93       	st	X, r24
}
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <UART_voidUDRInterruptDisable>:

void UART_voidUDRInterruptDisable(void)
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB, UDRIE);
    266e:	aa e2       	ldi	r26, 0x2A	; 42
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ea e2       	ldi	r30, 0x2A	; 42
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	8f 7d       	andi	r24, 0xDF	; 223
    267a:	8c 93       	st	X, r24
}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <UART_voidSetCallRXC>:
/*****************************************************************************/

/*****************************************************************************/
/* Callback Section */
void UART_voidSetCallRXC(void (*pf)(void))
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <UART_voidSetCallRXC+0x6>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
    USART_RXC_CALL = pf;
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	90 93 9e 01 	sts	0x019E, r25
    2698:	80 93 9d 01 	sts	0x019D, r24
}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <UART_voidSetCallUDRE>:

void UART_voidSetCallUDRE(void (*pf)(void))
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <UART_voidSetCallUDRE+0x6>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    USART_UDRE_CALL = pf;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	90 93 a0 01 	sts	0x01A0, r25
    26bc:	80 93 9f 01 	sts	0x019F, r24
}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <UART_voidSetCallTXC>:

void UART_voidSetCallTXC(void (*pf)(void))
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <UART_voidSetCallTXC+0x6>
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
    USART_TXC_CALL = pf;
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	9a 81       	ldd	r25, Y+2	; 0x02
    26dc:	90 93 a2 01 	sts	0x01A2, r25
    26e0:	80 93 a1 01 	sts	0x01A1, r24
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <__vector_13>:
/*****************************************************************************/

ISR(USART_RXC_VECT)
{
    26ee:	1f 92       	push	r1
    26f0:	0f 92       	push	r0
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	0f 92       	push	r0
    26f6:	11 24       	eor	r1, r1
    26f8:	2f 93       	push	r18
    26fa:	3f 93       	push	r19
    26fc:	4f 93       	push	r20
    26fe:	5f 93       	push	r21
    2700:	6f 93       	push	r22
    2702:	7f 93       	push	r23
    2704:	8f 93       	push	r24
    2706:	9f 93       	push	r25
    2708:	af 93       	push	r26
    270a:	bf 93       	push	r27
    270c:	ef 93       	push	r30
    270e:	ff 93       	push	r31
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    if (USART_RXC_CALL != NULLPTR)
    2718:	80 91 9d 01 	lds	r24, 0x019D
    271c:	90 91 9e 01 	lds	r25, 0x019E
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	29 f0       	breq	.+10     	; 0x272e <__vector_13+0x40>
        USART_RXC_CALL();
    2724:	e0 91 9d 01 	lds	r30, 0x019D
    2728:	f0 91 9e 01 	lds	r31, 0x019E
    272c:	09 95       	icall
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	bf 91       	pop	r27
    2738:	af 91       	pop	r26
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	7f 91       	pop	r23
    2740:	6f 91       	pop	r22
    2742:	5f 91       	pop	r21
    2744:	4f 91       	pop	r20
    2746:	3f 91       	pop	r19
    2748:	2f 91       	pop	r18
    274a:	0f 90       	pop	r0
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	0f 90       	pop	r0
    2750:	1f 90       	pop	r1
    2752:	18 95       	reti

00002754 <__vector_14>:

ISR(USART_UDRE_VECT)
{
    2754:	1f 92       	push	r1
    2756:	0f 92       	push	r0
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	0f 92       	push	r0
    275c:	11 24       	eor	r1, r1
    275e:	2f 93       	push	r18
    2760:	3f 93       	push	r19
    2762:	4f 93       	push	r20
    2764:	5f 93       	push	r21
    2766:	6f 93       	push	r22
    2768:	7f 93       	push	r23
    276a:	8f 93       	push	r24
    276c:	9f 93       	push	r25
    276e:	af 93       	push	r26
    2770:	bf 93       	push	r27
    2772:	ef 93       	push	r30
    2774:	ff 93       	push	r31
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    if (USART_UDRE_CALL != NULLPTR)
    277e:	80 91 9f 01 	lds	r24, 0x019F
    2782:	90 91 a0 01 	lds	r25, 0x01A0
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	29 f0       	breq	.+10     	; 0x2794 <__vector_14+0x40>
        USART_UDRE_CALL();
    278a:	e0 91 9f 01 	lds	r30, 0x019F
    278e:	f0 91 a0 01 	lds	r31, 0x01A0
    2792:	09 95       	icall
}
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	bf 91       	pop	r27
    279e:	af 91       	pop	r26
    27a0:	9f 91       	pop	r25
    27a2:	8f 91       	pop	r24
    27a4:	7f 91       	pop	r23
    27a6:	6f 91       	pop	r22
    27a8:	5f 91       	pop	r21
    27aa:	4f 91       	pop	r20
    27ac:	3f 91       	pop	r19
    27ae:	2f 91       	pop	r18
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti

000027ba <__vector_15>:

ISR(USART_TXC_VECT)
{
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	2f 93       	push	r18
    27c6:	3f 93       	push	r19
    27c8:	4f 93       	push	r20
    27ca:	5f 93       	push	r21
    27cc:	6f 93       	push	r22
    27ce:	7f 93       	push	r23
    27d0:	8f 93       	push	r24
    27d2:	9f 93       	push	r25
    27d4:	af 93       	push	r26
    27d6:	bf 93       	push	r27
    27d8:	ef 93       	push	r30
    27da:	ff 93       	push	r31
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    if (USART_TXC_CALL != NULLPTR)
    27e4:	80 91 a1 01 	lds	r24, 0x01A1
    27e8:	90 91 a2 01 	lds	r25, 0x01A2
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	29 f0       	breq	.+10     	; 0x27fa <__vector_15+0x40>
        USART_TXC_CALL();
    27f0:	e0 91 a1 01 	lds	r30, 0x01A1
    27f4:	f0 91 a2 01 	lds	r31, 0x01A2
    27f8:	09 95       	icall
}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	ff 91       	pop	r31
    2800:	ef 91       	pop	r30
    2802:	bf 91       	pop	r27
    2804:	af 91       	pop	r26
    2806:	9f 91       	pop	r25
    2808:	8f 91       	pop	r24
    280a:	7f 91       	pop	r23
    280c:	6f 91       	pop	r22
    280e:	5f 91       	pop	r21
    2810:	4f 91       	pop	r20
    2812:	3f 91       	pop	r19
    2814:	2f 91       	pop	r18
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	0f 90       	pop	r0
    281c:	1f 90       	pop	r1
    281e:	18 95       	reti

00002820 <TWI_voidInit>:
SCL_FREQ= ----------------------- = ------
            16+2*(TWBR)* 4^(TWPS)   16+2*12*4
*/

void TWI_voidInit(u8 A_u8Slave)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	89 83       	std	Y+1, r24	; 0x01
    // enable TWI
    // the follwoing two line of code is to set frequency
    SET_BIT(TWCR, TWEA);
    282c:	a6 e5       	ldi	r26, 0x56	; 86
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e6 e5       	ldi	r30, 0x56	; 86
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	80 64       	ori	r24, 0x40	; 64
    2838:	8c 93       	st	X, r24
    TWBR = 2;
    283a:	e0 e2       	ldi	r30, 0x20	; 32
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	80 83       	st	Z, r24
    TWSR = 0x00;
    2842:	e1 e2       	ldi	r30, 0x21	; 33
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	10 82       	st	Z, r1
    // put slave address
    TWAR = A_u8Slave << 1;
    2848:	e2 e2       	ldi	r30, 0x22	; 34
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	88 0f       	add	r24, r24
    2850:	80 83       	st	Z, r24
    SET_BIT(TWCR, TWEN);
    2852:	a6 e5       	ldi	r26, 0x56	; 86
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e6 e5       	ldi	r30, 0x56	; 86
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	84 60       	ori	r24, 0x04	; 4
    285e:	8c 93       	st	X, r24
}
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <TWI_u8Start>:

TWI_STATUS TWI_u8Start(void)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	0f 92       	push	r0
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    // 01- Send Start Condition & Clearing Flag & Enabling TWI
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2872:	e6 e5       	ldi	r30, 0x56	; 86
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	84 ea       	ldi	r24, 0xA4	; 164
    2878:	80 83       	st	Z, r24
    // Polling untill Start Condition to be snet
    while (GET_BIT(TWCR, TWINT) != 1)
    287a:	e6 e5       	ldi	r30, 0x56	; 86
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9c 01       	movw	r18, r24
    2886:	2f 77       	andi	r18, 0x7F	; 127
    2888:	e6 e5       	ldi	r30, 0x56	; 86
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	28 17       	cp	r18, r24
    2894:	39 07       	cpc	r19, r25
    2896:	89 f3       	breq	.-30     	; 0x287a <TWI_u8Start+0x12>
        ;
    if ((TWSR & 0xF8) != START_TWI)
    2898:	e1 e2       	ldi	r30, 0x21	; 33
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	88 7f       	andi	r24, 0xF8	; 248
    28a4:	90 70       	andi	r25, 0x00	; 0
    28a6:	88 30       	cpi	r24, 0x08	; 8
    28a8:	91 05       	cpc	r25, r1
    28aa:	19 f0       	breq	.+6      	; 0x28b2 <TWI_u8Start+0x4a>
        return START_TWI_ERORR;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <TWI_u8Start+0x4c>
    return TWI_OK;
    28b2:	19 82       	std	Y+1, r1	; 0x01
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <TWI_u8SendSlaveAddWrite>:

TWI_STATUS TWI_u8SendSlaveAddWrite(u8 A_u8SlaveAdd)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <TWI_u8SendSlaveAddWrite+0x6>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	89 83       	std	Y+1, r24	; 0x01

    // 02- sending slave address + writed Operation
    TWDR = A_u8SlaveAdd << 1;
    28ca:	e3 e2       	ldi	r30, 0x23	; 35
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	88 0f       	add	r24, r24
    28d2:	80 83       	st	Z, r24
    // Clearing flag & Enabling TWI
    TWCR = (1 << TWINT) | (1 << TWEN);
    28d4:	e6 e5       	ldi	r30, 0x56	; 86
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	84 e8       	ldi	r24, 0x84	; 132
    28da:	80 83       	st	Z, r24
    while (GET_BIT(TWCR, TWINT) != 1)
    28dc:	e6 e5       	ldi	r30, 0x56	; 86
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9c 01       	movw	r18, r24
    28e8:	2f 77       	andi	r18, 0x7F	; 127
    28ea:	e6 e5       	ldi	r30, 0x56	; 86
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	28 17       	cp	r18, r24
    28f6:	39 07       	cpc	r19, r25
    28f8:	89 f3       	breq	.-30     	; 0x28dc <TWI_u8SendSlaveAddWrite+0x1e>
        ;
    if ((TWSR & 0xF8) != MT_SLA_ACK)
    28fa:	e1 e2       	ldi	r30, 0x21	; 33
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	88 7f       	andi	r24, 0xF8	; 248
    2906:	90 70       	andi	r25, 0x00	; 0
    2908:	88 31       	cpi	r24, 0x18	; 24
    290a:	91 05       	cpc	r25, r1
    290c:	19 f0       	breq	.+6      	; 0x2914 <TWI_u8SendSlaveAddWrite+0x56>
        return TWI_SLA_ACK_ERORR;
    290e:	82 e0       	ldi	r24, 0x02	; 2
    2910:	8a 83       	std	Y+2, r24	; 0x02
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <TWI_u8SendSlaveAddWrite+0x58>
    return TWI_OK;
    2914:	1a 82       	std	Y+2, r1	; 0x02
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <TWI_u8SendData>:

TWI_STATUS TWI_u8SendData(u8 A_u8Data)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <TWI_u8SendData+0x6>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	89 83       	std	Y+1, r24	; 0x01
    // 03- Sending Data
    TWDR = A_u8Data;
    292e:	e3 e2       	ldi	r30, 0x23	; 35
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	80 83       	st	Z, r24
    // Clearing flag & Enabling TWI
    TWCR = (1 << TWINT) | (1 << TWEN);
    2936:	e6 e5       	ldi	r30, 0x56	; 86
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	84 e8       	ldi	r24, 0x84	; 132
    293c:	80 83       	st	Z, r24
    while (GET_BIT(TWCR, TWINT) != 1)
    293e:	e6 e5       	ldi	r30, 0x56	; 86
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9c 01       	movw	r18, r24
    294a:	2f 77       	andi	r18, 0x7F	; 127
    294c:	e6 e5       	ldi	r30, 0x56	; 86
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	28 17       	cp	r18, r24
    2958:	39 07       	cpc	r19, r25
    295a:	89 f3       	breq	.-30     	; 0x293e <TWI_u8SendData+0x1c>
        ;
    if ((TWSR & 0xF8) != MT_DATA_ACK)
    295c:	e1 e2       	ldi	r30, 0x21	; 33
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	88 7f       	andi	r24, 0xF8	; 248
    2968:	90 70       	andi	r25, 0x00	; 0
    296a:	88 32       	cpi	r24, 0x28	; 40
    296c:	91 05       	cpc	r25, r1
    296e:	19 f0       	breq	.+6      	; 0x2976 <TWI_u8SendData+0x54>
        return TWI_DATA_TRANS_ACK_ERORR;
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	8a 83       	std	Y+2, r24	; 0x02
    2974:	01 c0       	rjmp	.+2      	; 0x2978 <TWI_u8SendData+0x56>
    return TWI_OK;
    2976:	1a 82       	std	Y+2, r1	; 0x02
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <TWI_u8SendReStart>:

TWI_STATUS TWI_u8SendReStart(void)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    // 04- Repeated Start
    // Clearing Flag & Enabling TWI & Setting Start Bit
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    298e:	e6 e5       	ldi	r30, 0x56	; 86
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	84 ea       	ldi	r24, 0xA4	; 164
    2994:	80 83       	st	Z, r24
    // Polling untill flag become one
    while (GET_BIT(TWCR, TWINT) != 1)
    2996:	e6 e5       	ldi	r30, 0x56	; 86
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	9c 01       	movw	r18, r24
    29a2:	2f 77       	andi	r18, 0x7F	; 127
    29a4:	e6 e5       	ldi	r30, 0x56	; 86
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	88 2f       	mov	r24, r24
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	28 17       	cp	r18, r24
    29b0:	39 07       	cpc	r19, r25
    29b2:	89 f3       	breq	.-30     	; 0x2996 <TWI_u8SendReStart+0x12>
        ;
    if ((TWSR & 0xF8) != RE_START_ACK)
    29b4:	e1 e2       	ldi	r30, 0x21	; 33
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	88 2f       	mov	r24, r24
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	88 7f       	andi	r24, 0xF8	; 248
    29c0:	90 70       	andi	r25, 0x00	; 0
    29c2:	80 31       	cpi	r24, 0x10	; 16
    29c4:	91 05       	cpc	r25, r1
    29c6:	19 f0       	breq	.+6      	; 0x29ce <TWI_u8SendReStart+0x4a>
        return RE_START_ACK_ERORR;
    29c8:	85 e0       	ldi	r24, 0x05	; 5
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <TWI_u8SendReStart+0x4c>
    return TWI_OK;
    29ce:	19 82       	std	Y+1, r1	; 0x01
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <TWI_u8SendSlaveAddRead>:

TWI_STATUS TWI_u8SendSlaveAddRead(u8 A_u8SlaveAdd)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <TWI_u8SendSlaveAddRead+0x6>
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	89 83       	std	Y+1, r24	; 0x01
    // 05- Send Slave address + Read
    TWDR = (A_u8SlaveAdd << 1) | (1 << 0);
    29e6:	e3 e2       	ldi	r30, 0x23	; 35
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	81 60       	ori	r24, 0x01	; 1
    29f6:	80 83       	st	Z, r24
    // clearing flag & Enabling TWI
    TWCR = (1 << TWINT) | (1 << TWEN);
    29f8:	e6 e5       	ldi	r30, 0x56	; 86
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	84 e8       	ldi	r24, 0x84	; 132
    29fe:	80 83       	st	Z, r24
    // Polling untill flag become one
    while (GET_BIT(TWCR, TWINT) != 1)
    2a00:	e6 e5       	ldi	r30, 0x56	; 86
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	88 2f       	mov	r24, r24
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9c 01       	movw	r18, r24
    2a0c:	2f 77       	andi	r18, 0x7F	; 127
    2a0e:	e6 e5       	ldi	r30, 0x56	; 86
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	28 17       	cp	r18, r24
    2a1a:	39 07       	cpc	r19, r25
    2a1c:	89 f3       	breq	.-30     	; 0x2a00 <TWI_u8SendSlaveAddRead+0x26>
        ;
    if ((TWSR & 0xF8) != MR_SLA_ACK)
    2a1e:	e1 e2       	ldi	r30, 0x21	; 33
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	88 7f       	andi	r24, 0xF8	; 248
    2a2a:	90 70       	andi	r25, 0x00	; 0
    2a2c:	80 34       	cpi	r24, 0x40	; 64
    2a2e:	91 05       	cpc	r25, r1
    2a30:	19 f0       	breq	.+6      	; 0x2a38 <TWI_u8SendSlaveAddRead+0x5e>
        return MR_SLA_ACK_ERROR;
    2a32:	86 e0       	ldi	r24, 0x06	; 6
    2a34:	8a 83       	std	Y+2, r24	; 0x02
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <TWI_u8SendSlaveAddRead+0x60>
    return TWI_OK;
    2a38:	1a 82       	std	Y+2, r1	; 0x02
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <TWI_u8ReadData>:

void TWI_u8ReadData(u8 ack, u8 *A_u8data)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <TWI_u8ReadData+0x6>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	7b 83       	std	Y+3, r23	; 0x03
    2a56:	6a 83       	std	Y+2, r22	; 0x02
    /*
        Clear Flag & enabling TWI
        we can set acknolwedge to receive more data
        or clear it to stop the transfer of data
    */
    TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA);
    2a58:	e6 e5       	ldi	r30, 0x56	; 86
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	00 24       	eor	r0, r0
    2a64:	96 95       	lsr	r25
    2a66:	87 95       	ror	r24
    2a68:	07 94       	ror	r0
    2a6a:	96 95       	lsr	r25
    2a6c:	87 95       	ror	r24
    2a6e:	07 94       	ror	r0
    2a70:	98 2f       	mov	r25, r24
    2a72:	80 2d       	mov	r24, r0
    2a74:	84 68       	ori	r24, 0x84	; 132
    2a76:	80 83       	st	Z, r24
    while (GET_BIT(TWCR, TWINT) != 1)
    2a78:	e6 e5       	ldi	r30, 0x56	; 86
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9c 01       	movw	r18, r24
    2a84:	2f 77       	andi	r18, 0x7F	; 127
    2a86:	e6 e5       	ldi	r30, 0x56	; 86
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 2f       	mov	r24, r24
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	28 17       	cp	r18, r24
    2a92:	39 07       	cpc	r19, r25
    2a94:	89 f3       	breq	.-30     	; 0x2a78 <TWI_u8ReadData+0x32>
        ;
    *A_u8data = TWDR;
    2a96:	e3 e2       	ldi	r30, 0x23	; 35
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa0:	80 83       	st	Z, r24
}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <TWI_voidStop>:

void TWI_voidStop(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    // 07- Transmit Stop bit & Clearing Flag & Enabling TWI
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    2ab6:	e6 e5       	ldi	r30, 0x56	; 86
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	84 e9       	ldi	r24, 0x94	; 148
    2abc:	80 83       	st	Z, r24
}
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <TWI_voidSetCallBack>:

/******************************interrupt section ****************************/
void TWI_voidSetCallBack(void (*pf)(void))
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <TWI_voidSetCallBack+0x6>
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    TWI_INT_FUNC = pf;
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	90 93 a4 01 	sts	0x01A4, r25
    2ada:	80 93 a3 01 	sts	0x01A3, r24
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <TWI_voidSetInterruptEnable>:
void TWI_voidSetInterruptEnable()
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TWCR, TWIE);
    2af0:	a6 e5       	ldi	r26, 0x56	; 86
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e6 e5       	ldi	r30, 0x56	; 86
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	81 60       	ori	r24, 0x01	; 1
    2afc:	8c 93       	st	X, r24
}
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <TWI_voidSetIntDisable>:
void TWI_voidSetIntDisable()
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TWCR, TWIE);
    2b0c:	a6 e5       	ldi	r26, 0x56	; 86
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e6 e5       	ldi	r30, 0x56	; 86
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	8e 7f       	andi	r24, 0xFE	; 254
    2b18:	8c 93       	st	X, r24
}
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <__vector_19>:

ISR(TWI_VECT)
{
    2b20:	1f 92       	push	r1
    2b22:	0f 92       	push	r0
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	0f 92       	push	r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	2f 93       	push	r18
    2b2c:	3f 93       	push	r19
    2b2e:	4f 93       	push	r20
    2b30:	5f 93       	push	r21
    2b32:	6f 93       	push	r22
    2b34:	7f 93       	push	r23
    2b36:	8f 93       	push	r24
    2b38:	9f 93       	push	r25
    2b3a:	af 93       	push	r26
    2b3c:	bf 93       	push	r27
    2b3e:	ef 93       	push	r30
    2b40:	ff 93       	push	r31
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    if (TWI_INT_FUNC != NULLPTR)
    2b4a:	80 91 a3 01 	lds	r24, 0x01A3
    2b4e:	90 91 a4 01 	lds	r25, 0x01A4
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	29 f0       	breq	.+10     	; 0x2b60 <__vector_19+0x40>
        TWI_INT_FUNC();
    2b56:	e0 91 a3 01 	lds	r30, 0x01A3
    2b5a:	f0 91 a4 01 	lds	r31, 0x01A4
    2b5e:	09 95       	icall
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	ff 91       	pop	r31
    2b66:	ef 91       	pop	r30
    2b68:	bf 91       	pop	r27
    2b6a:	af 91       	pop	r26
    2b6c:	9f 91       	pop	r25
    2b6e:	8f 91       	pop	r24
    2b70:	7f 91       	pop	r23
    2b72:	6f 91       	pop	r22
    2b74:	5f 91       	pop	r21
    2b76:	4f 91       	pop	r20
    2b78:	3f 91       	pop	r19
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <TIMER2_voidInit>:

static void (*TIMER2_OVF_CALL)(void) = NULLPTR;
static void (*TIMER2_CTC_CALL)(void) = NULLPTR;

void TIMER2_voidInit(TIMER2_Mode mode, TIMER2_Compare Compare, TIMER2_Prescaler Prescaler)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <TIMER2_voidInit+0x6>
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <TIMER2_voidInit+0x8>
    2b8e:	0f 92       	push	r0
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	6a 83       	std	Y+2, r22	; 0x02
    2b98:	4b 83       	std	Y+3, r20	; 0x03
    switch (mode)
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	3d 83       	std	Y+5, r19	; 0x05
    2ba2:	2c 83       	std	Y+4, r18	; 0x04
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba8:	81 30       	cpi	r24, 0x01	; 1
    2baa:	91 05       	cpc	r25, r1
    2bac:	21 f1       	breq	.+72     	; 0x2bf6 <TIMER2_voidInit+0x70>
    2bae:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	2c f4       	brge	.+10     	; 0x2bc2 <TIMER2_voidInit+0x3c>
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	61 f0       	breq	.+24     	; 0x2bd8 <TIMER2_voidInit+0x52>
    2bc0:	46 c0       	rjmp	.+140    	; 0x2c4e <TIMER2_voidInit+0xc8>
    2bc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc6:	22 30       	cpi	r18, 0x02	; 2
    2bc8:	31 05       	cpc	r19, r1
    2bca:	21 f1       	breq	.+72     	; 0x2c14 <TIMER2_voidInit+0x8e>
    2bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bce:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd0:	83 30       	cpi	r24, 0x03	; 3
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	71 f1       	breq	.+92     	; 0x2c32 <TIMER2_voidInit+0xac>
    2bd6:	3b c0       	rjmp	.+118    	; 0x2c4e <TIMER2_voidInit+0xc8>
    {
    case TIMER2_NORMAL_MODE:
        CLR_BIT(TCCR2, WGM20);
    2bd8:	a5 e4       	ldi	r26, 0x45	; 69
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e5 e4       	ldi	r30, 0x45	; 69
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	8f 7b       	andi	r24, 0xBF	; 191
    2be4:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, WGM21);
    2be6:	a5 e4       	ldi	r26, 0x45	; 69
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e5 e4       	ldi	r30, 0x45	; 69
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	87 7f       	andi	r24, 0xF7	; 247
    2bf2:	8c 93       	st	X, r24
    2bf4:	2c c0       	rjmp	.+88     	; 0x2c4e <TIMER2_voidInit+0xc8>
        break;

    case TIMER2_PHASE_CORRECT_MODE:
        SET_BIT(TCCR2, WGM20);
    2bf6:	a5 e4       	ldi	r26, 0x45	; 69
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e5 e4       	ldi	r30, 0x45	; 69
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	80 64       	ori	r24, 0x40	; 64
    2c02:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, WGM21);
    2c04:	a5 e4       	ldi	r26, 0x45	; 69
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e5 e4       	ldi	r30, 0x45	; 69
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	87 7f       	andi	r24, 0xF7	; 247
    2c10:	8c 93       	st	X, r24
    2c12:	1d c0       	rjmp	.+58     	; 0x2c4e <TIMER2_voidInit+0xc8>
        break;

    case TIMER2_CTC_MODE:
        CLR_BIT(TCCR2, WGM20);
    2c14:	a5 e4       	ldi	r26, 0x45	; 69
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e4       	ldi	r30, 0x45	; 69
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8f 7b       	andi	r24, 0xBF	; 191
    2c20:	8c 93       	st	X, r24
        SET_BIT(TCCR2, WGM21);
    2c22:	a5 e4       	ldi	r26, 0x45	; 69
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e5 e4       	ldi	r30, 0x45	; 69
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	88 60       	ori	r24, 0x08	; 8
    2c2e:	8c 93       	st	X, r24
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <TIMER2_voidInit+0xc8>
        break;

    case TIMER2_FAST_PWM_MODE:
        SET_BIT(TCCR2, WGM20);
    2c32:	a5 e4       	ldi	r26, 0x45	; 69
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e5 e4       	ldi	r30, 0x45	; 69
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 64       	ori	r24, 0x40	; 64
    2c3e:	8c 93       	st	X, r24
        SET_BIT(TCCR2, WGM21);
    2c40:	a5 e4       	ldi	r26, 0x45	; 69
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e5 e4       	ldi	r30, 0x45	; 69
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 60       	ori	r24, 0x08	; 8
    2c4c:	8c 93       	st	X, r24

    default:
        break;
    }

    TCCR2 &= (~(0b11 << COM20)) & (~(0b111 << CS20));
    2c4e:	a5 e4       	ldi	r26, 0x45	; 69
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e5 e4       	ldi	r30, 0x45	; 69
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	88 7c       	andi	r24, 0xC8	; 200
    2c5a:	8c 93       	st	X, r24
    TCCR2 |= (Compare << COM20) | (Prescaler << CS20);
    2c5c:	a5 e4       	ldi	r26, 0x45	; 69
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e5 e4       	ldi	r30, 0x45	; 69
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	28 2f       	mov	r18, r24
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	82 95       	swap	r24
    2c70:	92 95       	swap	r25
    2c72:	90 7f       	andi	r25, 0xF0	; 240
    2c74:	98 27       	eor	r25, r24
    2c76:	80 7f       	andi	r24, 0xF0	; 240
    2c78:	98 27       	eor	r25, r24
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	89 2b       	or	r24, r25
    2c80:	82 2b       	or	r24, r18
    2c82:	8c 93       	st	X, r24
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <TIMER2_voidSetTCNT2>:

void TIMER2_voidSetTCNT2(u8 A_u8Value)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	0f 92       	push	r0
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = A_u8Value;
    2ca0:	e4 e4       	ldi	r30, 0x44	; 68
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	80 83       	st	Z, r24
}
    2ca8:	0f 90       	pop	r0
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <TIMER2_voidSetOCR2>:

void TIMER2_voidSetOCR2(u8 A_u8Value)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = A_u8Value;
    2cbc:	e3 e4       	ldi	r30, 0x43	; 67
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	80 83       	st	Z, r24
}
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <TIMER2_voidOverFlowInterruptEnable>:

// Interrupt Section

void TIMER2_voidOverFlowInterruptEnable()
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE);
    2cd4:	a9 e5       	ldi	r26, 0x59	; 89
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e9 e5       	ldi	r30, 0x59	; 89
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 64       	ori	r24, 0x40	; 64
    2ce0:	8c 93       	st	X, r24
}
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <TIMER2_voidOverFlowInterruptDisable>:

void TIMER2_voidOverFlowInterruptDisable()
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE);
    2cf0:	a9 e5       	ldi	r26, 0x59	; 89
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e9 e5       	ldi	r30, 0x59	; 89
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8f 7b       	andi	r24, 0xBF	; 191
    2cfc:	8c 93       	st	X, r24
}
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <TIMER2_voidCompareInterruptEnable>:

void TIMER2_voidCompareInterruptEnable()
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE2);
    2d0c:	a9 e5       	ldi	r26, 0x59	; 89
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e9 e5       	ldi	r30, 0x59	; 89
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	80 68       	ori	r24, 0x80	; 128
    2d18:	8c 93       	st	X, r24
}
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <TIMER2_voidCompareInterruptDisable>:
void TIMER2_voidCompareInterruptDisable()
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE2);
    2d28:	a9 e5       	ldi	r26, 0x59	; 89
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e9 e5       	ldi	r30, 0x59	; 89
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	8f 77       	andi	r24, 0x7F	; 127
    2d34:	8c 93       	st	X, r24
}
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <TIMER2_voidSetCallBackOVF>:

void TIMER2_voidSetCallBackOVF(void (*pf)())
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <TIMER2_voidSetCallBackOVF+0x6>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
    TIMER2_OVF_CALL = pf;
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	90 93 a6 01 	sts	0x01A6, r25
    2d52:	80 93 a5 01 	sts	0x01A5, r24
}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <TIMER2_voidSetCallBackCTC>:

void TIMER2_voidSetCallBackCTC(void (*pf)())
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <TIMER2_voidSetCallBackCTC+0x6>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	9a 83       	std	Y+2, r25	; 0x02
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    TIMER2_CTC_CALL = pf;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
    2d72:	90 93 a8 01 	sts	0x01A8, r25
    2d76:	80 93 a7 01 	sts	0x01A7, r24
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <__vector_5>:

ISR(TIMER2_OVF_VECT)
{
    2d84:	1f 92       	push	r1
    2d86:	0f 92       	push	r0
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	0f 92       	push	r0
    2d8c:	11 24       	eor	r1, r1
    2d8e:	2f 93       	push	r18
    2d90:	3f 93       	push	r19
    2d92:	4f 93       	push	r20
    2d94:	5f 93       	push	r21
    2d96:	6f 93       	push	r22
    2d98:	7f 93       	push	r23
    2d9a:	8f 93       	push	r24
    2d9c:	9f 93       	push	r25
    2d9e:	af 93       	push	r26
    2da0:	bf 93       	push	r27
    2da2:	ef 93       	push	r30
    2da4:	ff 93       	push	r31
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    if (TIMER2_OVF_CALL != NULLPTR)
    2dae:	80 91 a5 01 	lds	r24, 0x01A5
    2db2:	90 91 a6 01 	lds	r25, 0x01A6
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	29 f0       	breq	.+10     	; 0x2dc4 <__vector_5+0x40>
        TIMER2_OVF_CALL();
    2dba:	e0 91 a5 01 	lds	r30, 0x01A5
    2dbe:	f0 91 a6 01 	lds	r31, 0x01A6
    2dc2:	09 95       	icall
}
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	ff 91       	pop	r31
    2dca:	ef 91       	pop	r30
    2dcc:	bf 91       	pop	r27
    2dce:	af 91       	pop	r26
    2dd0:	9f 91       	pop	r25
    2dd2:	8f 91       	pop	r24
    2dd4:	7f 91       	pop	r23
    2dd6:	6f 91       	pop	r22
    2dd8:	5f 91       	pop	r21
    2dda:	4f 91       	pop	r20
    2ddc:	3f 91       	pop	r19
    2dde:	2f 91       	pop	r18
    2de0:	0f 90       	pop	r0
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	0f 90       	pop	r0
    2de6:	1f 90       	pop	r1
    2de8:	18 95       	reti

00002dea <__vector_4>:

ISR(TIMER2_CTC_VECT)
{
    2dea:	1f 92       	push	r1
    2dec:	0f 92       	push	r0
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	0f 92       	push	r0
    2df2:	11 24       	eor	r1, r1
    2df4:	2f 93       	push	r18
    2df6:	3f 93       	push	r19
    2df8:	4f 93       	push	r20
    2dfa:	5f 93       	push	r21
    2dfc:	6f 93       	push	r22
    2dfe:	7f 93       	push	r23
    2e00:	8f 93       	push	r24
    2e02:	9f 93       	push	r25
    2e04:	af 93       	push	r26
    2e06:	bf 93       	push	r27
    2e08:	ef 93       	push	r30
    2e0a:	ff 93       	push	r31
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    if (TIMER2_CTC_CALL != NULLPTR)
    2e14:	80 91 a7 01 	lds	r24, 0x01A7
    2e18:	90 91 a8 01 	lds	r25, 0x01A8
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	29 f0       	breq	.+10     	; 0x2e2a <__vector_4+0x40>
        TIMER2_CTC_CALL();
    2e20:	e0 91 a7 01 	lds	r30, 0x01A7
    2e24:	f0 91 a8 01 	lds	r31, 0x01A8
    2e28:	09 95       	icall
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	ff 91       	pop	r31
    2e30:	ef 91       	pop	r30
    2e32:	bf 91       	pop	r27
    2e34:	af 91       	pop	r26
    2e36:	9f 91       	pop	r25
    2e38:	8f 91       	pop	r24
    2e3a:	7f 91       	pop	r23
    2e3c:	6f 91       	pop	r22
    2e3e:	5f 91       	pop	r21
    2e40:	4f 91       	pop	r20
    2e42:	3f 91       	pop	r19
    2e44:	2f 91       	pop	r18
    2e46:	0f 90       	pop	r0
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	0f 90       	pop	r0
    2e4c:	1f 90       	pop	r1
    2e4e:	18 95       	reti

00002e50 <TIMER1_voidInit>:
static void (*TIMER1_COMB)(void) = NULLPTR;
static void (*TIMER1_OVF)(void) = NULLPTR;
static void func_ICU(void);

void TIMER1_voidInit(TIMER1_Mode mode, TIMER1_Prescaler prescaler, TIMER1_CompareA compareA, TIMER1_CompareB compareB)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <TIMER1_voidInit+0x6>
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <TIMER1_voidInit+0x8>
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <TIMER1_voidInit+0xa>
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	89 83       	std	Y+1, r24	; 0x01
    2e60:	6a 83       	std	Y+2, r22	; 0x02
    2e62:	4b 83       	std	Y+3, r20	; 0x03
    2e64:	2c 83       	std	Y+4, r18	; 0x04
    switch (mode)
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	3e 83       	std	Y+6, r19	; 0x06
    2e6e:	2d 83       	std	Y+5, r18	; 0x05
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	87 30       	cpi	r24, 0x07	; 7
    2e76:	91 05       	cpc	r25, r1
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <TIMER1_voidInit+0x2c>
    2e7a:	1e c1       	rjmp	.+572    	; 0x30b8 <TIMER1_voidInit+0x268>
    2e7c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e80:	28 30       	cpi	r18, 0x08	; 8
    2e82:	31 05       	cpc	r19, r1
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <TIMER1_voidInit+0x88>
    2e86:	8d 81       	ldd	r24, Y+5	; 0x05
    2e88:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8a:	83 30       	cpi	r24, 0x03	; 3
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <TIMER1_voidInit+0x42>
    2e90:	a1 c0       	rjmp	.+322    	; 0x2fd4 <TIMER1_voidInit+0x184>
    2e92:	2d 81       	ldd	r18, Y+5	; 0x05
    2e94:	3e 81       	ldd	r19, Y+6	; 0x06
    2e96:	24 30       	cpi	r18, 0x04	; 4
    2e98:	31 05       	cpc	r19, r1
    2e9a:	8c f4       	brge	.+34     	; 0x2ebe <TIMER1_voidInit+0x6e>
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <TIMER1_voidInit+0x58>
    2ea6:	5e c0       	rjmp	.+188    	; 0x2f64 <TIMER1_voidInit+0x114>
    2ea8:	2d 81       	ldd	r18, Y+5	; 0x05
    2eaa:	3e 81       	ldd	r19, Y+6	; 0x06
    2eac:	22 30       	cpi	r18, 0x02	; 2
    2eae:	31 05       	cpc	r19, r1
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <TIMER1_voidInit+0x64>
    2eb2:	74 c0       	rjmp	.+232    	; 0x2f9c <TIMER1_voidInit+0x14c>
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	c9 f1       	breq	.+114    	; 0x2f2e <TIMER1_voidInit+0xde>
    2ebc:	e2 c1       	rjmp	.+964    	; 0x3282 <TIMER1_voidInit+0x432>
    2ebe:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec2:	25 30       	cpi	r18, 0x05	; 5
    2ec4:	31 05       	cpc	r19, r1
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <TIMER1_voidInit+0x7a>
    2ec8:	bd c0       	rjmp	.+378    	; 0x3044 <TIMER1_voidInit+0x1f4>
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	86 30       	cpi	r24, 0x06	; 6
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	0c f0       	brlt	.+2      	; 0x2ed6 <TIMER1_voidInit+0x86>
    2ed4:	d4 c0       	rjmp	.+424    	; 0x307e <TIMER1_voidInit+0x22e>
    2ed6:	9a c0       	rjmp	.+308    	; 0x300c <TIMER1_voidInit+0x1bc>
    2ed8:	2d 81       	ldd	r18, Y+5	; 0x05
    2eda:	3e 81       	ldd	r19, Y+6	; 0x06
    2edc:	2b 30       	cpi	r18, 0x0B	; 11
    2ede:	31 05       	cpc	r19, r1
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <TIMER1_voidInit+0x94>
    2ee2:	5d c1       	rjmp	.+698    	; 0x319e <TIMER1_voidInit+0x34e>
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	8c 30       	cpi	r24, 0x0C	; 12
    2eea:	91 05       	cpc	r25, r1
    2eec:	6c f4       	brge	.+26     	; 0x2f08 <TIMER1_voidInit+0xb8>
    2eee:	2d 81       	ldd	r18, Y+5	; 0x05
    2ef0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ef2:	29 30       	cpi	r18, 0x09	; 9
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <TIMER1_voidInit+0xaa>
    2ef8:	18 c1       	rjmp	.+560    	; 0x312a <TIMER1_voidInit+0x2da>
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	8a 30       	cpi	r24, 0x0A	; 10
    2f00:	91 05       	cpc	r25, r1
    2f02:	0c f0       	brlt	.+2      	; 0x2f06 <TIMER1_voidInit+0xb6>
    2f04:	2f c1       	rjmp	.+606    	; 0x3164 <TIMER1_voidInit+0x314>
    2f06:	f5 c0       	rjmp	.+490    	; 0x30f2 <TIMER1_voidInit+0x2a2>
    2f08:	2d 81       	ldd	r18, Y+5	; 0x05
    2f0a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f0c:	2d 30       	cpi	r18, 0x0D	; 13
    2f0e:	31 05       	cpc	r19, r1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <TIMER1_voidInit+0xc4>
    2f12:	7e c1       	rjmp	.+764    	; 0x3210 <TIMER1_voidInit+0x3c0>
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	8d 30       	cpi	r24, 0x0D	; 13
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	0c f4       	brge	.+2      	; 0x2f20 <TIMER1_voidInit+0xd0>
    2f1e:	5c c1       	rjmp	.+696    	; 0x31d8 <TIMER1_voidInit+0x388>
    2f20:	2d 81       	ldd	r18, Y+5	; 0x05
    2f22:	3e 81       	ldd	r19, Y+6	; 0x06
    2f24:	2e 30       	cpi	r18, 0x0E	; 14
    2f26:	31 05       	cpc	r19, r1
    2f28:	09 f4       	brne	.+2      	; 0x2f2c <TIMER1_voidInit+0xdc>
    2f2a:	8f c1       	rjmp	.+798    	; 0x324a <TIMER1_voidInit+0x3fa>
    2f2c:	aa c1       	rjmp	.+852    	; 0x3282 <TIMER1_voidInit+0x432>
    {
    case TIMER1_NORMAL_MODE:
        TCCR1A &= ~(0b11 << WGM10);
    2f2e:	af e4       	ldi	r26, 0x4F	; 79
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	ef e4       	ldi	r30, 0x4F	; 79
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	8c 7f       	andi	r24, 0xFC	; 252
    2f3a:	8c 93       	st	X, r24
        TCCR1A |= (0b00 << WGM10);
    2f3c:	af e4       	ldi	r26, 0x4F	; 79
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	ef e4       	ldi	r30, 0x4F	; 79
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    2f48:	ae e4       	ldi	r26, 0x4E	; 78
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	ee e4       	ldi	r30, 0x4E	; 78
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	87 7e       	andi	r24, 0xE7	; 231
    2f54:	8c 93       	st	X, r24
        TCCR1B |= (0b00 << WGM12);
    2f56:	ae e4       	ldi	r26, 0x4E	; 78
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	ee e4       	ldi	r30, 0x4E	; 78
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8c 93       	st	X, r24
    2f62:	8f c1       	rjmp	.+798    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_CORRECT_8BIT:
        TCCR1A &= ~(0b11 << WGM10);
    2f64:	af e4       	ldi	r26, 0x4F	; 79
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	ef e4       	ldi	r30, 0x4F	; 79
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8c 7f       	andi	r24, 0xFC	; 252
    2f70:	8c 93       	st	X, r24
        TCCR1A |= (0b01 << WGM10);
    2f72:	af e4       	ldi	r26, 0x4F	; 79
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	ef e4       	ldi	r30, 0x4F	; 79
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	81 60       	ori	r24, 0x01	; 1
    2f7e:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    2f80:	ae e4       	ldi	r26, 0x4E	; 78
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	ee e4       	ldi	r30, 0x4E	; 78
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	87 7e       	andi	r24, 0xE7	; 231
    2f8c:	8c 93       	st	X, r24
        TCCR1B |= (0b00 << WGM12);
    2f8e:	ae e4       	ldi	r26, 0x4E	; 78
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ee e4       	ldi	r30, 0x4E	; 78
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8c 93       	st	X, r24
    2f9a:	73 c1       	rjmp	.+742    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_CORRECT_9BIT:
        TCCR1A &= ~(0b11 << WGM10);
    2f9c:	af e4       	ldi	r26, 0x4F	; 79
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	ef e4       	ldi	r30, 0x4F	; 79
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8c 7f       	andi	r24, 0xFC	; 252
    2fa8:	8c 93       	st	X, r24
        TCCR1A |= (0b10 << WGM10);
    2faa:	af e4       	ldi	r26, 0x4F	; 79
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	ef e4       	ldi	r30, 0x4F	; 79
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	82 60       	ori	r24, 0x02	; 2
    2fb6:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    2fb8:	ae e4       	ldi	r26, 0x4E	; 78
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	ee e4       	ldi	r30, 0x4E	; 78
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	87 7e       	andi	r24, 0xE7	; 231
    2fc4:	8c 93       	st	X, r24
        TCCR1B |= (0b00 << WGM12);
    2fc6:	ae e4       	ldi	r26, 0x4E	; 78
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	ee e4       	ldi	r30, 0x4E	; 78
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	8c 93       	st	X, r24
    2fd2:	57 c1       	rjmp	.+686    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_CORRECT_10BIT:
        TCCR1A &= ~(0b11 << WGM10);
    2fd4:	af e4       	ldi	r26, 0x4F	; 79
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ef e4       	ldi	r30, 0x4F	; 79
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8c 7f       	andi	r24, 0xFC	; 252
    2fe0:	8c 93       	st	X, r24
        TCCR1A |= (0b11 << WGM10);
    2fe2:	af e4       	ldi	r26, 0x4F	; 79
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	ef e4       	ldi	r30, 0x4F	; 79
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	83 60       	ori	r24, 0x03	; 3
    2fee:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    2ff0:	ae e4       	ldi	r26, 0x4E	; 78
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	ee e4       	ldi	r30, 0x4E	; 78
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	87 7e       	andi	r24, 0xE7	; 231
    2ffc:	8c 93       	st	X, r24
        TCCR1B |= (0b00 << WGM12);
    2ffe:	ae e4       	ldi	r26, 0x4E	; 78
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	ee e4       	ldi	r30, 0x4E	; 78
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	8c 93       	st	X, r24
    300a:	3b c1       	rjmp	.+630    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_CTC_OCR1A:
        TCCR1A &= ~(0b11 << WGM10);
    300c:	af e4       	ldi	r26, 0x4F	; 79
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	ef e4       	ldi	r30, 0x4F	; 79
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	8c 7f       	andi	r24, 0xFC	; 252
    3018:	8c 93       	st	X, r24
        TCCR1A |= (0b00 << WGM10);
    301a:	af e4       	ldi	r26, 0x4F	; 79
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	ef e4       	ldi	r30, 0x4F	; 79
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    3026:	ae e4       	ldi	r26, 0x4E	; 78
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	ee e4       	ldi	r30, 0x4E	; 78
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	87 7e       	andi	r24, 0xE7	; 231
    3032:	8c 93       	st	X, r24
        TCCR1B |= (0b01 << WGM12);
    3034:	ae e4       	ldi	r26, 0x4E	; 78
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	ee e4       	ldi	r30, 0x4E	; 78
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	88 60       	ori	r24, 0x08	; 8
    3040:	8c 93       	st	X, r24
    3042:	1f c1       	rjmp	.+574    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_FAST_PWM_8BIT:
        TCCR1A &= ~(0b11 << WGM10);
    3044:	af e4       	ldi	r26, 0x4F	; 79
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	ef e4       	ldi	r30, 0x4F	; 79
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	8c 7f       	andi	r24, 0xFC	; 252
    3050:	8c 93       	st	X, r24
        TCCR1A |= (0b01 << WGM10);
    3052:	af e4       	ldi	r26, 0x4F	; 79
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	ef e4       	ldi	r30, 0x4F	; 79
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	81 60       	ori	r24, 0x01	; 1
    305e:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    3060:	ae e4       	ldi	r26, 0x4E	; 78
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	ee e4       	ldi	r30, 0x4E	; 78
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	87 7e       	andi	r24, 0xE7	; 231
    306c:	8c 93       	st	X, r24
        TCCR1B |= (0b01 << WGM12);
    306e:	ae e4       	ldi	r26, 0x4E	; 78
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	ee e4       	ldi	r30, 0x4E	; 78
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	88 60       	ori	r24, 0x08	; 8
    307a:	8c 93       	st	X, r24
    307c:	02 c1       	rjmp	.+516    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_FAST_PWM_9BIT:
        TCCR1A &= ~(0b11 << WGM10);
    307e:	af e4       	ldi	r26, 0x4F	; 79
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	ef e4       	ldi	r30, 0x4F	; 79
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	8c 7f       	andi	r24, 0xFC	; 252
    308a:	8c 93       	st	X, r24
        TCCR1A |= (0b10 << WGM10);
    308c:	af e4       	ldi	r26, 0x4F	; 79
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	ef e4       	ldi	r30, 0x4F	; 79
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    309a:	ae e4       	ldi	r26, 0x4E	; 78
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	ee e4       	ldi	r30, 0x4E	; 78
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	87 7e       	andi	r24, 0xE7	; 231
    30a6:	8c 93       	st	X, r24
        TCCR1B |= (0b01 << WGM12);
    30a8:	ae e4       	ldi	r26, 0x4E	; 78
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	ee e4       	ldi	r30, 0x4E	; 78
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	88 60       	ori	r24, 0x08	; 8
    30b4:	8c 93       	st	X, r24
    30b6:	e5 c0       	rjmp	.+458    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_FAST_PWM_10BIT:
        TCCR1A &= ~(0b11 << WGM10);
    30b8:	af e4       	ldi	r26, 0x4F	; 79
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	ef e4       	ldi	r30, 0x4F	; 79
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8c 7f       	andi	r24, 0xFC	; 252
    30c4:	8c 93       	st	X, r24
        TCCR1A |= (0b11 << WGM10);
    30c6:	af e4       	ldi	r26, 0x4F	; 79
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	ef e4       	ldi	r30, 0x4F	; 79
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	83 60       	ori	r24, 0x03	; 3
    30d2:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    30d4:	ae e4       	ldi	r26, 0x4E	; 78
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	ee e4       	ldi	r30, 0x4E	; 78
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	87 7e       	andi	r24, 0xE7	; 231
    30e0:	8c 93       	st	X, r24
        TCCR1B |= (0b01 << WGM12);
    30e2:	ae e4       	ldi	r26, 0x4E	; 78
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	ee e4       	ldi	r30, 0x4E	; 78
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	88 60       	ori	r24, 0x08	; 8
    30ee:	8c 93       	st	X, r24
    30f0:	c8 c0       	rjmp	.+400    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_AND_FREQUENCY_CORRECT_ICR1:
        TCCR1A &= ~(0b11 << WGM10);
    30f2:	af e4       	ldi	r26, 0x4F	; 79
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	ef e4       	ldi	r30, 0x4F	; 79
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	8c 7f       	andi	r24, 0xFC	; 252
    30fe:	8c 93       	st	X, r24
        TCCR1A |= (0b00 << WGM10);
    3100:	af e4       	ldi	r26, 0x4F	; 79
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	ef e4       	ldi	r30, 0x4F	; 79
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    310c:	ae e4       	ldi	r26, 0x4E	; 78
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	ee e4       	ldi	r30, 0x4E	; 78
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	87 7e       	andi	r24, 0xE7	; 231
    3118:	8c 93       	st	X, r24
        TCCR1B |= (0b10 << WGM12);
    311a:	ae e4       	ldi	r26, 0x4E	; 78
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	ee e4       	ldi	r30, 0x4E	; 78
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	80 61       	ori	r24, 0x10	; 16
    3126:	8c 93       	st	X, r24
    3128:	ac c0       	rjmp	.+344    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_AND_FREQUENCY_CORRECT_OCRA1:
        TCCR1A &= ~(0b11 << WGM10);
    312a:	af e4       	ldi	r26, 0x4F	; 79
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	ef e4       	ldi	r30, 0x4F	; 79
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	8c 7f       	andi	r24, 0xFC	; 252
    3136:	8c 93       	st	X, r24
        TCCR1A |= (0b01 << WGM10);
    3138:	af e4       	ldi	r26, 0x4F	; 79
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	ef e4       	ldi	r30, 0x4F	; 79
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	81 60       	ori	r24, 0x01	; 1
    3144:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    3146:	ae e4       	ldi	r26, 0x4E	; 78
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	ee e4       	ldi	r30, 0x4E	; 78
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	87 7e       	andi	r24, 0xE7	; 231
    3152:	8c 93       	st	X, r24
        TCCR1B |= (0b10 << WGM12);
    3154:	ae e4       	ldi	r26, 0x4E	; 78
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	ee e4       	ldi	r30, 0x4E	; 78
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	80 61       	ori	r24, 0x10	; 16
    3160:	8c 93       	st	X, r24
    3162:	8f c0       	rjmp	.+286    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_CORRECT_ICR1:
        TCCR1A &= ~(0b11 << WGM10);
    3164:	af e4       	ldi	r26, 0x4F	; 79
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	ef e4       	ldi	r30, 0x4F	; 79
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8c 7f       	andi	r24, 0xFC	; 252
    3170:	8c 93       	st	X, r24
        TCCR1A |= (0b10 << WGM10);
    3172:	af e4       	ldi	r26, 0x4F	; 79
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	ef e4       	ldi	r30, 0x4F	; 79
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	82 60       	ori	r24, 0x02	; 2
    317e:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    3180:	ae e4       	ldi	r26, 0x4E	; 78
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ee e4       	ldi	r30, 0x4E	; 78
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	87 7e       	andi	r24, 0xE7	; 231
    318c:	8c 93       	st	X, r24
        TCCR1B |= (0b10 << WGM12);
    318e:	ae e4       	ldi	r26, 0x4E	; 78
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	ee e4       	ldi	r30, 0x4E	; 78
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 61       	ori	r24, 0x10	; 16
    319a:	8c 93       	st	X, r24
    319c:	72 c0       	rjmp	.+228    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_PHASE_CORRECT_OCRA1:
        TCCR1A &= ~(0b11 << WGM10);
    319e:	af e4       	ldi	r26, 0x4F	; 79
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	ef e4       	ldi	r30, 0x4F	; 79
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	8c 7f       	andi	r24, 0xFC	; 252
    31aa:	8c 93       	st	X, r24
        TCCR1A |= (0b11 << WGM10);
    31ac:	af e4       	ldi	r26, 0x4F	; 79
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	ef e4       	ldi	r30, 0x4F	; 79
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	83 60       	ori	r24, 0x03	; 3
    31b8:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    31ba:	ae e4       	ldi	r26, 0x4E	; 78
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	ee e4       	ldi	r30, 0x4E	; 78
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	87 7e       	andi	r24, 0xE7	; 231
    31c6:	8c 93       	st	X, r24
        TCCR1B |= (0b10 << WGM12);
    31c8:	ae e4       	ldi	r26, 0x4E	; 78
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	ee e4       	ldi	r30, 0x4E	; 78
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	80 61       	ori	r24, 0x10	; 16
    31d4:	8c 93       	st	X, r24
    31d6:	55 c0       	rjmp	.+170    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_CTC_ICR1:
        TCCR1A &= ~(0b11 << WGM10);
    31d8:	af e4       	ldi	r26, 0x4F	; 79
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	ef e4       	ldi	r30, 0x4F	; 79
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	8c 7f       	andi	r24, 0xFC	; 252
    31e4:	8c 93       	st	X, r24
        TCCR1A |= (0b00 << WGM10);
    31e6:	af e4       	ldi	r26, 0x4F	; 79
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	ef e4       	ldi	r30, 0x4F	; 79
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    31f2:	ae e4       	ldi	r26, 0x4E	; 78
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	ee e4       	ldi	r30, 0x4E	; 78
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	87 7e       	andi	r24, 0xE7	; 231
    31fe:	8c 93       	st	X, r24
        TCCR1B |= (0b11 << WGM12);
    3200:	ae e4       	ldi	r26, 0x4E	; 78
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	ee e4       	ldi	r30, 0x4E	; 78
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	88 61       	ori	r24, 0x18	; 24
    320c:	8c 93       	st	X, r24
    320e:	39 c0       	rjmp	.+114    	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_FAST_PWM_ICR1:
        TCCR1A &= ~(0b11 << WGM10);
    3210:	af e4       	ldi	r26, 0x4F	; 79
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	ef e4       	ldi	r30, 0x4F	; 79
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	8c 7f       	andi	r24, 0xFC	; 252
    321c:	8c 93       	st	X, r24
        TCCR1A |= (0b10 << WGM10);
    321e:	af e4       	ldi	r26, 0x4F	; 79
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	ef e4       	ldi	r30, 0x4F	; 79
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	82 60       	ori	r24, 0x02	; 2
    322a:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    322c:	ae e4       	ldi	r26, 0x4E	; 78
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	ee e4       	ldi	r30, 0x4E	; 78
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	87 7e       	andi	r24, 0xE7	; 231
    3238:	8c 93       	st	X, r24
        TCCR1B |= (0b11 << WGM12);
    323a:	ae e4       	ldi	r26, 0x4E	; 78
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	ee e4       	ldi	r30, 0x4E	; 78
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	88 61       	ori	r24, 0x18	; 24
    3246:	8c 93       	st	X, r24
    3248:	1c c0       	rjmp	.+56     	; 0x3282 <TIMER1_voidInit+0x432>
        break;

    case TIMER1_FAST_PWM_OCRA1:
        TCCR1A &= ~(0b11 << WGM10);
    324a:	af e4       	ldi	r26, 0x4F	; 79
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	ef e4       	ldi	r30, 0x4F	; 79
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8c 7f       	andi	r24, 0xFC	; 252
    3256:	8c 93       	st	X, r24
        TCCR1A |= (0b11 << WGM10);
    3258:	af e4       	ldi	r26, 0x4F	; 79
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	ef e4       	ldi	r30, 0x4F	; 79
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	83 60       	ori	r24, 0x03	; 3
    3264:	8c 93       	st	X, r24
        TCCR1B &= ~(0b11 << WGM12);
    3266:	ae e4       	ldi	r26, 0x4E	; 78
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	ee e4       	ldi	r30, 0x4E	; 78
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	87 7e       	andi	r24, 0xE7	; 231
    3272:	8c 93       	st	X, r24
        TCCR1B |= (0b11 << WGM12);
    3274:	ae e4       	ldi	r26, 0x4E	; 78
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ee e4       	ldi	r30, 0x4E	; 78
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	88 61       	ori	r24, 0x18	; 24
    3280:	8c 93       	st	X, r24
        break;
    }

    // Mode of Compare output mdoe for OC1A & OC1B
    TCCR1A &= (~(0b11 << COM1A0)) & (~(0b11 << COM1B0));
    3282:	af e4       	ldi	r26, 0x4F	; 79
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	ef e4       	ldi	r30, 0x4F	; 79
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	8f 70       	andi	r24, 0x0F	; 15
    328e:	8c 93       	st	X, r24
    TCCR1A |= ((compareA << COM1A0) | (compareB << COM1B0));
    3290:	af e4       	ldi	r26, 0x4F	; 79
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	ef e4       	ldi	r30, 0x4F	; 79
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	38 2f       	mov	r19, r24
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	88 2f       	mov	r24, r24
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	00 24       	eor	r0, r0
    32a4:	96 95       	lsr	r25
    32a6:	87 95       	ror	r24
    32a8:	07 94       	ror	r0
    32aa:	96 95       	lsr	r25
    32ac:	87 95       	ror	r24
    32ae:	07 94       	ror	r0
    32b0:	98 2f       	mov	r25, r24
    32b2:	80 2d       	mov	r24, r0
    32b4:	28 2f       	mov	r18, r24
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	82 95       	swap	r24
    32be:	92 95       	swap	r25
    32c0:	90 7f       	andi	r25, 0xF0	; 240
    32c2:	98 27       	eor	r25, r24
    32c4:	80 7f       	andi	r24, 0xF0	; 240
    32c6:	98 27       	eor	r25, r24
    32c8:	82 2b       	or	r24, r18
    32ca:	83 2b       	or	r24, r19
    32cc:	8c 93       	st	X, r24

    // prescaler
    TCCR1B &= ~(0b111 << CS10);
    32ce:	ae e4       	ldi	r26, 0x4E	; 78
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ee e4       	ldi	r30, 0x4E	; 78
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	88 7f       	andi	r24, 0xF8	; 248
    32da:	8c 93       	st	X, r24
    TCCR1B |= (prescaler << CS10);
    32dc:	ae e4       	ldi	r26, 0x4E	; 78
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	ee e4       	ldi	r30, 0x4E	; 78
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	90 81       	ld	r25, Z
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	89 2b       	or	r24, r25
    32ea:	8c 93       	st	X, r24
}
    32ec:	26 96       	adiw	r28, 0x06	; 6
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <TIMER1_voidInputCaptureEdge>:

#define ICES1 6
void TIMER1_voidInputCaptureEdge(ICU_Edge_type edge)
{
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	89 83       	std	Y+1, r24	; 0x01
    if (edge == RISING)
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	88 23       	and	r24, r24
    330e:	41 f4       	brne	.+16     	; 0x3320 <TIMER1_voidInputCaptureEdge+0x22>
        SET_BIT(TCCR1B, ICES1);
    3310:	ae e4       	ldi	r26, 0x4E	; 78
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	ee e4       	ldi	r30, 0x4E	; 78
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	80 64       	ori	r24, 0x40	; 64
    331c:	8c 93       	st	X, r24
    331e:	0a c0       	rjmp	.+20     	; 0x3334 <TIMER1_voidInputCaptureEdge+0x36>
    else if (edge == FALLING)
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	81 30       	cpi	r24, 0x01	; 1
    3324:	39 f4       	brne	.+14     	; 0x3334 <TIMER1_voidInputCaptureEdge+0x36>
        CLR_BIT(TCCR1B, ICES1);
    3326:	ae e4       	ldi	r26, 0x4E	; 78
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	ee e4       	ldi	r30, 0x4E	; 78
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	8f 7b       	andi	r24, 0xBF	; 191
    3332:	8c 93       	st	X, r24
}
    3334:	0f 90       	pop	r0
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <TIMER1_voidMeasurePWM>:

static u8 global_u8Flag, t1, t2, t3;

// Synchronus Function
void TIMER1_voidMeasurePWM(u32 *Pfreq, u8 *Pduty)
{
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	28 97       	sbiw	r28, 0x08	; 8
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	9e 83       	std	Y+6, r25	; 0x06
    3352:	8d 83       	std	Y+5, r24	; 0x05
    3354:	78 87       	std	Y+8, r23	; 0x08
    3356:	6f 83       	std	Y+7, r22	; 0x07
    u32 Ton, Toff;
    TCNT1 = 0;
    3358:	ec e4       	ldi	r30, 0x4C	; 76
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	11 82       	std	Z+1, r1	; 0x01
    335e:	10 82       	st	Z, r1
    TIMER1_voidSetCallBackCapture(func_ICU);
    3360:	84 ee       	ldi	r24, 0xE4	; 228
    3362:	9b e1       	ldi	r25, 0x1B	; 27
    3364:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <TIMER1_voidSetCallBackCapture>
    TIMER1_voidInputCaptureEdge(RISING);
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
    TIMER1_voidCaptureInterruptEnable();
    336e:	0e 94 18 1a 	call	0x3430	; 0x3430 <TIMER1_voidCaptureInterruptEnable>
    global_u8Flag = 0;
    3372:	10 92 b1 01 	sts	0x01B1, r1
    / ----->----                ----------                 _________
    / |        |               ^         ∨                ^         |
    __|        |_______________|         |________________|         |
    /  wrong indicat           t1        t2               t3
    */
    while (global_u8Flag < 3)
    3376:	80 91 b1 01 	lds	r24, 0x01B1
    337a:	83 30       	cpi	r24, 0x03	; 3
    337c:	e0 f3       	brcs	.-8      	; 0x3376 <TIMER1_voidMeasurePWM+0x3a>
        ;
    Ton = t2 - t1;
    337e:	80 91 b3 01 	lds	r24, 0x01B3
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	80 91 b2 01 	lds	r24, 0x01B2
    338a:	88 2f       	mov	r24, r24
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	a9 01       	movw	r20, r18
    3390:	48 1b       	sub	r20, r24
    3392:	59 0b       	sbc	r21, r25
    3394:	ca 01       	movw	r24, r20
    3396:	9c 83       	std	Y+4, r25	; 0x04
    3398:	8b 83       	std	Y+3, r24	; 0x03
    Toff = t3 - t2;
    339a:	80 91 b4 01 	lds	r24, 0x01B4
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	80 91 b3 01 	lds	r24, 0x01B3
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a9 01       	movw	r20, r18
    33ac:	48 1b       	sub	r20, r24
    33ae:	59 0b       	sbc	r21, r25
    33b0:	ca 01       	movw	r24, r20
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01
    *Pduty = ((u32)Ton * 100) / ((u32)Ton + (u32)Toff);
    33b6:	2b 81       	ldd	r18, Y+3	; 0x03
    33b8:	3c 81       	ldd	r19, Y+4	; 0x04
    33ba:	84 e6       	ldi	r24, 0x64	; 100
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	28 9f       	mul	r18, r24
    33c0:	a0 01       	movw	r20, r0
    33c2:	29 9f       	mul	r18, r25
    33c4:	50 0d       	add	r21, r0
    33c6:	38 9f       	mul	r19, r24
    33c8:	50 0d       	add	r21, r0
    33ca:	11 24       	eor	r1, r1
    33cc:	2b 81       	ldd	r18, Y+3	; 0x03
    33ce:	3c 81       	ldd	r19, Y+4	; 0x04
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	9a 81       	ldd	r25, Y+2	; 0x02
    33d4:	28 0f       	add	r18, r24
    33d6:	39 1f       	adc	r19, r25
    33d8:	ca 01       	movw	r24, r20
    33da:	b9 01       	movw	r22, r18
    33dc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    33e0:	cb 01       	movw	r24, r22
    33e2:	ef 81       	ldd	r30, Y+7	; 0x07
    33e4:	f8 85       	ldd	r31, Y+8	; 0x08
    33e6:	80 83       	st	Z, r24
    *Pfreq = (u32)1000000 / ((u32)Toff + Ton);
    33e8:	29 81       	ldd	r18, Y+1	; 0x01
    33ea:	3a 81       	ldd	r19, Y+2	; 0x02
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	28 0f       	add	r18, r24
    33f2:	39 1f       	adc	r19, r25
    33f4:	80 e4       	ldi	r24, 0x40	; 64
    33f6:	92 e4       	ldi	r25, 0x42	; 66
    33f8:	b9 01       	movw	r22, r18
    33fa:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    33fe:	cb 01       	movw	r24, r22
    3400:	ed 81       	ldd	r30, Y+5	; 0x05
    3402:	fe 81       	ldd	r31, Y+6	; 0x06
    3404:	91 83       	std	Z+1, r25	; 0x01
    3406:	80 83       	st	Z, r24
}
    3408:	28 96       	adiw	r28, 0x08	; 8
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <TIMER1_voidGetICR1>:

u16 TIMER1_voidGetICR1(void)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    3422:	e6 e4       	ldi	r30, 0x46	; 70
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
}
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	08 95       	ret

00003430 <TIMER1_voidCaptureInterruptEnable>:

/**********************************************/
// interrupt Enable/Disable
void TIMER1_voidCaptureInterruptEnable(void)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TICIE1);
    3438:	a9 e5       	ldi	r26, 0x59	; 89
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e9 e5       	ldi	r30, 0x59	; 89
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	80 62       	ori	r24, 0x20	; 32
    3444:	8c 93       	st	X, r24
}
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <TIMER1_voidCaptureInterruptDisable>:

void TIMER1_voidCaptureInterruptDisable(void)
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TICIE1);
    3454:	a9 e5       	ldi	r26, 0x59	; 89
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e9 e5       	ldi	r30, 0x59	; 89
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	8f 7d       	andi	r24, 0xDF	; 223
    3460:	8c 93       	st	X, r24
}
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <TIMER1_voidCompareAInterruptEnable>:

void TIMER1_voidCompareAInterruptEnable(void)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    3470:	a9 e5       	ldi	r26, 0x59	; 89
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e9 e5       	ldi	r30, 0x59	; 89
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	80 61       	ori	r24, 0x10	; 16
    347c:	8c 93       	st	X, r24
}
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <TIMER1_voidCompareAInterruptDisable>:

void TIMER1_voidCompareAInterruptDisable(void)
{
    3484:	df 93       	push	r29
    3486:	cf 93       	push	r28
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1A);
    348c:	a9 e5       	ldi	r26, 0x59	; 89
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	e9 e5       	ldi	r30, 0x59	; 89
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	8f 7e       	andi	r24, 0xEF	; 239
    3498:	8c 93       	st	X, r24
}
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	08 95       	ret

000034a0 <TIMER1_voidCompareBInterruptEnable>:

void TIMER1_voidCompareBInterruptEnable(void)
{
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    34a8:	a9 e5       	ldi	r26, 0x59	; 89
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	e9 e5       	ldi	r30, 0x59	; 89
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	88 60       	ori	r24, 0x08	; 8
    34b4:	8c 93       	st	X, r24
}
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	08 95       	ret

000034bc <TIMER1_voidCompareBInterruptDisable>:

void TIMER1_voidCompareBInterruptDisable(void)
{
    34bc:	df 93       	push	r29
    34be:	cf 93       	push	r28
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1B);
    34c4:	a9 e5       	ldi	r26, 0x59	; 89
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	e9 e5       	ldi	r30, 0x59	; 89
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	87 7f       	andi	r24, 0xF7	; 247
    34d0:	8c 93       	st	X, r24
}
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <TIMER1_voidOverFlowInterruptEnable>:

void TIMER1_voidOverFlowInterruptEnable(void)
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    34e0:	a9 e5       	ldi	r26, 0x59	; 89
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e9 e5       	ldi	r30, 0x59	; 89
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	84 60       	ori	r24, 0x04	; 4
    34ec:	8c 93       	st	X, r24
}
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <TIMER1_voidOverFlowInterruptDisable>:

void TIMER1_voidOverFlowInterruptDisable(void)
{
    34f4:	df 93       	push	r29
    34f6:	cf 93       	push	r28
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE1);
    34fc:	a9 e5       	ldi	r26, 0x59	; 89
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	e9 e5       	ldi	r30, 0x59	; 89
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	8b 7f       	andi	r24, 0xFB	; 251
    3508:	8c 93       	st	X, r24
}
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <TIMER1_voidSetICR1Value>:
/**********************************************/

void TIMER1_voidSetICR1Value(u16 A_u16ICR1Value)
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	00 d0       	rcall	.+0      	; 0x3516 <TIMER1_voidSetICR1Value+0x6>
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	9a 83       	std	Y+2, r25	; 0x02
    351c:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = A_u16ICR1Value;
    351e:	e6 e4       	ldi	r30, 0x46	; 70
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	9a 81       	ldd	r25, Y+2	; 0x02
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
}
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <TIMER1_voidSetOCR1AValue>:

void TIMER1_voidSetOCR1AValue(u16 A_u16OCR1AValue)
{
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	00 d0       	rcall	.+0      	; 0x353a <TIMER1_voidSetOCR1AValue+0x6>
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	9a 83       	std	Y+2, r25	; 0x02
    3540:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = A_u16OCR1AValue;
    3542:	ea e4       	ldi	r30, 0x4A	; 74
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	80 83       	st	Z, r24
}
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <TIMER1_voidSetOCR1BValue>:

void TIMER1_voidSetOCR1BValue(u16 A_u16OCR1AValue)
{
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <TIMER1_voidSetOCR1BValue+0x6>
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	9a 83       	std	Y+2, r25	; 0x02
    3564:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = A_u16OCR1AValue;
    3566:	e8 e4       	ldi	r30, 0x48	; 72
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	9a 81       	ldd	r25, Y+2	; 0x02
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	80 83       	st	Z, r24
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <TIMER1_voidSetTCNT1Value>:

// Set Preload Value in TCNT1
void TIMER1_voidSetTCNT1Value(u16 A_u16TCNT1Value)
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	00 d0       	rcall	.+0      	; 0x3582 <TIMER1_voidSetTCNT1Value+0x6>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = A_u16TCNT1Value;
    358a:	ec e4       	ldi	r30, 0x4C	; 76
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	9a 81       	ldd	r25, Y+2	; 0x02
    3592:	91 83       	std	Z+1, r25	; 0x01
    3594:	80 83       	st	Z, r24
}
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	08 95       	ret

000035a0 <TIMER1_voidSetCallBackCapture>:

// interrupt section

void TIMER1_voidSetCallBackCapture(void (*pf)(void))
{
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <TIMER1_voidSetCallBackCapture+0x6>
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_CAPTURE = pf;
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	90 93 aa 01 	sts	0x01AA, r25
    35b6:	80 93 a9 01 	sts	0x01A9, r24
}
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <TIMER1_voidSetCallBackCOMA>:
void TIMER1_voidSetCallBackCOMA(void (*pf)(void))
{
    35c4:	df 93       	push	r29
    35c6:	cf 93       	push	r28
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <TIMER1_voidSetCallBackCOMA+0x6>
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	9a 83       	std	Y+2, r25	; 0x02
    35d0:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMA = pf;
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	90 93 ac 01 	sts	0x01AC, r25
    35da:	80 93 ab 01 	sts	0x01AB, r24
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	cf 91       	pop	r28
    35e4:	df 91       	pop	r29
    35e6:	08 95       	ret

000035e8 <TIMER1_voidSetCallBackCOMB>:
void TIMER1_voidSetCallBackCOMB(void (*pf)(void))
{
    35e8:	df 93       	push	r29
    35ea:	cf 93       	push	r28
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <TIMER1_voidSetCallBackCOMB+0x6>
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	9a 83       	std	Y+2, r25	; 0x02
    35f4:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_COMB = pf;
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	90 93 ae 01 	sts	0x01AE, r25
    35fe:	80 93 ad 01 	sts	0x01AD, r24
}
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	cf 91       	pop	r28
    3608:	df 91       	pop	r29
    360a:	08 95       	ret

0000360c <TIMER1_voidSetCallBackOVF>:

void TIMER1_voidSetCallBackOVF(void (*pf)(void))
{
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	00 d0       	rcall	.+0      	; 0x3612 <TIMER1_voidSetCallBackOVF+0x6>
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	9a 83       	std	Y+2, r25	; 0x02
    3618:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_OVF = pf;
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	9a 81       	ldd	r25, Y+2	; 0x02
    361e:	90 93 b0 01 	sts	0x01B0, r25
    3622:	80 93 af 01 	sts	0x01AF, r24
}
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret

00003630 <__vector_6>:

// ISR section
ISR(TIMER1_CAPT_VECT)
{
    3630:	1f 92       	push	r1
    3632:	0f 92       	push	r0
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	0f 92       	push	r0
    3638:	11 24       	eor	r1, r1
    363a:	2f 93       	push	r18
    363c:	3f 93       	push	r19
    363e:	4f 93       	push	r20
    3640:	5f 93       	push	r21
    3642:	6f 93       	push	r22
    3644:	7f 93       	push	r23
    3646:	8f 93       	push	r24
    3648:	9f 93       	push	r25
    364a:	af 93       	push	r26
    364c:	bf 93       	push	r27
    364e:	ef 93       	push	r30
    3650:	ff 93       	push	r31
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    if (TIMER1_CAPTURE != NULLPTR)
    365a:	80 91 a9 01 	lds	r24, 0x01A9
    365e:	90 91 aa 01 	lds	r25, 0x01AA
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	29 f0       	breq	.+10     	; 0x3670 <__vector_6+0x40>
        TIMER1_CAPTURE();
    3666:	e0 91 a9 01 	lds	r30, 0x01A9
    366a:	f0 91 aa 01 	lds	r31, 0x01AA
    366e:	09 95       	icall
}
    3670:	cf 91       	pop	r28
    3672:	df 91       	pop	r29
    3674:	ff 91       	pop	r31
    3676:	ef 91       	pop	r30
    3678:	bf 91       	pop	r27
    367a:	af 91       	pop	r26
    367c:	9f 91       	pop	r25
    367e:	8f 91       	pop	r24
    3680:	7f 91       	pop	r23
    3682:	6f 91       	pop	r22
    3684:	5f 91       	pop	r21
    3686:	4f 91       	pop	r20
    3688:	3f 91       	pop	r19
    368a:	2f 91       	pop	r18
    368c:	0f 90       	pop	r0
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	0f 90       	pop	r0
    3692:	1f 90       	pop	r1
    3694:	18 95       	reti

00003696 <__vector_7>:
ISR(TIMER1_COMA_VECT)
{
    3696:	1f 92       	push	r1
    3698:	0f 92       	push	r0
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	0f 92       	push	r0
    369e:	11 24       	eor	r1, r1
    36a0:	2f 93       	push	r18
    36a2:	3f 93       	push	r19
    36a4:	4f 93       	push	r20
    36a6:	5f 93       	push	r21
    36a8:	6f 93       	push	r22
    36aa:	7f 93       	push	r23
    36ac:	8f 93       	push	r24
    36ae:	9f 93       	push	r25
    36b0:	af 93       	push	r26
    36b2:	bf 93       	push	r27
    36b4:	ef 93       	push	r30
    36b6:	ff 93       	push	r31
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    if (TIMER1_COMA != NULLPTR)
    36c0:	80 91 ab 01 	lds	r24, 0x01AB
    36c4:	90 91 ac 01 	lds	r25, 0x01AC
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	29 f0       	breq	.+10     	; 0x36d6 <__vector_7+0x40>
        TIMER1_COMA();
    36cc:	e0 91 ab 01 	lds	r30, 0x01AB
    36d0:	f0 91 ac 01 	lds	r31, 0x01AC
    36d4:	09 95       	icall
}
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	ff 91       	pop	r31
    36dc:	ef 91       	pop	r30
    36de:	bf 91       	pop	r27
    36e0:	af 91       	pop	r26
    36e2:	9f 91       	pop	r25
    36e4:	8f 91       	pop	r24
    36e6:	7f 91       	pop	r23
    36e8:	6f 91       	pop	r22
    36ea:	5f 91       	pop	r21
    36ec:	4f 91       	pop	r20
    36ee:	3f 91       	pop	r19
    36f0:	2f 91       	pop	r18
    36f2:	0f 90       	pop	r0
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	0f 90       	pop	r0
    36f8:	1f 90       	pop	r1
    36fa:	18 95       	reti

000036fc <__vector_8>:
ISR(TIMER1_COMB_VECT)
{
    36fc:	1f 92       	push	r1
    36fe:	0f 92       	push	r0
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	0f 92       	push	r0
    3704:	11 24       	eor	r1, r1
    3706:	2f 93       	push	r18
    3708:	3f 93       	push	r19
    370a:	4f 93       	push	r20
    370c:	5f 93       	push	r21
    370e:	6f 93       	push	r22
    3710:	7f 93       	push	r23
    3712:	8f 93       	push	r24
    3714:	9f 93       	push	r25
    3716:	af 93       	push	r26
    3718:	bf 93       	push	r27
    371a:	ef 93       	push	r30
    371c:	ff 93       	push	r31
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    if (TIMER1_COMB != NULLPTR)
    3726:	80 91 ad 01 	lds	r24, 0x01AD
    372a:	90 91 ae 01 	lds	r25, 0x01AE
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	29 f0       	breq	.+10     	; 0x373c <__vector_8+0x40>
        TIMER1_COMB();
    3732:	e0 91 ad 01 	lds	r30, 0x01AD
    3736:	f0 91 ae 01 	lds	r31, 0x01AE
    373a:	09 95       	icall
}
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	ff 91       	pop	r31
    3742:	ef 91       	pop	r30
    3744:	bf 91       	pop	r27
    3746:	af 91       	pop	r26
    3748:	9f 91       	pop	r25
    374a:	8f 91       	pop	r24
    374c:	7f 91       	pop	r23
    374e:	6f 91       	pop	r22
    3750:	5f 91       	pop	r21
    3752:	4f 91       	pop	r20
    3754:	3f 91       	pop	r19
    3756:	2f 91       	pop	r18
    3758:	0f 90       	pop	r0
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	0f 90       	pop	r0
    375e:	1f 90       	pop	r1
    3760:	18 95       	reti

00003762 <__vector_9>:
ISR(TIMER1_OVF_VECT)
{
    3762:	1f 92       	push	r1
    3764:	0f 92       	push	r0
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	0f 92       	push	r0
    376a:	11 24       	eor	r1, r1
    376c:	2f 93       	push	r18
    376e:	3f 93       	push	r19
    3770:	4f 93       	push	r20
    3772:	5f 93       	push	r21
    3774:	6f 93       	push	r22
    3776:	7f 93       	push	r23
    3778:	8f 93       	push	r24
    377a:	9f 93       	push	r25
    377c:	af 93       	push	r26
    377e:	bf 93       	push	r27
    3780:	ef 93       	push	r30
    3782:	ff 93       	push	r31
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    if (TIMER1_OVF != NULLPTR)
    378c:	80 91 af 01 	lds	r24, 0x01AF
    3790:	90 91 b0 01 	lds	r25, 0x01B0
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	29 f0       	breq	.+10     	; 0x37a2 <__vector_9+0x40>
        TIMER1_OVF();
    3798:	e0 91 af 01 	lds	r30, 0x01AF
    379c:	f0 91 b0 01 	lds	r31, 0x01B0
    37a0:	09 95       	icall
}
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	ff 91       	pop	r31
    37a8:	ef 91       	pop	r30
    37aa:	bf 91       	pop	r27
    37ac:	af 91       	pop	r26
    37ae:	9f 91       	pop	r25
    37b0:	8f 91       	pop	r24
    37b2:	7f 91       	pop	r23
    37b4:	6f 91       	pop	r22
    37b6:	5f 91       	pop	r21
    37b8:	4f 91       	pop	r20
    37ba:	3f 91       	pop	r19
    37bc:	2f 91       	pop	r18
    37be:	0f 90       	pop	r0
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	0f 90       	pop	r0
    37c4:	1f 90       	pop	r1
    37c6:	18 95       	reti

000037c8 <func_ICU>:

static void func_ICU(void)
{
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    if (global_u8Flag == 0)
    37d0:	80 91 b1 01 	lds	r24, 0x01B1
    37d4:	88 23       	and	r24, r24
    37d6:	69 f4       	brne	.+26     	; 0x37f2 <func_ICU+0x2a>
    {
        t1 = ICR1;
    37d8:	e6 e4       	ldi	r30, 0x46	; 70
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	91 81       	ldd	r25, Z+1	; 0x01
    37e0:	80 93 b2 01 	sts	0x01B2, r24
        TIMER1_voidInputCaptureEdge(FALLING);
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
        global_u8Flag = 1;
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	80 93 b1 01 	sts	0x01B1, r24
    37f0:	20 c0       	rjmp	.+64     	; 0x3832 <func_ICU+0x6a>
    }
    else if (global_u8Flag == 1)
    37f2:	80 91 b1 01 	lds	r24, 0x01B1
    37f6:	81 30       	cpi	r24, 0x01	; 1
    37f8:	69 f4       	brne	.+26     	; 0x3814 <func_ICU+0x4c>
    {
        t2 = ICR1;
    37fa:	e6 e4       	ldi	r30, 0x46	; 70
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	80 81       	ld	r24, Z
    3800:	91 81       	ldd	r25, Z+1	; 0x01
    3802:	80 93 b3 01 	sts	0x01B3, r24
        TIMER1_voidInputCaptureEdge(RISING);
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
        global_u8Flag = 2;
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	80 93 b1 01 	sts	0x01B1, r24
    3812:	0f c0       	rjmp	.+30     	; 0x3832 <func_ICU+0x6a>
    }
    else if (global_u8Flag == 2)
    3814:	80 91 b1 01 	lds	r24, 0x01B1
    3818:	82 30       	cpi	r24, 0x02	; 2
    381a:	59 f4       	brne	.+22     	; 0x3832 <func_ICU+0x6a>
    {
        t3 = ICR1;
    381c:	e6 e4       	ldi	r30, 0x46	; 70
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	80 93 b4 01 	sts	0x01B4, r24
        TIMER1_voidCaptureInterruptDisable();
    3828:	0e 94 26 1a 	call	0x344c	; 0x344c <TIMER1_voidCaptureInterruptDisable>
        global_u8Flag = 3;
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	80 93 b1 01 	sts	0x01B1, r24
    }
}
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	08 95       	ret

00003838 <TIMER0_voidInit>:

static void (*TIMER0_OVF_CallBack)(void) = NULLPTR;
static void (*TIMER0_CTC_CallBack)(void) = NULLPTR;

void TIMER0_voidInit(TIMER0_Mode mode, TIMER0_Prescaler prescaler, TIMER0_Compare compare)
{
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	00 d0       	rcall	.+0      	; 0x383e <TIMER0_voidInit+0x6>
    383e:	00 d0       	rcall	.+0      	; 0x3840 <TIMER0_voidInit+0x8>
    3840:	0f 92       	push	r0
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	89 83       	std	Y+1, r24	; 0x01
    3848:	6a 83       	std	Y+2, r22	; 0x02
    384a:	4b 83       	std	Y+3, r20	; 0x03
    switch (mode)
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	28 2f       	mov	r18, r24
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	3d 83       	std	Y+5, r19	; 0x05
    3854:	2c 83       	std	Y+4, r18	; 0x04
    3856:	8c 81       	ldd	r24, Y+4	; 0x04
    3858:	9d 81       	ldd	r25, Y+5	; 0x05
    385a:	81 30       	cpi	r24, 0x01	; 1
    385c:	91 05       	cpc	r25, r1
    385e:	61 f1       	breq	.+88     	; 0x38b8 <TIMER0_voidInit+0x80>
    3860:	2c 81       	ldd	r18, Y+4	; 0x04
    3862:	3d 81       	ldd	r19, Y+5	; 0x05
    3864:	22 30       	cpi	r18, 0x02	; 2
    3866:	31 05       	cpc	r19, r1
    3868:	2c f4       	brge	.+10     	; 0x3874 <TIMER0_voidInit+0x3c>
    386a:	8c 81       	ldd	r24, Y+4	; 0x04
    386c:	9d 81       	ldd	r25, Y+5	; 0x05
    386e:	00 97       	sbiw	r24, 0x00	; 0
    3870:	69 f0       	breq	.+26     	; 0x388c <TIMER0_voidInit+0x54>
    3872:	63 c0       	rjmp	.+198    	; 0x393a <TIMER0_voidInit+0x102>
    3874:	2c 81       	ldd	r18, Y+4	; 0x04
    3876:	3d 81       	ldd	r19, Y+5	; 0x05
    3878:	22 30       	cpi	r18, 0x02	; 2
    387a:	31 05       	cpc	r19, r1
    387c:	99 f1       	breq	.+102    	; 0x38e4 <TIMER0_voidInit+0xac>
    387e:	8c 81       	ldd	r24, Y+4	; 0x04
    3880:	9d 81       	ldd	r25, Y+5	; 0x05
    3882:	83 30       	cpi	r24, 0x03	; 3
    3884:	91 05       	cpc	r25, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <TIMER0_voidInit+0x52>
    3888:	43 c0       	rjmp	.+134    	; 0x3910 <TIMER0_voidInit+0xd8>
    388a:	57 c0       	rjmp	.+174    	; 0x393a <TIMER0_voidInit+0x102>
    {
    case TIMER0_NORMAL_MODE:
        SET_BIT(TCCR0, FOC0);
    388c:	a3 e5       	ldi	r26, 0x53	; 83
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	e3 e5       	ldi	r30, 0x53	; 83
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	80 68       	ori	r24, 0x80	; 128
    3898:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, WGM00);
    389a:	a3 e5       	ldi	r26, 0x53	; 83
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	e3 e5       	ldi	r30, 0x53	; 83
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	80 81       	ld	r24, Z
    38a4:	8f 7b       	andi	r24, 0xBF	; 191
    38a6:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, WGM01);
    38a8:	a3 e5       	ldi	r26, 0x53	; 83
    38aa:	b0 e0       	ldi	r27, 0x00	; 0
    38ac:	e3 e5       	ldi	r30, 0x53	; 83
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	80 81       	ld	r24, Z
    38b2:	87 7f       	andi	r24, 0xF7	; 247
    38b4:	8c 93       	st	X, r24
    38b6:	41 c0       	rjmp	.+130    	; 0x393a <TIMER0_voidInit+0x102>
        break;

    case TIMER0_PHASE_CORRECT_MODE:
        CLR_BIT(TCCR0, FOC0);
    38b8:	a3 e5       	ldi	r26, 0x53	; 83
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	e3 e5       	ldi	r30, 0x53	; 83
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	80 81       	ld	r24, Z
    38c2:	8f 77       	andi	r24, 0x7F	; 127
    38c4:	8c 93       	st	X, r24
        SET_BIT(TCCR0, WGM00);
    38c6:	a3 e5       	ldi	r26, 0x53	; 83
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	e3 e5       	ldi	r30, 0x53	; 83
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	80 81       	ld	r24, Z
    38d0:	80 64       	ori	r24, 0x40	; 64
    38d2:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, WGM01);
    38d4:	a3 e5       	ldi	r26, 0x53	; 83
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	e3 e5       	ldi	r30, 0x53	; 83
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	80 81       	ld	r24, Z
    38de:	87 7f       	andi	r24, 0xF7	; 247
    38e0:	8c 93       	st	X, r24
    38e2:	2b c0       	rjmp	.+86     	; 0x393a <TIMER0_voidInit+0x102>
        break;

    case TIMER0_CTC_MODE:
        SET_BIT(TCCR0, FOC0);
    38e4:	a3 e5       	ldi	r26, 0x53	; 83
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	e3 e5       	ldi	r30, 0x53	; 83
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	80 81       	ld	r24, Z
    38ee:	80 68       	ori	r24, 0x80	; 128
    38f0:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, WGM00);
    38f2:	a3 e5       	ldi	r26, 0x53	; 83
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	e3 e5       	ldi	r30, 0x53	; 83
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	80 81       	ld	r24, Z
    38fc:	8f 7b       	andi	r24, 0xBF	; 191
    38fe:	8c 93       	st	X, r24
        SET_BIT(TCCR0, WGM01);
    3900:	a3 e5       	ldi	r26, 0x53	; 83
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	e3 e5       	ldi	r30, 0x53	; 83
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	88 60       	ori	r24, 0x08	; 8
    390c:	8c 93       	st	X, r24
    390e:	15 c0       	rjmp	.+42     	; 0x393a <TIMER0_voidInit+0x102>
        break;

    case TIMER0_FAST_PWM_MODE:
        CLR_BIT(TCCR0, FOC0);
    3910:	a3 e5       	ldi	r26, 0x53	; 83
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	e3 e5       	ldi	r30, 0x53	; 83
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	8f 77       	andi	r24, 0x7F	; 127
    391c:	8c 93       	st	X, r24
        SET_BIT(TCCR0, WGM00);
    391e:	a3 e5       	ldi	r26, 0x53	; 83
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e3 e5       	ldi	r30, 0x53	; 83
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	80 64       	ori	r24, 0x40	; 64
    392a:	8c 93       	st	X, r24
        SET_BIT(TCCR0, WGM01);
    392c:	a3 e5       	ldi	r26, 0x53	; 83
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	e3 e5       	ldi	r30, 0x53	; 83
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	88 60       	ori	r24, 0x08	; 8
    3938:	8c 93       	st	X, r24
    }

    // note:  prescaler must be the last initalization step
    // because it make circuit to start  working
    // Clk & Compare Output Mode
    TCCR0 &= (~(0b111 << CS00)) & (~(0b11 << COM00));
    393a:	a3 e5       	ldi	r26, 0x53	; 83
    393c:	b0 e0       	ldi	r27, 0x00	; 0
    393e:	e3 e5       	ldi	r30, 0x53	; 83
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	80 81       	ld	r24, Z
    3944:	88 7c       	andi	r24, 0xC8	; 200
    3946:	8c 93       	st	X, r24
    TCCR0 |= ((compare << COM00) | (prescaler << CS00));
    3948:	a3 e5       	ldi	r26, 0x53	; 83
    394a:	b0 e0       	ldi	r27, 0x00	; 0
    394c:	e3 e5       	ldi	r30, 0x53	; 83
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	28 2f       	mov	r18, r24
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	88 2f       	mov	r24, r24
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	82 95       	swap	r24
    395c:	92 95       	swap	r25
    395e:	90 7f       	andi	r25, 0xF0	; 240
    3960:	98 27       	eor	r25, r24
    3962:	80 7f       	andi	r24, 0xF0	; 240
    3964:	98 27       	eor	r25, r24
    3966:	98 2f       	mov	r25, r24
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	89 2b       	or	r24, r25
    396c:	82 2b       	or	r24, r18
    396e:	8c 93       	st	X, r24
}
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <TIMER0_voidOverFlowInterruptEnable>:

/******************************************/
// Interrupt Enable/Disable
void TIMER0_voidOverFlowInterruptEnable()
{
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE0);
    3988:	a9 e5       	ldi	r26, 0x59	; 89
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e9 e5       	ldi	r30, 0x59	; 89
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	81 60       	ori	r24, 0x01	; 1
    3994:	8c 93       	st	X, r24
}
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <TIMER0_voidOverFlowInterruptDisable>:
void TIMER0_voidOverFlowInterruptDisable()
{
    399c:	df 93       	push	r29
    399e:	cf 93       	push	r28
    39a0:	cd b7       	in	r28, 0x3d	; 61
    39a2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE0);
    39a4:	a9 e5       	ldi	r26, 0x59	; 89
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e9 e5       	ldi	r30, 0x59	; 89
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	8e 7f       	andi	r24, 0xFE	; 254
    39b0:	8c 93       	st	X, r24
}
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	08 95       	ret

000039b8 <TIMER0_voidCompareInterruptEnable>:

void TIMER0_voidCompareInterruptEnable()
{
    39b8:	df 93       	push	r29
    39ba:	cf 93       	push	r28
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE0);
    39c0:	a9 e5       	ldi	r26, 0x59	; 89
    39c2:	b0 e0       	ldi	r27, 0x00	; 0
    39c4:	e9 e5       	ldi	r30, 0x59	; 89
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	80 81       	ld	r24, Z
    39ca:	82 60       	ori	r24, 0x02	; 2
    39cc:	8c 93       	st	X, r24
}
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	08 95       	ret

000039d4 <TIMER0_voidCompareInterruptDisable>:
void TIMER0_voidCompareInterruptDisable()
{
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE0);
    39dc:	a9 e5       	ldi	r26, 0x59	; 89
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e9 e5       	ldi	r30, 0x59	; 89
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	8d 7f       	andi	r24, 0xFD	; 253
    39e8:	8c 93       	st	X, r24
}
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <TIMER0_voidSetPreLoad>:
/******************************************/

void TIMER0_voidSetPreLoad(u8 A_u8PreLoadValue)
{
    39f0:	df 93       	push	r29
    39f2:	cf 93       	push	r28
    39f4:	0f 92       	push	r0
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = A_u8PreLoadValue;
    39fc:	e2 e5       	ldi	r30, 0x52	; 82
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	80 83       	st	Z, r24
}
    3a04:	0f 90       	pop	r0
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <TIMER0_voidSetOCR0>:

void TIMER0_voidSetOCR0(u8 A_u8OCR0)
{
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	0f 92       	push	r0
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = A_u8OCR0;
    3a18:	ec e5       	ldi	r30, 0x5C	; 92
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	80 83       	st	Z, r24
}
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <TIMER0_voidOVFSetCallBack>:

/*Interrupt Section*/
void TIMER0_voidOVFSetCallBack(void (*pf)(void))
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <TIMER0_voidOVFSetCallBack+0x6>
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	9a 83       	std	Y+2, r25	; 0x02
    3a34:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OVF_CallBack = pf;
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3a:	90 93 b6 01 	sts	0x01B6, r25
    3a3e:	80 93 b5 01 	sts	0x01B5, r24
}
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <TIMER0_voidCTCSetCallBack>:

void TIMER0_voidCTCSetCallBack(void (*pf)(void))
{
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <TIMER0_voidCTCSetCallBack+0x6>
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	9a 83       	std	Y+2, r25	; 0x02
    3a58:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_CTC_CallBack = pf;
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5e:	90 93 b8 01 	sts	0x01B8, r25
    3a62:	80 93 b7 01 	sts	0x01B7, r24
}
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	08 95       	ret

00003a70 <__vector_11>:

ISR(TIMER0_OVF_VECT)
{
    3a70:	1f 92       	push	r1
    3a72:	0f 92       	push	r0
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	0f 92       	push	r0
    3a78:	11 24       	eor	r1, r1
    3a7a:	2f 93       	push	r18
    3a7c:	3f 93       	push	r19
    3a7e:	4f 93       	push	r20
    3a80:	5f 93       	push	r21
    3a82:	6f 93       	push	r22
    3a84:	7f 93       	push	r23
    3a86:	8f 93       	push	r24
    3a88:	9f 93       	push	r25
    3a8a:	af 93       	push	r26
    3a8c:	bf 93       	push	r27
    3a8e:	ef 93       	push	r30
    3a90:	ff 93       	push	r31
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    if (TIMER0_OVF_CallBack != NULLPTR)
    3a9a:	80 91 b5 01 	lds	r24, 0x01B5
    3a9e:	90 91 b6 01 	lds	r25, 0x01B6
    3aa2:	00 97       	sbiw	r24, 0x00	; 0
    3aa4:	29 f0       	breq	.+10     	; 0x3ab0 <__vector_11+0x40>
        TIMER0_OVF_CallBack();
    3aa6:	e0 91 b5 01 	lds	r30, 0x01B5
    3aaa:	f0 91 b6 01 	lds	r31, 0x01B6
    3aae:	09 95       	icall
}
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	ff 91       	pop	r31
    3ab6:	ef 91       	pop	r30
    3ab8:	bf 91       	pop	r27
    3aba:	af 91       	pop	r26
    3abc:	9f 91       	pop	r25
    3abe:	8f 91       	pop	r24
    3ac0:	7f 91       	pop	r23
    3ac2:	6f 91       	pop	r22
    3ac4:	5f 91       	pop	r21
    3ac6:	4f 91       	pop	r20
    3ac8:	3f 91       	pop	r19
    3aca:	2f 91       	pop	r18
    3acc:	0f 90       	pop	r0
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	0f 90       	pop	r0
    3ad2:	1f 90       	pop	r1
    3ad4:	18 95       	reti

00003ad6 <__vector_10>:

ISR(TIMER0_CTC_VECT)
{
    3ad6:	1f 92       	push	r1
    3ad8:	0f 92       	push	r0
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	0f 92       	push	r0
    3ade:	11 24       	eor	r1, r1
    3ae0:	2f 93       	push	r18
    3ae2:	3f 93       	push	r19
    3ae4:	4f 93       	push	r20
    3ae6:	5f 93       	push	r21
    3ae8:	6f 93       	push	r22
    3aea:	7f 93       	push	r23
    3aec:	8f 93       	push	r24
    3aee:	9f 93       	push	r25
    3af0:	af 93       	push	r26
    3af2:	bf 93       	push	r27
    3af4:	ef 93       	push	r30
    3af6:	ff 93       	push	r31
    3af8:	df 93       	push	r29
    3afa:	cf 93       	push	r28
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    if (TIMER0_CTC_CallBack != NULLPTR)
    3b00:	80 91 b7 01 	lds	r24, 0x01B7
    3b04:	90 91 b8 01 	lds	r25, 0x01B8
    3b08:	00 97       	sbiw	r24, 0x00	; 0
    3b0a:	29 f0       	breq	.+10     	; 0x3b16 <__vector_10+0x40>
        TIMER0_CTC_CallBack();
    3b0c:	e0 91 b7 01 	lds	r30, 0x01B7
    3b10:	f0 91 b8 01 	lds	r31, 0x01B8
    3b14:	09 95       	icall
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	ff 91       	pop	r31
    3b1c:	ef 91       	pop	r30
    3b1e:	bf 91       	pop	r27
    3b20:	af 91       	pop	r26
    3b22:	9f 91       	pop	r25
    3b24:	8f 91       	pop	r24
    3b26:	7f 91       	pop	r23
    3b28:	6f 91       	pop	r22
    3b2a:	5f 91       	pop	r21
    3b2c:	4f 91       	pop	r20
    3b2e:	3f 91       	pop	r19
    3b30:	2f 91       	pop	r18
    3b32:	0f 90       	pop	r0
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	0f 90       	pop	r0
    3b38:	1f 90       	pop	r1
    3b3a:	18 95       	reti

00003b3c <SPI_voidInit>:
#include "./SPI_Configurations.h"

static void (*SPI_INT)(void) = NULLPTR;

void SPI_voidInit()
{
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
#if (SPI_MODE_SELECT == SPI_MASTER)
    SET_BIT(SPCR, MSTR);
    3b44:	ad e2       	ldi	r26, 0x2D	; 45
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	ed e2       	ldi	r30, 0x2D	; 45
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	80 61       	ori	r24, 0x10	; 16
    3b50:	8c 93       	st	X, r24
#endif

#if (CLK_PHASE_SPI == SAMPLE_THEN_SETUP_SPI)
    CLR_BIT(SPCR, CPHA);
#else
    SET_BIT(SPCR, CPHA);
    3b52:	ad e2       	ldi	r26, 0x2D	; 45
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	ed e2       	ldi	r30, 0x2D	; 45
    3b58:	f0 e0       	ldi	r31, 0x00	; 0
    3b5a:	80 81       	ld	r24, Z
    3b5c:	84 60       	ori	r24, 0x04	; 4
    3b5e:	8c 93       	st	X, r24
#endif

#if (CLK_POLARITY_SPI == RISING_THEN_FALLING_SPI)
    CLR_BIT(SPCR, CPOL);
    3b60:	ad e2       	ldi	r26, 0x2D	; 45
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	ed e2       	ldi	r30, 0x2D	; 45
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	87 7f       	andi	r24, 0xF7	; 247
    3b6c:	8c 93       	st	X, r24
#else
    SET_BIT(SPCR, CPOL)
#endif

#if (SPI_DATA_ORDER == SPI_LSB_FIRST)
    SET_BIT(SPCR, DORD);
    3b6e:	ad e2       	ldi	r26, 0x2D	; 45
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	ed e2       	ldi	r30, 0x2D	; 45
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	80 62       	ori	r24, 0x20	; 32
    3b7a:	8c 93       	st	X, r24
#elif (SPI_CLK_RATE == SPI_CLK_OVER_8)
    SET_BIT(SPCR, SPR0);
    CLR_BIT(SPCR, SPR1);
    SET_BIT(SPSR, SPI2X);
#elif (SPI_CLK_RATE == SPI_CLK_OVER_16)
    SET_BIT(SPCR, SPR0);
    3b7c:	ad e2       	ldi	r26, 0x2D	; 45
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	ed e2       	ldi	r30, 0x2D	; 45
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	81 60       	ori	r24, 0x01	; 1
    3b88:	8c 93       	st	X, r24
    CLR_BIT(SPCR, SPR1);
    3b8a:	ad e2       	ldi	r26, 0x2D	; 45
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	ed e2       	ldi	r30, 0x2D	; 45
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	8d 7f       	andi	r24, 0xFD	; 253
    3b96:	8c 93       	st	X, r24
    CLR_BIT(SPSR, SPI2X);
    3b98:	ae e2       	ldi	r26, 0x2E	; 46
    3b9a:	b0 e0       	ldi	r27, 0x00	; 0
    3b9c:	ee e2       	ldi	r30, 0x2E	; 46
    3b9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ba0:	80 81       	ld	r24, Z
    3ba2:	8e 7f       	andi	r24, 0xFE	; 254
    3ba4:	8c 93       	st	X, r24

    /*
        it must be done after any initialization step
        or do it in the last step like here
    */
    SET_BIT(SPCR, SPE);
    3ba6:	ad e2       	ldi	r26, 0x2D	; 45
    3ba8:	b0 e0       	ldi	r27, 0x00	; 0
    3baa:	ed e2       	ldi	r30, 0x2D	; 45
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 81       	ld	r24, Z
    3bb0:	80 64       	ori	r24, 0x40	; 64
    3bb2:	8c 93       	st	X, r24
}
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	08 95       	ret

00003bba <SPI_u8SendRecieveData>:

u8 SPI_u8SendRecieveData(u8 A_u8Send)
{
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	0f 92       	push	r0
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	89 83       	std	Y+1, r24	; 0x01
    SPDR = A_u8Send;
    3bc6:	ef e2       	ldi	r30, 0x2F	; 47
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	80 83       	st	Z, r24
    // polling until the register to be shifted in slave/master
    while (GET_BIT(SPSR, SPIF) == 0)
    3bce:	ee e2       	ldi	r30, 0x2E	; 46
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
    3bd4:	88 2f       	mov	r24, r24
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	9c 01       	movw	r18, r24
    3bda:	2f 77       	andi	r18, 0x7F	; 127
    3bdc:	ee e2       	ldi	r30, 0x2E	; 46
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	88 2f       	mov	r24, r24
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	28 17       	cp	r18, r24
    3be8:	39 07       	cpc	r19, r25
    3bea:	89 f3       	breq	.-30     	; 0x3bce <SPI_u8SendRecieveData+0x14>
        ;
    return SPDR;
    3bec:	ef e2       	ldi	r30, 0x2F	; 47
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
}
    3bf2:	0f 90       	pop	r0
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <SPI_voidInterruptEnable>:
/******************************************Interrupt Section*********************************/
void SPI_voidInterruptEnable()
{
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SPCR, SPIE);
    3c02:	ad e2       	ldi	r26, 0x2D	; 45
    3c04:	b0 e0       	ldi	r27, 0x00	; 0
    3c06:	ed e2       	ldi	r30, 0x2D	; 45
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	80 81       	ld	r24, Z
    3c0c:	80 68       	ori	r24, 0x80	; 128
    3c0e:	8c 93       	st	X, r24
}
    3c10:	cf 91       	pop	r28
    3c12:	df 91       	pop	r29
    3c14:	08 95       	ret

00003c16 <SPI_voidInterruptDisable>:

void SPI_voidInterruptDisable()
{
    3c16:	df 93       	push	r29
    3c18:	cf 93       	push	r28
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SPCR, SPIE);
    3c1e:	ad e2       	ldi	r26, 0x2D	; 45
    3c20:	b0 e0       	ldi	r27, 0x00	; 0
    3c22:	ed e2       	ldi	r30, 0x2D	; 45
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	80 81       	ld	r24, Z
    3c28:	8f 77       	andi	r24, 0x7F	; 127
    3c2a:	8c 93       	st	X, r24
}
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <SPI_voidSetCallBack>:

void SPI_voidSetCallBack(void (*pf)(void))
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	00 d0       	rcall	.+0      	; 0x3c38 <SPI_voidSetCallBack+0x6>
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
    SPI_INT = pf;
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	9a 81       	ldd	r25, Y+2	; 0x02
    3c44:	90 93 ba 01 	sts	0x01BA, r25
    3c48:	80 93 b9 01 	sts	0x01B9, r24
}
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	cf 91       	pop	r28
    3c52:	df 91       	pop	r29
    3c54:	08 95       	ret

00003c56 <__vector_12>:

ISR(SPI_VECT)
{
    3c56:	1f 92       	push	r1
    3c58:	0f 92       	push	r0
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	0f 92       	push	r0
    3c5e:	11 24       	eor	r1, r1
    3c60:	2f 93       	push	r18
    3c62:	3f 93       	push	r19
    3c64:	4f 93       	push	r20
    3c66:	5f 93       	push	r21
    3c68:	6f 93       	push	r22
    3c6a:	7f 93       	push	r23
    3c6c:	8f 93       	push	r24
    3c6e:	9f 93       	push	r25
    3c70:	af 93       	push	r26
    3c72:	bf 93       	push	r27
    3c74:	ef 93       	push	r30
    3c76:	ff 93       	push	r31
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    if (SPI_INT != NULLPTR)
    3c80:	80 91 b9 01 	lds	r24, 0x01B9
    3c84:	90 91 ba 01 	lds	r25, 0x01BA
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	29 f0       	breq	.+10     	; 0x3c96 <__vector_12+0x40>
        SPI_INT();
    3c8c:	e0 91 b9 01 	lds	r30, 0x01B9
    3c90:	f0 91 ba 01 	lds	r31, 0x01BA
    3c94:	09 95       	icall
}
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	ff 91       	pop	r31
    3c9c:	ef 91       	pop	r30
    3c9e:	bf 91       	pop	r27
    3ca0:	af 91       	pop	r26
    3ca2:	9f 91       	pop	r25
    3ca4:	8f 91       	pop	r24
    3ca6:	7f 91       	pop	r23
    3ca8:	6f 91       	pop	r22
    3caa:	5f 91       	pop	r21
    3cac:	4f 91       	pop	r20
    3cae:	3f 91       	pop	r19
    3cb0:	2f 91       	pop	r18
    3cb2:	0f 90       	pop	r0
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	0f 90       	pop	r0
    3cb8:	1f 90       	pop	r1
    3cba:	18 95       	reti

00003cbc <EXTI_voidConfig>:
static void (*EXTI0_CallBack)(void) = NULLPTR;
static void (*EXTI1_CallBack)(void) = NULLPTR;
static void (*EXTI2_CallBack)(void) = NULLPTR;

void EXTI_voidConfig(u8 A_u8EXTINo, u8 A_u8SenseMode)
{
    3cbc:	df 93       	push	r29
    3cbe:	cf 93       	push	r28
    3cc0:	00 d0       	rcall	.+0      	; 0x3cc2 <EXTI_voidConfig+0x6>
    3cc2:	00 d0       	rcall	.+0      	; 0x3cc4 <EXTI_voidConfig+0x8>
    3cc4:	00 d0       	rcall	.+0      	; 0x3cc6 <EXTI_voidConfig+0xa>
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	89 83       	std	Y+1, r24	; 0x01
    3ccc:	6a 83       	std	Y+2, r22	; 0x02
    if (A_u8SenseMode < 4)
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	84 30       	cpi	r24, 0x04	; 4
    3cd2:	08 f0       	brcs	.+2      	; 0x3cd6 <EXTI_voidConfig+0x1a>
    3cd4:	5a c0       	rjmp	.+180    	; 0x3d8a <EXTI_voidConfig+0xce>
    {
        switch (A_u8EXTINo)
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	28 2f       	mov	r18, r24
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	3e 83       	std	Y+6, r19	; 0x06
    3cde:	2d 83       	std	Y+5, r18	; 0x05
    3ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce4:	81 30       	cpi	r24, 0x01	; 1
    3ce6:	91 05       	cpc	r25, r1
    3ce8:	d1 f0       	breq	.+52     	; 0x3d1e <EXTI_voidConfig+0x62>
    3cea:	2d 81       	ldd	r18, Y+5	; 0x05
    3cec:	3e 81       	ldd	r19, Y+6	; 0x06
    3cee:	22 30       	cpi	r18, 0x02	; 2
    3cf0:	31 05       	cpc	r19, r1
    3cf2:	61 f1       	breq	.+88     	; 0x3d4c <EXTI_voidConfig+0x90>
    3cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	09 f0       	breq	.+2      	; 0x3cfe <EXTI_voidConfig+0x42>
    3cfc:	46 c0       	rjmp	.+140    	; 0x3d8a <EXTI_voidConfig+0xce>
        {
        case EXTI0:
            MCUCR &= ~(SENSE_MODE_MASK << ISC00); // clearing bits
    3cfe:	a5 e5       	ldi	r26, 0x55	; 85
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	e5 e5       	ldi	r30, 0x55	; 85
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	8c 7f       	andi	r24, 0xFC	; 252
    3d0a:	8c 93       	st	X, r24
            MCUCR |= (A_u8SenseMode << ISC00);    // puting values
    3d0c:	a5 e5       	ldi	r26, 0x55	; 85
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e5 e5       	ldi	r30, 0x55	; 85
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	90 81       	ld	r25, Z
    3d16:	8a 81       	ldd	r24, Y+2	; 0x02
    3d18:	89 2b       	or	r24, r25
    3d1a:	8c 93       	st	X, r24
    3d1c:	36 c0       	rjmp	.+108    	; 0x3d8a <EXTI_voidConfig+0xce>
            break;

        case EXTI1:
            MCUCR &= ~(SENSE_MODE_MASK << ISC10); // clearing bits
    3d1e:	a5 e5       	ldi	r26, 0x55	; 85
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	e5 e5       	ldi	r30, 0x55	; 85
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	83 7f       	andi	r24, 0xF3	; 243
    3d2a:	8c 93       	st	X, r24
            MCUCR |= (A_u8SenseMode << ISC10);    // puting values
    3d2c:	a5 e5       	ldi	r26, 0x55	; 85
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	e5 e5       	ldi	r30, 0x55	; 85
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	28 2f       	mov	r18, r24
    3d38:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3a:	88 2f       	mov	r24, r24
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	82 2b       	or	r24, r18
    3d48:	8c 93       	st	X, r24
    3d4a:	1f c0       	rjmp	.+62     	; 0x3d8a <EXTI_voidConfig+0xce>
            break;

        case EXTI2:
            switch (A_u8SenseMode)
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	3c 83       	std	Y+4, r19	; 0x04
    3d54:	2b 83       	std	Y+3, r18	; 0x03
    3d56:	8b 81       	ldd	r24, Y+3	; 0x03
    3d58:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5a:	82 30       	cpi	r24, 0x02	; 2
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	31 f0       	breq	.+12     	; 0x3d6c <EXTI_voidConfig+0xb0>
    3d60:	2b 81       	ldd	r18, Y+3	; 0x03
    3d62:	3c 81       	ldd	r19, Y+4	; 0x04
    3d64:	23 30       	cpi	r18, 0x03	; 3
    3d66:	31 05       	cpc	r19, r1
    3d68:	49 f0       	breq	.+18     	; 0x3d7c <EXTI_voidConfig+0xc0>
    3d6a:	0f c0       	rjmp	.+30     	; 0x3d8a <EXTI_voidConfig+0xce>
            {
            case FALLING_EDGE:
                CLR_BIT(MCUCSR, ISC2);
    3d6c:	a4 e5       	ldi	r26, 0x54	; 84
    3d6e:	b0 e0       	ldi	r27, 0x00	; 0
    3d70:	e4 e5       	ldi	r30, 0x54	; 84
    3d72:	f0 e0       	ldi	r31, 0x00	; 0
    3d74:	80 81       	ld	r24, Z
    3d76:	8f 7b       	andi	r24, 0xBF	; 191
    3d78:	8c 93       	st	X, r24
    3d7a:	07 c0       	rjmp	.+14     	; 0x3d8a <EXTI_voidConfig+0xce>
                break;

            case RISING_EDGE:
                SET_BIT(MCUCSR, ISC2);
    3d7c:	a4 e5       	ldi	r26, 0x54	; 84
    3d7e:	b0 e0       	ldi	r27, 0x00	; 0
    3d80:	e4 e5       	ldi	r30, 0x54	; 84
    3d82:	f0 e0       	ldi	r31, 0x00	; 0
    3d84:	80 81       	ld	r24, Z
    3d86:	80 64       	ori	r24, 0x40	; 64
    3d88:	8c 93       	st	X, r24

        default:
            break;
        }
    }
}
    3d8a:	26 96       	adiw	r28, 0x06	; 6
    3d8c:	0f b6       	in	r0, 0x3f	; 63
    3d8e:	f8 94       	cli
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	0f be       	out	0x3f, r0	; 63
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <EXTI_voidEnable>:

void EXTI_voidEnable(u8 A_u8EXTI)
{
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <EXTI_voidEnable+0x6>
    3da2:	0f 92       	push	r0
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8EXTI)
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	3b 83       	std	Y+3, r19	; 0x03
    3db2:	2a 83       	std	Y+2, r18	; 0x02
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	9b 81       	ldd	r25, Y+3	; 0x03
    3db8:	81 30       	cpi	r24, 0x01	; 1
    3dba:	91 05       	cpc	r25, r1
    3dbc:	89 f0       	breq	.+34     	; 0x3de0 <EXTI_voidEnable+0x44>
    3dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    3dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    3dc2:	22 30       	cpi	r18, 0x02	; 2
    3dc4:	31 05       	cpc	r19, r1
    3dc6:	a1 f0       	breq	.+40     	; 0x3df0 <EXTI_voidEnable+0x54>
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	00 97       	sbiw	r24, 0x00	; 0
    3dce:	b9 f4       	brne	.+46     	; 0x3dfe <EXTI_voidEnable+0x62>
    {
    case EXTI0:
        SET_BIT(GICR, INT0);
    3dd0:	ab e5       	ldi	r26, 0x5B	; 91
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	eb e5       	ldi	r30, 0x5B	; 91
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	80 81       	ld	r24, Z
    3dda:	80 64       	ori	r24, 0x40	; 64
    3ddc:	8c 93       	st	X, r24
    3dde:	0f c0       	rjmp	.+30     	; 0x3dfe <EXTI_voidEnable+0x62>
        break;
    case EXTI1:
        SET_BIT(GICR, INT1);
    3de0:	ab e5       	ldi	r26, 0x5B	; 91
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	eb e5       	ldi	r30, 0x5B	; 91
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	80 68       	ori	r24, 0x80	; 128
    3dec:	8c 93       	st	X, r24
    3dee:	07 c0       	rjmp	.+14     	; 0x3dfe <EXTI_voidEnable+0x62>
        break;
    case EXTI2:
        SET_BIT(GICR, INT2);
    3df0:	ab e5       	ldi	r26, 0x5B	; 91
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	eb e5       	ldi	r30, 0x5B	; 91
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	80 81       	ld	r24, Z
    3dfa:	80 62       	ori	r24, 0x20	; 32
    3dfc:	8c 93       	st	X, r24
        break;
    }
}
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	cf 91       	pop	r28
    3e06:	df 91       	pop	r29
    3e08:	08 95       	ret

00003e0a <EXTI_voidDisable>:

void EXTI_voidDisable(u8 A_u8EXTI)
{
    3e0a:	df 93       	push	r29
    3e0c:	cf 93       	push	r28
    3e0e:	00 d0       	rcall	.+0      	; 0x3e10 <EXTI_voidDisable+0x6>
    3e10:	0f 92       	push	r0
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8EXTI)
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	28 2f       	mov	r18, r24
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	3b 83       	std	Y+3, r19	; 0x03
    3e20:	2a 83       	std	Y+2, r18	; 0x02
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	9b 81       	ldd	r25, Y+3	; 0x03
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	91 05       	cpc	r25, r1
    3e2a:	89 f0       	breq	.+34     	; 0x3e4e <EXTI_voidDisable+0x44>
    3e2c:	2a 81       	ldd	r18, Y+2	; 0x02
    3e2e:	3b 81       	ldd	r19, Y+3	; 0x03
    3e30:	22 30       	cpi	r18, 0x02	; 2
    3e32:	31 05       	cpc	r19, r1
    3e34:	a1 f0       	breq	.+40     	; 0x3e5e <EXTI_voidDisable+0x54>
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	b9 f4       	brne	.+46     	; 0x3e6c <EXTI_voidDisable+0x62>
    {
    case EXTI0:
        CLR_BIT(GICR, INT0);
    3e3e:	ab e5       	ldi	r26, 0x5B	; 91
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	eb e5       	ldi	r30, 0x5B	; 91
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 81       	ld	r24, Z
    3e48:	8f 7b       	andi	r24, 0xBF	; 191
    3e4a:	8c 93       	st	X, r24
    3e4c:	0f c0       	rjmp	.+30     	; 0x3e6c <EXTI_voidDisable+0x62>
        break;
    case EXTI1:
        CLR_BIT(GICR, INT1);
    3e4e:	ab e5       	ldi	r26, 0x5B	; 91
    3e50:	b0 e0       	ldi	r27, 0x00	; 0
    3e52:	eb e5       	ldi	r30, 0x5B	; 91
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	80 81       	ld	r24, Z
    3e58:	8f 77       	andi	r24, 0x7F	; 127
    3e5a:	8c 93       	st	X, r24
    3e5c:	07 c0       	rjmp	.+14     	; 0x3e6c <EXTI_voidDisable+0x62>
        break;
    case EXTI2:
        CLR_BIT(GICR, INT2);
    3e5e:	ab e5       	ldi	r26, 0x5B	; 91
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	eb e5       	ldi	r30, 0x5B	; 91
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	8f 7d       	andi	r24, 0xDF	; 223
    3e6a:	8c 93       	st	X, r24
        break;
    }
}
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	cf 91       	pop	r28
    3e74:	df 91       	pop	r29
    3e76:	08 95       	ret

00003e78 <EXTI_voidClearFlag>:

void EXTI_voidClearFlag(u8 A_u8EXTI)
{
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <EXTI_voidClearFlag+0x6>
    3e7e:	0f 92       	push	r0
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8EXTI)
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	3b 83       	std	Y+3, r19	; 0x03
    3e8e:	2a 83       	std	Y+2, r18	; 0x02
    3e90:	8a 81       	ldd	r24, Y+2	; 0x02
    3e92:	9b 81       	ldd	r25, Y+3	; 0x03
    3e94:	81 30       	cpi	r24, 0x01	; 1
    3e96:	91 05       	cpc	r25, r1
    3e98:	89 f0       	breq	.+34     	; 0x3ebc <EXTI_voidClearFlag+0x44>
    3e9a:	2a 81       	ldd	r18, Y+2	; 0x02
    3e9c:	3b 81       	ldd	r19, Y+3	; 0x03
    3e9e:	22 30       	cpi	r18, 0x02	; 2
    3ea0:	31 05       	cpc	r19, r1
    3ea2:	a1 f0       	breq	.+40     	; 0x3ecc <EXTI_voidClearFlag+0x54>
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea8:	00 97       	sbiw	r24, 0x00	; 0
    3eaa:	b9 f4       	brne	.+46     	; 0x3eda <EXTI_voidClearFlag+0x62>
    {
    case EXTI0:
        SET_BIT(GIFR, INTF0);
    3eac:	aa e5       	ldi	r26, 0x5A	; 90
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	ea e5       	ldi	r30, 0x5A	; 90
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	80 81       	ld	r24, Z
    3eb6:	80 64       	ori	r24, 0x40	; 64
    3eb8:	8c 93       	st	X, r24
    3eba:	0f c0       	rjmp	.+30     	; 0x3eda <EXTI_voidClearFlag+0x62>
        break;
    case EXTI1:
        SET_BIT(GIFR, INTF1);
    3ebc:	aa e5       	ldi	r26, 0x5A	; 90
    3ebe:	b0 e0       	ldi	r27, 0x00	; 0
    3ec0:	ea e5       	ldi	r30, 0x5A	; 90
    3ec2:	f0 e0       	ldi	r31, 0x00	; 0
    3ec4:	80 81       	ld	r24, Z
    3ec6:	80 68       	ori	r24, 0x80	; 128
    3ec8:	8c 93       	st	X, r24
    3eca:	07 c0       	rjmp	.+14     	; 0x3eda <EXTI_voidClearFlag+0x62>
        break;
    case EXTI2:
        SET_BIT(GIFR, INTF2);
    3ecc:	aa e5       	ldi	r26, 0x5A	; 90
    3ece:	b0 e0       	ldi	r27, 0x00	; 0
    3ed0:	ea e5       	ldi	r30, 0x5A	; 90
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 62       	ori	r24, 0x20	; 32
    3ed8:	8c 93       	st	X, r24
        break;
    }
}
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	08 95       	ret

00003ee6 <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(u8 A_u8EXTI, void (*ptrToFunc)(void))
{
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	00 d0       	rcall	.+0      	; 0x3eec <EXTI_voidSetCallBack+0x6>
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <EXTI_voidSetCallBack+0x8>
    3eee:	0f 92       	push	r0
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
    3ef4:	89 83       	std	Y+1, r24	; 0x01
    3ef6:	7b 83       	std	Y+3, r23	; 0x03
    3ef8:	6a 83       	std	Y+2, r22	; 0x02
    if (ptrToFunc != NULL)
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	9b 81       	ldd	r25, Y+3	; 0x03
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	39 f1       	breq	.+78     	; 0x3f50 <EXTI_voidSetCallBack+0x6a>
    {
        switch (A_u8EXTI)
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	3d 83       	std	Y+5, r19	; 0x05
    3f0a:	2c 83       	std	Y+4, r18	; 0x04
    3f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f10:	81 30       	cpi	r24, 0x01	; 1
    3f12:	91 05       	cpc	r25, r1
    3f14:	81 f0       	breq	.+32     	; 0x3f36 <EXTI_voidSetCallBack+0x50>
    3f16:	2c 81       	ldd	r18, Y+4	; 0x04
    3f18:	3d 81       	ldd	r19, Y+5	; 0x05
    3f1a:	22 30       	cpi	r18, 0x02	; 2
    3f1c:	31 05       	cpc	r19, r1
    3f1e:	91 f0       	breq	.+36     	; 0x3f44 <EXTI_voidSetCallBack+0x5e>
    3f20:	8c 81       	ldd	r24, Y+4	; 0x04
    3f22:	9d 81       	ldd	r25, Y+5	; 0x05
    3f24:	00 97       	sbiw	r24, 0x00	; 0
    3f26:	a1 f4       	brne	.+40     	; 0x3f50 <EXTI_voidSetCallBack+0x6a>
        {
        case EXTI0:
            EXTI0_CallBack = ptrToFunc;
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2c:	90 93 bc 01 	sts	0x01BC, r25
    3f30:	80 93 bb 01 	sts	0x01BB, r24
    3f34:	0d c0       	rjmp	.+26     	; 0x3f50 <EXTI_voidSetCallBack+0x6a>
            break;
        case EXTI1:
            EXTI1_CallBack = ptrToFunc;
    3f36:	8a 81       	ldd	r24, Y+2	; 0x02
    3f38:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3a:	90 93 be 01 	sts	0x01BE, r25
    3f3e:	80 93 bd 01 	sts	0x01BD, r24
    3f42:	06 c0       	rjmp	.+12     	; 0x3f50 <EXTI_voidSetCallBack+0x6a>
            break;
        case EXTI2:
            EXTI2_CallBack = ptrToFunc;
    3f44:	8a 81       	ldd	r24, Y+2	; 0x02
    3f46:	9b 81       	ldd	r25, Y+3	; 0x03
    3f48:	90 93 c0 01 	sts	0x01C0, r25
    3f4c:	80 93 bf 01 	sts	0x01BF, r24
            break;
        default:
            break;
        }
    }
}
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <__vector_1>:
        switch when interrupt happen so we have to make push and pop the shared registers
        & status register to & from stack
*/

ISR(EXTI0_VECT)
{
    3f60:	1f 92       	push	r1
    3f62:	0f 92       	push	r0
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	0f 92       	push	r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	2f 93       	push	r18
    3f6c:	3f 93       	push	r19
    3f6e:	4f 93       	push	r20
    3f70:	5f 93       	push	r21
    3f72:	6f 93       	push	r22
    3f74:	7f 93       	push	r23
    3f76:	8f 93       	push	r24
    3f78:	9f 93       	push	r25
    3f7a:	af 93       	push	r26
    3f7c:	bf 93       	push	r27
    3f7e:	ef 93       	push	r30
    3f80:	ff 93       	push	r31
    3f82:	df 93       	push	r29
    3f84:	cf 93       	push	r28
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62
    if (EXTI0_CallBack != NULLPTR)
    3f8a:	80 91 bb 01 	lds	r24, 0x01BB
    3f8e:	90 91 bc 01 	lds	r25, 0x01BC
    3f92:	00 97       	sbiw	r24, 0x00	; 0
    3f94:	29 f0       	breq	.+10     	; 0x3fa0 <__vector_1+0x40>
        EXTI0_CallBack();
    3f96:	e0 91 bb 01 	lds	r30, 0x01BB
    3f9a:	f0 91 bc 01 	lds	r31, 0x01BC
    3f9e:	09 95       	icall
}
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	ff 91       	pop	r31
    3fa6:	ef 91       	pop	r30
    3fa8:	bf 91       	pop	r27
    3faa:	af 91       	pop	r26
    3fac:	9f 91       	pop	r25
    3fae:	8f 91       	pop	r24
    3fb0:	7f 91       	pop	r23
    3fb2:	6f 91       	pop	r22
    3fb4:	5f 91       	pop	r21
    3fb6:	4f 91       	pop	r20
    3fb8:	3f 91       	pop	r19
    3fba:	2f 91       	pop	r18
    3fbc:	0f 90       	pop	r0
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	0f 90       	pop	r0
    3fc2:	1f 90       	pop	r1
    3fc4:	18 95       	reti

00003fc6 <__vector_2>:

ISR(EXTI1_VECT)
{
    3fc6:	1f 92       	push	r1
    3fc8:	0f 92       	push	r0
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	0f 92       	push	r0
    3fce:	11 24       	eor	r1, r1
    3fd0:	2f 93       	push	r18
    3fd2:	3f 93       	push	r19
    3fd4:	4f 93       	push	r20
    3fd6:	5f 93       	push	r21
    3fd8:	6f 93       	push	r22
    3fda:	7f 93       	push	r23
    3fdc:	8f 93       	push	r24
    3fde:	9f 93       	push	r25
    3fe0:	af 93       	push	r26
    3fe2:	bf 93       	push	r27
    3fe4:	ef 93       	push	r30
    3fe6:	ff 93       	push	r31
    3fe8:	df 93       	push	r29
    3fea:	cf 93       	push	r28
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
    if (EXTI1_CallBack != NULLPTR)
    3ff0:	80 91 bd 01 	lds	r24, 0x01BD
    3ff4:	90 91 be 01 	lds	r25, 0x01BE
    3ff8:	00 97       	sbiw	r24, 0x00	; 0
    3ffa:	29 f0       	breq	.+10     	; 0x4006 <__vector_2+0x40>
        EXTI1_CallBack();
    3ffc:	e0 91 bd 01 	lds	r30, 0x01BD
    4000:	f0 91 be 01 	lds	r31, 0x01BE
    4004:	09 95       	icall
}
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	ff 91       	pop	r31
    400c:	ef 91       	pop	r30
    400e:	bf 91       	pop	r27
    4010:	af 91       	pop	r26
    4012:	9f 91       	pop	r25
    4014:	8f 91       	pop	r24
    4016:	7f 91       	pop	r23
    4018:	6f 91       	pop	r22
    401a:	5f 91       	pop	r21
    401c:	4f 91       	pop	r20
    401e:	3f 91       	pop	r19
    4020:	2f 91       	pop	r18
    4022:	0f 90       	pop	r0
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	0f 90       	pop	r0
    4028:	1f 90       	pop	r1
    402a:	18 95       	reti

0000402c <__vector_3>:

ISR(EXTI2_VECT)
{
    402c:	1f 92       	push	r1
    402e:	0f 92       	push	r0
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	0f 92       	push	r0
    4034:	11 24       	eor	r1, r1
    4036:	2f 93       	push	r18
    4038:	3f 93       	push	r19
    403a:	4f 93       	push	r20
    403c:	5f 93       	push	r21
    403e:	6f 93       	push	r22
    4040:	7f 93       	push	r23
    4042:	8f 93       	push	r24
    4044:	9f 93       	push	r25
    4046:	af 93       	push	r26
    4048:	bf 93       	push	r27
    404a:	ef 93       	push	r30
    404c:	ff 93       	push	r31
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    if (EXTI2_CallBack != NULLPTR)
    4056:	80 91 bf 01 	lds	r24, 0x01BF
    405a:	90 91 c0 01 	lds	r25, 0x01C0
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	29 f0       	breq	.+10     	; 0x406c <__vector_3+0x40>
        EXTI2_CallBack();
    4062:	e0 91 bf 01 	lds	r30, 0x01BF
    4066:	f0 91 c0 01 	lds	r31, 0x01C0
    406a:	09 95       	icall
    406c:	cf 91       	pop	r28
    406e:	df 91       	pop	r29
    4070:	ff 91       	pop	r31
    4072:	ef 91       	pop	r30
    4074:	bf 91       	pop	r27
    4076:	af 91       	pop	r26
    4078:	9f 91       	pop	r25
    407a:	8f 91       	pop	r24
    407c:	7f 91       	pop	r23
    407e:	6f 91       	pop	r22
    4080:	5f 91       	pop	r21
    4082:	4f 91       	pop	r20
    4084:	3f 91       	pop	r19
    4086:	2f 91       	pop	r18
    4088:	0f 90       	pop	r0
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	0f 90       	pop	r0
    408e:	1f 90       	pop	r1
    4090:	18 95       	reti

00004092 <DIO_voidInit>:
#include "./DIO_Private.h"
#include "./DIO_Configuration.h"
#include "./DIO_Interface.h"

void DIO_voidInit()
{
    4092:	df 93       	push	r29
    4094:	cf 93       	push	r28
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE, PORTA_PIN6_VALUE, PORTA_PIN5_VALUE, PORTA_PIN4_VALUE, PORTA_PIN3_VALUE, PORTA_PIN2_VALUE, PORTA_PIN1_VALUE, PORTA_PIN0_VALUE);
    409a:	eb e3       	ldi	r30, 0x3B	; 59
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	10 82       	st	Z, r1
    PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE, PORTB_PIN6_VALUE, PORTB_PIN5_VALUE, PORTB_PIN4_VALUE, PORTB_PIN3_VALUE, PORTB_PIN2_VALUE, PORTB_PIN1_VALUE, PORTB_PIN0_VALUE);
    40a0:	e8 e3       	ldi	r30, 0x38	; 56
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	10 82       	st	Z, r1
    PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE, PORTC_PIN6_VALUE, PORTC_PIN5_VALUE, PORTC_PIN4_VALUE, PORTC_PIN3_VALUE, PORTC_PIN2_VALUE, PORTC_PIN1_VALUE, PORTC_PIN0_VALUE);
    40a6:	e5 e3       	ldi	r30, 0x35	; 53
    40a8:	f0 e0       	ldi	r31, 0x00	; 0
    40aa:	10 82       	st	Z, r1
    PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE, PORTD_PIN6_VALUE, PORTD_PIN5_VALUE, PORTD_PIN4_VALUE, PORTD_PIN3_VALUE, PORTD_PIN2_VALUE, PORTD_PIN1_VALUE, PORTD_PIN0_VALUE);
    40ac:	e2 e3       	ldi	r30, 0x32	; 50
    40ae:	f0 e0       	ldi	r31, 0x00	; 0
    40b0:	10 82       	st	Z, r1

    DDRA_REG = CONC_BIT(DDRA_PIN7_DIRECTION, DDRA_PIN6_DIRECTION, DDRA_PIN5_DIRECTION, DDRA_PIN4_DIRECTION, DDRA_PIN3_DIRECTION, DDRA_PIN2_DIRECTION, DDRA_PIN1_DIRECTION, DDRA_PIN0_DIRECTION);
    40b2:	ea e3       	ldi	r30, 0x3A	; 58
    40b4:	f0 e0       	ldi	r31, 0x00	; 0
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	80 83       	st	Z, r24
    DDRB_REG = CONC_BIT(DDRB_PIN7_DIRECTION, DDRB_PIN6_DIRECTION, DDRB_PIN5_DIRECTION, DDRB_PIN4_DIRECTION, DDRB_PIN3_DIRECTION, DDRB_PIN2_DIRECTION, DDRB_PIN1_DIRECTION, DDRB_PIN0_DIRECTION);
    40ba:	e7 e3       	ldi	r30, 0x37	; 55
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	8f ef       	ldi	r24, 0xFF	; 255
    40c0:	80 83       	st	Z, r24
    DDRC_REG = CONC_BIT(DDRC_PIN7_DIRECTION, DDRC_PIN6_DIRECTION, DDRC_PIN5_DIRECTION, DDRC_PIN4_DIRECTION, DDRC_PIN3_DIRECTION, DDRC_PIN2_DIRECTION, DDRC_PIN1_DIRECTION, DDRC_PIN0_DIRECTION);
    40c2:	e4 e3       	ldi	r30, 0x34	; 52
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	8f ef       	ldi	r24, 0xFF	; 255
    40c8:	80 83       	st	Z, r24
    DDRD_REG = CONC_BIT(DDRD_PIN7_DIRECTION, DDRD_PIN6_DIRECTION, DDRD_PIN5_DIRECTION, DDRD_PIN4_DIRECTION, DDRD_PIN3_DIRECTION, DDRD_PIN2_DIRECTION, DDRD_PIN1_DIRECTION, DDRD_PIN0_DIRECTION);
    40ca:	e1 e3       	ldi	r30, 0x31	; 49
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	8e ef       	ldi	r24, 0xFE	; 254
    40d0:	80 83       	st	Z, r24
}
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 A_u8Port, u8 A_u8Pin)
{
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	00 d0       	rcall	.+0      	; 0x40de <DIO_u8GetPinValue+0x6>
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <DIO_u8GetPinValue+0x8>
    40e0:	0f 92       	push	r0
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	8a 83       	std	Y+2, r24	; 0x02
    40e8:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch (A_u8Port)
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	28 2f       	mov	r18, r24
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	3d 83       	std	Y+5, r19	; 0x05
    40f2:	2c 83       	std	Y+4, r18	; 0x04
    40f4:	8c 81       	ldd	r24, Y+4	; 0x04
    40f6:	9d 81       	ldd	r25, Y+5	; 0x05
    40f8:	81 30       	cpi	r24, 0x01	; 1
    40fa:	91 05       	cpc	r25, r1
    40fc:	c1 f1       	breq	.+112    	; 0x416e <DIO_u8GetPinValue+0x96>
    40fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4100:	3d 81       	ldd	r19, Y+5	; 0x05
    4102:	22 30       	cpi	r18, 0x02	; 2
    4104:	31 05       	cpc	r19, r1
    4106:	2c f4       	brge	.+10     	; 0x4112 <DIO_u8GetPinValue+0x3a>
    4108:	8c 81       	ldd	r24, Y+4	; 0x04
    410a:	9d 81       	ldd	r25, Y+5	; 0x05
    410c:	00 97       	sbiw	r24, 0x00	; 0
    410e:	71 f0       	breq	.+28     	; 0x412c <DIO_u8GetPinValue+0x54>
    4110:	8e c0       	rjmp	.+284    	; 0x422e <DIO_u8GetPinValue+0x156>
    4112:	2c 81       	ldd	r18, Y+4	; 0x04
    4114:	3d 81       	ldd	r19, Y+5	; 0x05
    4116:	22 30       	cpi	r18, 0x02	; 2
    4118:	31 05       	cpc	r19, r1
    411a:	09 f4       	brne	.+2      	; 0x411e <DIO_u8GetPinValue+0x46>
    411c:	49 c0       	rjmp	.+146    	; 0x41b0 <DIO_u8GetPinValue+0xd8>
    411e:	8c 81       	ldd	r24, Y+4	; 0x04
    4120:	9d 81       	ldd	r25, Y+5	; 0x05
    4122:	83 30       	cpi	r24, 0x03	; 3
    4124:	91 05       	cpc	r25, r1
    4126:	09 f4       	brne	.+2      	; 0x412a <DIO_u8GetPinValue+0x52>
    4128:	63 c0       	rjmp	.+198    	; 0x41f0 <DIO_u8GetPinValue+0x118>
    412a:	81 c0       	rjmp	.+258    	; 0x422e <DIO_u8GetPinValue+0x156>
    {
    case PORTA:
        local_u8Value = GET_BIT(PINA_REG, A_u8Pin);
    412c:	e9 e3       	ldi	r30, 0x39	; 57
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	80 81       	ld	r24, Z
    4132:	48 2f       	mov	r20, r24
    4134:	50 e0       	ldi	r21, 0x00	; 0
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	28 2f       	mov	r18, r24
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <DIO_u8GetPinValue+0x6e>
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	2a 95       	dec	r18
    4148:	e2 f7       	brpl	.-8      	; 0x4142 <DIO_u8GetPinValue+0x6a>
    414a:	80 95       	com	r24
    414c:	90 95       	com	r25
    414e:	9a 01       	movw	r18, r20
    4150:	28 23       	and	r18, r24
    4152:	39 23       	and	r19, r25
    4154:	e9 e3       	ldi	r30, 0x39	; 57
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	80 81       	ld	r24, Z
    415a:	88 2f       	mov	r24, r24
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	19 82       	std	Y+1, r1	; 0x01
    4160:	28 17       	cp	r18, r24
    4162:	39 07       	cpc	r19, r25
    4164:	09 f4       	brne	.+2      	; 0x4168 <DIO_u8GetPinValue+0x90>
    4166:	63 c0       	rjmp	.+198    	; 0x422e <DIO_u8GetPinValue+0x156>
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	89 83       	std	Y+1, r24	; 0x01
    416c:	60 c0       	rjmp	.+192    	; 0x422e <DIO_u8GetPinValue+0x156>
        break;
    case PORTB:
        local_u8Value = GET_BIT(PINB_REG, A_u8Pin);
    416e:	e6 e3       	ldi	r30, 0x36	; 54
    4170:	f0 e0       	ldi	r31, 0x00	; 0
    4172:	80 81       	ld	r24, Z
    4174:	48 2f       	mov	r20, r24
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	28 2f       	mov	r18, r24
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	02 c0       	rjmp	.+4      	; 0x4188 <DIO_u8GetPinValue+0xb0>
    4184:	88 0f       	add	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	2a 95       	dec	r18
    418a:	e2 f7       	brpl	.-8      	; 0x4184 <DIO_u8GetPinValue+0xac>
    418c:	80 95       	com	r24
    418e:	90 95       	com	r25
    4190:	9a 01       	movw	r18, r20
    4192:	28 23       	and	r18, r24
    4194:	39 23       	and	r19, r25
    4196:	e6 e3       	ldi	r30, 0x36	; 54
    4198:	f0 e0       	ldi	r31, 0x00	; 0
    419a:	80 81       	ld	r24, Z
    419c:	88 2f       	mov	r24, r24
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	19 82       	std	Y+1, r1	; 0x01
    41a2:	28 17       	cp	r18, r24
    41a4:	39 07       	cpc	r19, r25
    41a6:	09 f4       	brne	.+2      	; 0x41aa <DIO_u8GetPinValue+0xd2>
    41a8:	42 c0       	rjmp	.+132    	; 0x422e <DIO_u8GetPinValue+0x156>
    41aa:	81 e0       	ldi	r24, 0x01	; 1
    41ac:	89 83       	std	Y+1, r24	; 0x01
    41ae:	3f c0       	rjmp	.+126    	; 0x422e <DIO_u8GetPinValue+0x156>
        break;
    case PORTC:
        local_u8Value = GET_BIT(PINC_REG, A_u8Pin);
    41b0:	e3 e3       	ldi	r30, 0x33	; 51
    41b2:	f0 e0       	ldi	r31, 0x00	; 0
    41b4:	80 81       	ld	r24, Z
    41b6:	48 2f       	mov	r20, r24
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	8b 81       	ldd	r24, Y+3	; 0x03
    41bc:	28 2f       	mov	r18, r24
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <DIO_u8GetPinValue+0xf2>
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	2a 95       	dec	r18
    41cc:	e2 f7       	brpl	.-8      	; 0x41c6 <DIO_u8GetPinValue+0xee>
    41ce:	80 95       	com	r24
    41d0:	90 95       	com	r25
    41d2:	9a 01       	movw	r18, r20
    41d4:	28 23       	and	r18, r24
    41d6:	39 23       	and	r19, r25
    41d8:	e3 e3       	ldi	r30, 0x33	; 51
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	88 2f       	mov	r24, r24
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	19 82       	std	Y+1, r1	; 0x01
    41e4:	28 17       	cp	r18, r24
    41e6:	39 07       	cpc	r19, r25
    41e8:	11 f1       	breq	.+68     	; 0x422e <DIO_u8GetPinValue+0x156>
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	89 83       	std	Y+1, r24	; 0x01
    41ee:	1f c0       	rjmp	.+62     	; 0x422e <DIO_u8GetPinValue+0x156>
        break;
    case PORTD:
        local_u8Value = GET_BIT(PIND_REG, A_u8Pin);
    41f0:	e0 e3       	ldi	r30, 0x30	; 48
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	80 81       	ld	r24, Z
    41f6:	48 2f       	mov	r20, r24
    41f8:	50 e0       	ldi	r21, 0x00	; 0
    41fa:	8b 81       	ldd	r24, Y+3	; 0x03
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	02 c0       	rjmp	.+4      	; 0x420a <DIO_u8GetPinValue+0x132>
    4206:	88 0f       	add	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	2a 95       	dec	r18
    420c:	e2 f7       	brpl	.-8      	; 0x4206 <DIO_u8GetPinValue+0x12e>
    420e:	80 95       	com	r24
    4210:	90 95       	com	r25
    4212:	9a 01       	movw	r18, r20
    4214:	28 23       	and	r18, r24
    4216:	39 23       	and	r19, r25
    4218:	e0 e3       	ldi	r30, 0x30	; 48
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	80 81       	ld	r24, Z
    421e:	88 2f       	mov	r24, r24
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	19 82       	std	Y+1, r1	; 0x01
    4224:	28 17       	cp	r18, r24
    4226:	39 07       	cpc	r19, r25
    4228:	11 f0       	breq	.+4      	; 0x422e <DIO_u8GetPinValue+0x156>
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
    422e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	cf 91       	pop	r28
    423c:	df 91       	pop	r29
    423e:	08 95       	ret

00004240 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 A_u8Port, u8 A_u8Pin, u8 A_u8Value)
{
    4240:	df 93       	push	r29
    4242:	cf 93       	push	r28
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	2d 97       	sbiw	r28, 0x0d	; 13
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	89 83       	std	Y+1, r24	; 0x01
    4256:	6a 83       	std	Y+2, r22	; 0x02
    4258:	4b 83       	std	Y+3, r20	; 0x03
    switch (A_u8Port)
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	3d 87       	std	Y+13, r19	; 0x0d
    4262:	2c 87       	std	Y+12, r18	; 0x0c
    4264:	8c 85       	ldd	r24, Y+12	; 0x0c
    4266:	9d 85       	ldd	r25, Y+13	; 0x0d
    4268:	81 30       	cpi	r24, 0x01	; 1
    426a:	91 05       	cpc	r25, r1
    426c:	09 f4       	brne	.+2      	; 0x4270 <DIO_voidSetPinValue+0x30>
    426e:	4f c0       	rjmp	.+158    	; 0x430e <DIO_voidSetPinValue+0xce>
    4270:	2c 85       	ldd	r18, Y+12	; 0x0c
    4272:	3d 85       	ldd	r19, Y+13	; 0x0d
    4274:	22 30       	cpi	r18, 0x02	; 2
    4276:	31 05       	cpc	r19, r1
    4278:	2c f4       	brge	.+10     	; 0x4284 <DIO_voidSetPinValue+0x44>
    427a:	8c 85       	ldd	r24, Y+12	; 0x0c
    427c:	9d 85       	ldd	r25, Y+13	; 0x0d
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	71 f0       	breq	.+28     	; 0x429e <DIO_voidSetPinValue+0x5e>
    4282:	eb c0       	rjmp	.+470    	; 0x445a <DIO_voidSetPinValue+0x21a>
    4284:	2c 85       	ldd	r18, Y+12	; 0x0c
    4286:	3d 85       	ldd	r19, Y+13	; 0x0d
    4288:	22 30       	cpi	r18, 0x02	; 2
    428a:	31 05       	cpc	r19, r1
    428c:	09 f4       	brne	.+2      	; 0x4290 <DIO_voidSetPinValue+0x50>
    428e:	77 c0       	rjmp	.+238    	; 0x437e <DIO_voidSetPinValue+0x13e>
    4290:	8c 85       	ldd	r24, Y+12	; 0x0c
    4292:	9d 85       	ldd	r25, Y+13	; 0x0d
    4294:	83 30       	cpi	r24, 0x03	; 3
    4296:	91 05       	cpc	r25, r1
    4298:	09 f4       	brne	.+2      	; 0x429c <DIO_voidSetPinValue+0x5c>
    429a:	a9 c0       	rjmp	.+338    	; 0x43ee <DIO_voidSetPinValue+0x1ae>
    429c:	de c0       	rjmp	.+444    	; 0x445a <DIO_voidSetPinValue+0x21a>
    {
    case PORTA:
        switch (A_u8Value)
    429e:	8b 81       	ldd	r24, Y+3	; 0x03
    42a0:	28 2f       	mov	r18, r24
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	3b 87       	std	Y+11, r19	; 0x0b
    42a6:	2a 87       	std	Y+10, r18	; 0x0a
    42a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    42aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    42ac:	00 97       	sbiw	r24, 0x00	; 0
    42ae:	d1 f0       	breq	.+52     	; 0x42e4 <DIO_voidSetPinValue+0xa4>
    42b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    42b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    42b4:	21 30       	cpi	r18, 0x01	; 1
    42b6:	31 05       	cpc	r19, r1
    42b8:	09 f0       	breq	.+2      	; 0x42bc <DIO_voidSetPinValue+0x7c>
    42ba:	cf c0       	rjmp	.+414    	; 0x445a <DIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTA_REG, A_u8Pin);
    42bc:	ab e3       	ldi	r26, 0x3B	; 59
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	eb e3       	ldi	r30, 0x3B	; 59
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	48 2f       	mov	r20, r24
    42c8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ca:	28 2f       	mov	r18, r24
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	02 2e       	mov	r0, r18
    42d4:	02 c0       	rjmp	.+4      	; 0x42da <DIO_voidSetPinValue+0x9a>
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	0a 94       	dec	r0
    42dc:	e2 f7       	brpl	.-8      	; 0x42d6 <DIO_voidSetPinValue+0x96>
    42de:	84 2b       	or	r24, r20
    42e0:	8c 93       	st	X, r24
    42e2:	bb c0       	rjmp	.+374    	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;

        case PIN_LOW:
            CLR_BIT(PORTA_REG, A_u8Pin);
    42e4:	ab e3       	ldi	r26, 0x3B	; 59
    42e6:	b0 e0       	ldi	r27, 0x00	; 0
    42e8:	eb e3       	ldi	r30, 0x3B	; 59
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	80 81       	ld	r24, Z
    42ee:	48 2f       	mov	r20, r24
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	28 2f       	mov	r18, r24
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	02 2e       	mov	r0, r18
    42fc:	02 c0       	rjmp	.+4      	; 0x4302 <DIO_voidSetPinValue+0xc2>
    42fe:	88 0f       	add	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	0a 94       	dec	r0
    4304:	e2 f7       	brpl	.-8      	; 0x42fe <DIO_voidSetPinValue+0xbe>
    4306:	80 95       	com	r24
    4308:	84 23       	and	r24, r20
    430a:	8c 93       	st	X, r24
    430c:	a6 c0       	rjmp	.+332    	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;
        };
        break;

    case PORTB:
        switch (A_u8Value)
    430e:	8b 81       	ldd	r24, Y+3	; 0x03
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	39 87       	std	Y+9, r19	; 0x09
    4316:	28 87       	std	Y+8, r18	; 0x08
    4318:	88 85       	ldd	r24, Y+8	; 0x08
    431a:	99 85       	ldd	r25, Y+9	; 0x09
    431c:	00 97       	sbiw	r24, 0x00	; 0
    431e:	d1 f0       	breq	.+52     	; 0x4354 <DIO_voidSetPinValue+0x114>
    4320:	28 85       	ldd	r18, Y+8	; 0x08
    4322:	39 85       	ldd	r19, Y+9	; 0x09
    4324:	21 30       	cpi	r18, 0x01	; 1
    4326:	31 05       	cpc	r19, r1
    4328:	09 f0       	breq	.+2      	; 0x432c <DIO_voidSetPinValue+0xec>
    432a:	97 c0       	rjmp	.+302    	; 0x445a <DIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTB_REG, A_u8Pin);
    432c:	a8 e3       	ldi	r26, 0x38	; 56
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	e8 e3       	ldi	r30, 0x38	; 56
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	80 81       	ld	r24, Z
    4336:	48 2f       	mov	r20, r24
    4338:	8a 81       	ldd	r24, Y+2	; 0x02
    433a:	28 2f       	mov	r18, r24
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	02 2e       	mov	r0, r18
    4344:	02 c0       	rjmp	.+4      	; 0x434a <DIO_voidSetPinValue+0x10a>
    4346:	88 0f       	add	r24, r24
    4348:	99 1f       	adc	r25, r25
    434a:	0a 94       	dec	r0
    434c:	e2 f7       	brpl	.-8      	; 0x4346 <DIO_voidSetPinValue+0x106>
    434e:	84 2b       	or	r24, r20
    4350:	8c 93       	st	X, r24
    4352:	83 c0       	rjmp	.+262    	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;

        case PIN_LOW:
            CLR_BIT(PORTB_REG, A_u8Pin);
    4354:	a8 e3       	ldi	r26, 0x38	; 56
    4356:	b0 e0       	ldi	r27, 0x00	; 0
    4358:	e8 e3       	ldi	r30, 0x38	; 56
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	80 81       	ld	r24, Z
    435e:	48 2f       	mov	r20, r24
    4360:	8a 81       	ldd	r24, Y+2	; 0x02
    4362:	28 2f       	mov	r18, r24
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	02 2e       	mov	r0, r18
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <DIO_voidSetPinValue+0x132>
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	0a 94       	dec	r0
    4374:	e2 f7       	brpl	.-8      	; 0x436e <DIO_voidSetPinValue+0x12e>
    4376:	80 95       	com	r24
    4378:	84 23       	and	r24, r20
    437a:	8c 93       	st	X, r24
    437c:	6e c0       	rjmp	.+220    	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;
        };
        break;

    case PORTC:
        switch (A_u8Value)
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	28 2f       	mov	r18, r24
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	3f 83       	std	Y+7, r19	; 0x07
    4386:	2e 83       	std	Y+6, r18	; 0x06
    4388:	8e 81       	ldd	r24, Y+6	; 0x06
    438a:	9f 81       	ldd	r25, Y+7	; 0x07
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	d1 f0       	breq	.+52     	; 0x43c4 <DIO_voidSetPinValue+0x184>
    4390:	2e 81       	ldd	r18, Y+6	; 0x06
    4392:	3f 81       	ldd	r19, Y+7	; 0x07
    4394:	21 30       	cpi	r18, 0x01	; 1
    4396:	31 05       	cpc	r19, r1
    4398:	09 f0       	breq	.+2      	; 0x439c <DIO_voidSetPinValue+0x15c>
    439a:	5f c0       	rjmp	.+190    	; 0x445a <DIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTC_REG, A_u8Pin);
    439c:	a5 e3       	ldi	r26, 0x35	; 53
    439e:	b0 e0       	ldi	r27, 0x00	; 0
    43a0:	e5 e3       	ldi	r30, 0x35	; 53
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	80 81       	ld	r24, Z
    43a6:	48 2f       	mov	r20, r24
    43a8:	8a 81       	ldd	r24, Y+2	; 0x02
    43aa:	28 2f       	mov	r18, r24
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	02 2e       	mov	r0, r18
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <DIO_voidSetPinValue+0x17a>
    43b6:	88 0f       	add	r24, r24
    43b8:	99 1f       	adc	r25, r25
    43ba:	0a 94       	dec	r0
    43bc:	e2 f7       	brpl	.-8      	; 0x43b6 <DIO_voidSetPinValue+0x176>
    43be:	84 2b       	or	r24, r20
    43c0:	8c 93       	st	X, r24
    43c2:	4b c0       	rjmp	.+150    	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;

        case PIN_LOW:
            CLR_BIT(PORTC_REG, A_u8Pin);
    43c4:	a5 e3       	ldi	r26, 0x35	; 53
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	e5 e3       	ldi	r30, 0x35	; 53
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	48 2f       	mov	r20, r24
    43d0:	8a 81       	ldd	r24, Y+2	; 0x02
    43d2:	28 2f       	mov	r18, r24
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	02 2e       	mov	r0, r18
    43dc:	02 c0       	rjmp	.+4      	; 0x43e2 <DIO_voidSetPinValue+0x1a2>
    43de:	88 0f       	add	r24, r24
    43e0:	99 1f       	adc	r25, r25
    43e2:	0a 94       	dec	r0
    43e4:	e2 f7       	brpl	.-8      	; 0x43de <DIO_voidSetPinValue+0x19e>
    43e6:	80 95       	com	r24
    43e8:	84 23       	and	r24, r20
    43ea:	8c 93       	st	X, r24
    43ec:	36 c0       	rjmp	.+108    	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;
        };
        break;

    case PORTD:
        switch (A_u8Value)
    43ee:	8b 81       	ldd	r24, Y+3	; 0x03
    43f0:	28 2f       	mov	r18, r24
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	3d 83       	std	Y+5, r19	; 0x05
    43f6:	2c 83       	std	Y+4, r18	; 0x04
    43f8:	8c 81       	ldd	r24, Y+4	; 0x04
    43fa:	9d 81       	ldd	r25, Y+5	; 0x05
    43fc:	00 97       	sbiw	r24, 0x00	; 0
    43fe:	c9 f0       	breq	.+50     	; 0x4432 <DIO_voidSetPinValue+0x1f2>
    4400:	2c 81       	ldd	r18, Y+4	; 0x04
    4402:	3d 81       	ldd	r19, Y+5	; 0x05
    4404:	21 30       	cpi	r18, 0x01	; 1
    4406:	31 05       	cpc	r19, r1
    4408:	41 f5       	brne	.+80     	; 0x445a <DIO_voidSetPinValue+0x21a>
        {
        case PIN_HIGH:
            SET_BIT(PORTD_REG, A_u8Pin);
    440a:	a2 e3       	ldi	r26, 0x32	; 50
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	e2 e3       	ldi	r30, 0x32	; 50
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	48 2f       	mov	r20, r24
    4416:	8a 81       	ldd	r24, Y+2	; 0x02
    4418:	28 2f       	mov	r18, r24
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	02 2e       	mov	r0, r18
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <DIO_voidSetPinValue+0x1e8>
    4424:	88 0f       	add	r24, r24
    4426:	99 1f       	adc	r25, r25
    4428:	0a 94       	dec	r0
    442a:	e2 f7       	brpl	.-8      	; 0x4424 <DIO_voidSetPinValue+0x1e4>
    442c:	84 2b       	or	r24, r20
    442e:	8c 93       	st	X, r24
    4430:	14 c0       	rjmp	.+40     	; 0x445a <DIO_voidSetPinValue+0x21a>
            break;

        case PIN_LOW:
            CLR_BIT(PORTD_REG, A_u8Pin);
    4432:	a2 e3       	ldi	r26, 0x32	; 50
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	e2 e3       	ldi	r30, 0x32	; 50
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	80 81       	ld	r24, Z
    443c:	48 2f       	mov	r20, r24
    443e:	8a 81       	ldd	r24, Y+2	; 0x02
    4440:	28 2f       	mov	r18, r24
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	02 2e       	mov	r0, r18
    444a:	02 c0       	rjmp	.+4      	; 0x4450 <DIO_voidSetPinValue+0x210>
    444c:	88 0f       	add	r24, r24
    444e:	99 1f       	adc	r25, r25
    4450:	0a 94       	dec	r0
    4452:	e2 f7       	brpl	.-8      	; 0x444c <DIO_voidSetPinValue+0x20c>
    4454:	80 95       	com	r24
    4456:	84 23       	and	r24, r20
    4458:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    445a:	2d 96       	adiw	r28, 0x0d	; 13
    445c:	0f b6       	in	r0, 0x3f	; 63
    445e:	f8 94       	cli
    4460:	de bf       	out	0x3e, r29	; 62
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	cd bf       	out	0x3d, r28	; 61
    4466:	cf 91       	pop	r28
    4468:	df 91       	pop	r29
    446a:	08 95       	ret

0000446c <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 A_u8Port, u8 A_u8Pin, u8 A_u8Value)
{
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    4474:	2d 97       	sbiw	r28, 0x0d	; 13
    4476:	0f b6       	in	r0, 0x3f	; 63
    4478:	f8 94       	cli
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	cd bf       	out	0x3d, r28	; 61
    4480:	89 83       	std	Y+1, r24	; 0x01
    4482:	6a 83       	std	Y+2, r22	; 0x02
    4484:	4b 83       	std	Y+3, r20	; 0x03
    switch (A_u8Port)
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	28 2f       	mov	r18, r24
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	3d 87       	std	Y+13, r19	; 0x0d
    448e:	2c 87       	std	Y+12, r18	; 0x0c
    4490:	8c 85       	ldd	r24, Y+12	; 0x0c
    4492:	9d 85       	ldd	r25, Y+13	; 0x0d
    4494:	81 30       	cpi	r24, 0x01	; 1
    4496:	91 05       	cpc	r25, r1
    4498:	09 f4       	brne	.+2      	; 0x449c <DIO_voidSetPinDirection+0x30>
    449a:	4f c0       	rjmp	.+158    	; 0x453a <DIO_voidSetPinDirection+0xce>
    449c:	2c 85       	ldd	r18, Y+12	; 0x0c
    449e:	3d 85       	ldd	r19, Y+13	; 0x0d
    44a0:	22 30       	cpi	r18, 0x02	; 2
    44a2:	31 05       	cpc	r19, r1
    44a4:	2c f4       	brge	.+10     	; 0x44b0 <DIO_voidSetPinDirection+0x44>
    44a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    44a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	71 f0       	breq	.+28     	; 0x44ca <DIO_voidSetPinDirection+0x5e>
    44ae:	eb c0       	rjmp	.+470    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
    44b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    44b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    44b4:	22 30       	cpi	r18, 0x02	; 2
    44b6:	31 05       	cpc	r19, r1
    44b8:	09 f4       	brne	.+2      	; 0x44bc <DIO_voidSetPinDirection+0x50>
    44ba:	77 c0       	rjmp	.+238    	; 0x45aa <DIO_voidSetPinDirection+0x13e>
    44bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    44be:	9d 85       	ldd	r25, Y+13	; 0x0d
    44c0:	83 30       	cpi	r24, 0x03	; 3
    44c2:	91 05       	cpc	r25, r1
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <DIO_voidSetPinDirection+0x5c>
    44c6:	a9 c0       	rjmp	.+338    	; 0x461a <DIO_voidSetPinDirection+0x1ae>
    44c8:	de c0       	rjmp	.+444    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
    {
    case PORTA:
        switch (A_u8Value)
    44ca:	8b 81       	ldd	r24, Y+3	; 0x03
    44cc:	28 2f       	mov	r18, r24
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	3b 87       	std	Y+11, r19	; 0x0b
    44d2:	2a 87       	std	Y+10, r18	; 0x0a
    44d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    44d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    44d8:	00 97       	sbiw	r24, 0x00	; 0
    44da:	d1 f0       	breq	.+52     	; 0x4510 <DIO_voidSetPinDirection+0xa4>
    44dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    44de:	3b 85       	ldd	r19, Y+11	; 0x0b
    44e0:	21 30       	cpi	r18, 0x01	; 1
    44e2:	31 05       	cpc	r19, r1
    44e4:	09 f0       	breq	.+2      	; 0x44e8 <DIO_voidSetPinDirection+0x7c>
    44e6:	cf c0       	rjmp	.+414    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRA_REG, A_u8Pin);
    44e8:	aa e3       	ldi	r26, 0x3A	; 58
    44ea:	b0 e0       	ldi	r27, 0x00	; 0
    44ec:	ea e3       	ldi	r30, 0x3A	; 58
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	80 81       	ld	r24, Z
    44f2:	48 2f       	mov	r20, r24
    44f4:	8a 81       	ldd	r24, Y+2	; 0x02
    44f6:	28 2f       	mov	r18, r24
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	02 2e       	mov	r0, r18
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <DIO_voidSetPinDirection+0x9a>
    4502:	88 0f       	add	r24, r24
    4504:	99 1f       	adc	r25, r25
    4506:	0a 94       	dec	r0
    4508:	e2 f7       	brpl	.-8      	; 0x4502 <DIO_voidSetPinDirection+0x96>
    450a:	84 2b       	or	r24, r20
    450c:	8c 93       	st	X, r24
    450e:	bb c0       	rjmp	.+374    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;

        case PIN_INPUT:
            CLR_BIT(DDRA_REG, A_u8Pin);
    4510:	aa e3       	ldi	r26, 0x3A	; 58
    4512:	b0 e0       	ldi	r27, 0x00	; 0
    4514:	ea e3       	ldi	r30, 0x3A	; 58
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	80 81       	ld	r24, Z
    451a:	48 2f       	mov	r20, r24
    451c:	8a 81       	ldd	r24, Y+2	; 0x02
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	02 2e       	mov	r0, r18
    4528:	02 c0       	rjmp	.+4      	; 0x452e <DIO_voidSetPinDirection+0xc2>
    452a:	88 0f       	add	r24, r24
    452c:	99 1f       	adc	r25, r25
    452e:	0a 94       	dec	r0
    4530:	e2 f7       	brpl	.-8      	; 0x452a <DIO_voidSetPinDirection+0xbe>
    4532:	80 95       	com	r24
    4534:	84 23       	and	r24, r20
    4536:	8c 93       	st	X, r24
    4538:	a6 c0       	rjmp	.+332    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

    case PORTB:
        switch (A_u8Value)
    453a:	8b 81       	ldd	r24, Y+3	; 0x03
    453c:	28 2f       	mov	r18, r24
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	39 87       	std	Y+9, r19	; 0x09
    4542:	28 87       	std	Y+8, r18	; 0x08
    4544:	88 85       	ldd	r24, Y+8	; 0x08
    4546:	99 85       	ldd	r25, Y+9	; 0x09
    4548:	00 97       	sbiw	r24, 0x00	; 0
    454a:	d1 f0       	breq	.+52     	; 0x4580 <DIO_voidSetPinDirection+0x114>
    454c:	28 85       	ldd	r18, Y+8	; 0x08
    454e:	39 85       	ldd	r19, Y+9	; 0x09
    4550:	21 30       	cpi	r18, 0x01	; 1
    4552:	31 05       	cpc	r19, r1
    4554:	09 f0       	breq	.+2      	; 0x4558 <DIO_voidSetPinDirection+0xec>
    4556:	97 c0       	rjmp	.+302    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRB_REG, A_u8Pin);
    4558:	a7 e3       	ldi	r26, 0x37	; 55
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	e7 e3       	ldi	r30, 0x37	; 55
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	48 2f       	mov	r20, r24
    4564:	8a 81       	ldd	r24, Y+2	; 0x02
    4566:	28 2f       	mov	r18, r24
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	02 2e       	mov	r0, r18
    4570:	02 c0       	rjmp	.+4      	; 0x4576 <DIO_voidSetPinDirection+0x10a>
    4572:	88 0f       	add	r24, r24
    4574:	99 1f       	adc	r25, r25
    4576:	0a 94       	dec	r0
    4578:	e2 f7       	brpl	.-8      	; 0x4572 <DIO_voidSetPinDirection+0x106>
    457a:	84 2b       	or	r24, r20
    457c:	8c 93       	st	X, r24
    457e:	83 c0       	rjmp	.+262    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;

        case PIN_INPUT:
            CLR_BIT(DDRB_REG, A_u8Pin);
    4580:	a7 e3       	ldi	r26, 0x37	; 55
    4582:	b0 e0       	ldi	r27, 0x00	; 0
    4584:	e7 e3       	ldi	r30, 0x37	; 55
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 81       	ld	r24, Z
    458a:	48 2f       	mov	r20, r24
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	28 2f       	mov	r18, r24
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	02 2e       	mov	r0, r18
    4598:	02 c0       	rjmp	.+4      	; 0x459e <DIO_voidSetPinDirection+0x132>
    459a:	88 0f       	add	r24, r24
    459c:	99 1f       	adc	r25, r25
    459e:	0a 94       	dec	r0
    45a0:	e2 f7       	brpl	.-8      	; 0x459a <DIO_voidSetPinDirection+0x12e>
    45a2:	80 95       	com	r24
    45a4:	84 23       	and	r24, r20
    45a6:	8c 93       	st	X, r24
    45a8:	6e c0       	rjmp	.+220    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

    case PORTC:
        switch (A_u8Value)
    45aa:	8b 81       	ldd	r24, Y+3	; 0x03
    45ac:	28 2f       	mov	r18, r24
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	3f 83       	std	Y+7, r19	; 0x07
    45b2:	2e 83       	std	Y+6, r18	; 0x06
    45b4:	8e 81       	ldd	r24, Y+6	; 0x06
    45b6:	9f 81       	ldd	r25, Y+7	; 0x07
    45b8:	00 97       	sbiw	r24, 0x00	; 0
    45ba:	d1 f0       	breq	.+52     	; 0x45f0 <DIO_voidSetPinDirection+0x184>
    45bc:	2e 81       	ldd	r18, Y+6	; 0x06
    45be:	3f 81       	ldd	r19, Y+7	; 0x07
    45c0:	21 30       	cpi	r18, 0x01	; 1
    45c2:	31 05       	cpc	r19, r1
    45c4:	09 f0       	breq	.+2      	; 0x45c8 <DIO_voidSetPinDirection+0x15c>
    45c6:	5f c0       	rjmp	.+190    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRC_REG, A_u8Pin);
    45c8:	a4 e3       	ldi	r26, 0x34	; 52
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	e4 e3       	ldi	r30, 0x34	; 52
    45ce:	f0 e0       	ldi	r31, 0x00	; 0
    45d0:	80 81       	ld	r24, Z
    45d2:	48 2f       	mov	r20, r24
    45d4:	8a 81       	ldd	r24, Y+2	; 0x02
    45d6:	28 2f       	mov	r18, r24
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	02 2e       	mov	r0, r18
    45e0:	02 c0       	rjmp	.+4      	; 0x45e6 <DIO_voidSetPinDirection+0x17a>
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	0a 94       	dec	r0
    45e8:	e2 f7       	brpl	.-8      	; 0x45e2 <DIO_voidSetPinDirection+0x176>
    45ea:	84 2b       	or	r24, r20
    45ec:	8c 93       	st	X, r24
    45ee:	4b c0       	rjmp	.+150    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;

        case PIN_INPUT:
            CLR_BIT(DDRC_REG, A_u8Pin);
    45f0:	a4 e3       	ldi	r26, 0x34	; 52
    45f2:	b0 e0       	ldi	r27, 0x00	; 0
    45f4:	e4 e3       	ldi	r30, 0x34	; 52
    45f6:	f0 e0       	ldi	r31, 0x00	; 0
    45f8:	80 81       	ld	r24, Z
    45fa:	48 2f       	mov	r20, r24
    45fc:	8a 81       	ldd	r24, Y+2	; 0x02
    45fe:	28 2f       	mov	r18, r24
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	02 2e       	mov	r0, r18
    4608:	02 c0       	rjmp	.+4      	; 0x460e <DIO_voidSetPinDirection+0x1a2>
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	0a 94       	dec	r0
    4610:	e2 f7       	brpl	.-8      	; 0x460a <DIO_voidSetPinDirection+0x19e>
    4612:	80 95       	com	r24
    4614:	84 23       	and	r24, r20
    4616:	8c 93       	st	X, r24
    4618:	36 c0       	rjmp	.+108    	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

    case PORTD:
        switch (A_u8Value)
    461a:	8b 81       	ldd	r24, Y+3	; 0x03
    461c:	28 2f       	mov	r18, r24
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	3d 83       	std	Y+5, r19	; 0x05
    4622:	2c 83       	std	Y+4, r18	; 0x04
    4624:	8c 81       	ldd	r24, Y+4	; 0x04
    4626:	9d 81       	ldd	r25, Y+5	; 0x05
    4628:	00 97       	sbiw	r24, 0x00	; 0
    462a:	c9 f0       	breq	.+50     	; 0x465e <DIO_voidSetPinDirection+0x1f2>
    462c:	2c 81       	ldd	r18, Y+4	; 0x04
    462e:	3d 81       	ldd	r19, Y+5	; 0x05
    4630:	21 30       	cpi	r18, 0x01	; 1
    4632:	31 05       	cpc	r19, r1
    4634:	41 f5       	brne	.+80     	; 0x4686 <DIO_voidSetPinDirection+0x21a>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRD_REG, A_u8Pin);
    4636:	a1 e3       	ldi	r26, 0x31	; 49
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	e1 e3       	ldi	r30, 0x31	; 49
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	48 2f       	mov	r20, r24
    4642:	8a 81       	ldd	r24, Y+2	; 0x02
    4644:	28 2f       	mov	r18, r24
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	02 2e       	mov	r0, r18
    464e:	02 c0       	rjmp	.+4      	; 0x4654 <DIO_voidSetPinDirection+0x1e8>
    4650:	88 0f       	add	r24, r24
    4652:	99 1f       	adc	r25, r25
    4654:	0a 94       	dec	r0
    4656:	e2 f7       	brpl	.-8      	; 0x4650 <DIO_voidSetPinDirection+0x1e4>
    4658:	84 2b       	or	r24, r20
    465a:	8c 93       	st	X, r24
    465c:	14 c0       	rjmp	.+40     	; 0x4686 <DIO_voidSetPinDirection+0x21a>
            break;

        case PIN_INPUT:
            CLR_BIT(DDRD_REG, A_u8Pin);
    465e:	a1 e3       	ldi	r26, 0x31	; 49
    4660:	b0 e0       	ldi	r27, 0x00	; 0
    4662:	e1 e3       	ldi	r30, 0x31	; 49
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	48 2f       	mov	r20, r24
    466a:	8a 81       	ldd	r24, Y+2	; 0x02
    466c:	28 2f       	mov	r18, r24
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	02 2e       	mov	r0, r18
    4676:	02 c0       	rjmp	.+4      	; 0x467c <DIO_voidSetPinDirection+0x210>
    4678:	88 0f       	add	r24, r24
    467a:	99 1f       	adc	r25, r25
    467c:	0a 94       	dec	r0
    467e:	e2 f7       	brpl	.-8      	; 0x4678 <DIO_voidSetPinDirection+0x20c>
    4680:	80 95       	com	r24
    4682:	84 23       	and	r24, r20
    4684:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    4686:	2d 96       	adiw	r28, 0x0d	; 13
    4688:	0f b6       	in	r0, 0x3f	; 63
    468a:	f8 94       	cli
    468c:	de bf       	out	0x3e, r29	; 62
    468e:	0f be       	out	0x3f, r0	; 63
    4690:	cd bf       	out	0x3d, r28	; 61
    4692:	cf 91       	pop	r28
    4694:	df 91       	pop	r29
    4696:	08 95       	ret

00004698 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 A_u8Port, u8 A_u8Value)
{
    4698:	df 93       	push	r29
    469a:	cf 93       	push	r28
    469c:	00 d0       	rcall	.+0      	; 0x469e <DIO_voidSetPortValue+0x6>
    469e:	00 d0       	rcall	.+0      	; 0x46a0 <DIO_voidSetPortValue+0x8>
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	89 83       	std	Y+1, r24	; 0x01
    46a6:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8Port)
    46a8:	89 81       	ldd	r24, Y+1	; 0x01
    46aa:	28 2f       	mov	r18, r24
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	3c 83       	std	Y+4, r19	; 0x04
    46b0:	2b 83       	std	Y+3, r18	; 0x03
    46b2:	8b 81       	ldd	r24, Y+3	; 0x03
    46b4:	9c 81       	ldd	r25, Y+4	; 0x04
    46b6:	81 30       	cpi	r24, 0x01	; 1
    46b8:	91 05       	cpc	r25, r1
    46ba:	d1 f0       	breq	.+52     	; 0x46f0 <DIO_voidSetPortValue+0x58>
    46bc:	2b 81       	ldd	r18, Y+3	; 0x03
    46be:	3c 81       	ldd	r19, Y+4	; 0x04
    46c0:	22 30       	cpi	r18, 0x02	; 2
    46c2:	31 05       	cpc	r19, r1
    46c4:	2c f4       	brge	.+10     	; 0x46d0 <DIO_voidSetPortValue+0x38>
    46c6:	8b 81       	ldd	r24, Y+3	; 0x03
    46c8:	9c 81       	ldd	r25, Y+4	; 0x04
    46ca:	00 97       	sbiw	r24, 0x00	; 0
    46cc:	61 f0       	breq	.+24     	; 0x46e6 <DIO_voidSetPortValue+0x4e>
    46ce:	1e c0       	rjmp	.+60     	; 0x470c <DIO_voidSetPortValue+0x74>
    46d0:	2b 81       	ldd	r18, Y+3	; 0x03
    46d2:	3c 81       	ldd	r19, Y+4	; 0x04
    46d4:	22 30       	cpi	r18, 0x02	; 2
    46d6:	31 05       	cpc	r19, r1
    46d8:	81 f0       	breq	.+32     	; 0x46fa <DIO_voidSetPortValue+0x62>
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	9c 81       	ldd	r25, Y+4	; 0x04
    46de:	83 30       	cpi	r24, 0x03	; 3
    46e0:	91 05       	cpc	r25, r1
    46e2:	81 f0       	breq	.+32     	; 0x4704 <DIO_voidSetPortValue+0x6c>
    46e4:	13 c0       	rjmp	.+38     	; 0x470c <DIO_voidSetPortValue+0x74>
    {
    case PORTA:
        PORTA_REG = A_u8Value;
    46e6:	eb e3       	ldi	r30, 0x3B	; 59
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	8a 81       	ldd	r24, Y+2	; 0x02
    46ec:	80 83       	st	Z, r24
    46ee:	0e c0       	rjmp	.+28     	; 0x470c <DIO_voidSetPortValue+0x74>
        break;
    case PORTB:
        PORTB_REG = A_u8Value;
    46f0:	e8 e3       	ldi	r30, 0x38	; 56
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
    46f6:	80 83       	st	Z, r24
    46f8:	09 c0       	rjmp	.+18     	; 0x470c <DIO_voidSetPortValue+0x74>
        break;
    case PORTC:
        PORTC_REG = A_u8Value;
    46fa:	e5 e3       	ldi	r30, 0x35	; 53
    46fc:	f0 e0       	ldi	r31, 0x00	; 0
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	80 83       	st	Z, r24
    4702:	04 c0       	rjmp	.+8      	; 0x470c <DIO_voidSetPortValue+0x74>
        break;
    case PORTD:
        PORTD_REG = A_u8Value;
    4704:	e2 e3       	ldi	r30, 0x32	; 50
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	8a 81       	ldd	r24, Y+2	; 0x02
    470a:	80 83       	st	Z, r24
        break;
    }
}
    470c:	0f 90       	pop	r0
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 A_u8Port, u8 A_u8Value)
{
    471a:	df 93       	push	r29
    471c:	cf 93       	push	r28
    471e:	00 d0       	rcall	.+0      	; 0x4720 <DIO_voidSetPortDirection+0x6>
    4720:	00 d0       	rcall	.+0      	; 0x4722 <DIO_voidSetPortDirection+0x8>
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
    4726:	89 83       	std	Y+1, r24	; 0x01
    4728:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8Port)
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	28 2f       	mov	r18, r24
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	3c 83       	std	Y+4, r19	; 0x04
    4732:	2b 83       	std	Y+3, r18	; 0x03
    4734:	8b 81       	ldd	r24, Y+3	; 0x03
    4736:	9c 81       	ldd	r25, Y+4	; 0x04
    4738:	81 30       	cpi	r24, 0x01	; 1
    473a:	91 05       	cpc	r25, r1
    473c:	d1 f0       	breq	.+52     	; 0x4772 <DIO_voidSetPortDirection+0x58>
    473e:	2b 81       	ldd	r18, Y+3	; 0x03
    4740:	3c 81       	ldd	r19, Y+4	; 0x04
    4742:	22 30       	cpi	r18, 0x02	; 2
    4744:	31 05       	cpc	r19, r1
    4746:	2c f4       	brge	.+10     	; 0x4752 <DIO_voidSetPortDirection+0x38>
    4748:	8b 81       	ldd	r24, Y+3	; 0x03
    474a:	9c 81       	ldd	r25, Y+4	; 0x04
    474c:	00 97       	sbiw	r24, 0x00	; 0
    474e:	61 f0       	breq	.+24     	; 0x4768 <DIO_voidSetPortDirection+0x4e>
    4750:	1e c0       	rjmp	.+60     	; 0x478e <DIO_voidSetPortDirection+0x74>
    4752:	2b 81       	ldd	r18, Y+3	; 0x03
    4754:	3c 81       	ldd	r19, Y+4	; 0x04
    4756:	22 30       	cpi	r18, 0x02	; 2
    4758:	31 05       	cpc	r19, r1
    475a:	81 f0       	breq	.+32     	; 0x477c <DIO_voidSetPortDirection+0x62>
    475c:	8b 81       	ldd	r24, Y+3	; 0x03
    475e:	9c 81       	ldd	r25, Y+4	; 0x04
    4760:	83 30       	cpi	r24, 0x03	; 3
    4762:	91 05       	cpc	r25, r1
    4764:	81 f0       	breq	.+32     	; 0x4786 <DIO_voidSetPortDirection+0x6c>
    4766:	13 c0       	rjmp	.+38     	; 0x478e <DIO_voidSetPortDirection+0x74>
    {
    case PORTA:
        DDRA_REG = A_u8Value;
    4768:	ea e3       	ldi	r30, 0x3A	; 58
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	8a 81       	ldd	r24, Y+2	; 0x02
    476e:	80 83       	st	Z, r24
    4770:	0e c0       	rjmp	.+28     	; 0x478e <DIO_voidSetPortDirection+0x74>
        break;
    case PORTB:
        DDRB_REG = A_u8Value;
    4772:	e7 e3       	ldi	r30, 0x37	; 55
    4774:	f0 e0       	ldi	r31, 0x00	; 0
    4776:	8a 81       	ldd	r24, Y+2	; 0x02
    4778:	80 83       	st	Z, r24
    477a:	09 c0       	rjmp	.+18     	; 0x478e <DIO_voidSetPortDirection+0x74>
        break;
    case PORTC:
        DDRC_REG = A_u8Value;
    477c:	e4 e3       	ldi	r30, 0x34	; 52
    477e:	f0 e0       	ldi	r31, 0x00	; 0
    4780:	8a 81       	ldd	r24, Y+2	; 0x02
    4782:	80 83       	st	Z, r24
    4784:	04 c0       	rjmp	.+8      	; 0x478e <DIO_voidSetPortDirection+0x74>
        break;
    case PORTD:
        DDRD_REG = A_u8Value;
    4786:	e1 e3       	ldi	r30, 0x31	; 49
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	8a 81       	ldd	r24, Y+2	; 0x02
    478c:	80 83       	st	Z, r24
        break;
    }
    478e:	0f 90       	pop	r0
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <ADC_voidInit>:
#include "./ADC_Configurations.h"

static void (*ADC_CallBack)(void) = NULLPTR;

void ADC_voidInit(ADC_Prescaler Prescaler, REF_Voltage referance)
{
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	00 d0       	rcall	.+0      	; 0x47a2 <ADC_voidInit+0x6>
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	89 83       	std	Y+1, r24	; 0x01
    47a8:	6a 83       	std	Y+2, r22	; 0x02

    // prescaler division factor
    ADCSRA &= ~(0b111 << ADPS0);
    47aa:	a6 e2       	ldi	r26, 0x26	; 38
    47ac:	b0 e0       	ldi	r27, 0x00	; 0
    47ae:	e6 e2       	ldi	r30, 0x26	; 38
    47b0:	f0 e0       	ldi	r31, 0x00	; 0
    47b2:	80 81       	ld	r24, Z
    47b4:	88 7f       	andi	r24, 0xF8	; 248
    47b6:	8c 93       	st	X, r24
    ADCSRA |= (Prescaler << ADPS0);
    47b8:	a6 e2       	ldi	r26, 0x26	; 38
    47ba:	b0 e0       	ldi	r27, 0x00	; 0
    47bc:	e6 e2       	ldi	r30, 0x26	; 38
    47be:	f0 e0       	ldi	r31, 0x00	; 0
    47c0:	90 81       	ld	r25, Z
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	89 2b       	or	r24, r25
    47c6:	8c 93       	st	X, r24

    // reference selection
    ADMUX &= ~(0b11 << REFS0);
    47c8:	a7 e2       	ldi	r26, 0x27	; 39
    47ca:	b0 e0       	ldi	r27, 0x00	; 0
    47cc:	e7 e2       	ldi	r30, 0x27	; 39
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	80 81       	ld	r24, Z
    47d2:	8f 73       	andi	r24, 0x3F	; 63
    47d4:	8c 93       	st	X, r24
    ADMUX |= (referance << REFS0);
    47d6:	a7 e2       	ldi	r26, 0x27	; 39
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	e7 e2       	ldi	r30, 0x27	; 39
    47dc:	f0 e0       	ldi	r31, 0x00	; 0
    47de:	80 81       	ld	r24, Z
    47e0:	28 2f       	mov	r18, r24
    47e2:	8a 81       	ldd	r24, Y+2	; 0x02
    47e4:	88 2f       	mov	r24, r24
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	00 24       	eor	r0, r0
    47ea:	96 95       	lsr	r25
    47ec:	87 95       	ror	r24
    47ee:	07 94       	ror	r0
    47f0:	96 95       	lsr	r25
    47f2:	87 95       	ror	r24
    47f4:	07 94       	ror	r0
    47f6:	98 2f       	mov	r25, r24
    47f8:	80 2d       	mov	r24, r0
    47fa:	82 2b       	or	r24, r18
    47fc:	8c 93       	st	X, r24

// left or right adjust
#if ADC_LEFT_ADJUST == TRUE
    SET_BIT(ADMUX, ADLAR);
#else
    CLR_BIT(ADMUX, ADLAR);
    47fe:	a7 e2       	ldi	r26, 0x27	; 39
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	e7 e2       	ldi	r30, 0x27	; 39
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	8f 7d       	andi	r24, 0xDF	; 223
    480a:	8c 93       	st	X, r24
#endif

    // Making ADC enable
    SET_BIT(ADCSRA, ADEN);
    480c:	a6 e2       	ldi	r26, 0x26	; 38
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	e6 e2       	ldi	r30, 0x26	; 38
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	80 68       	ori	r24, 0x80	; 128
    4818:	8c 93       	st	X, r24

// auto triggering
#if AUTO_TRIGGERING == TRUE
    SET_BIT(ADCSRA, ADATE);
#else
    CLR_BIT(ADCSRA, ADATE);
    481a:	a6 e2       	ldi	r26, 0x26	; 38
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	e6 e2       	ldi	r30, 0x26	; 38
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	8f 7d       	andi	r24, 0xDF	; 223
    4826:	8c 93       	st	X, r24
#endif
}
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <ADC_u16GetDigitalValueBlocking>:

u16 ADC_u16GetDigitalValueBlocking(ADC_Channel channel)
{
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	00 d0       	rcall	.+0      	; 0x4838 <ADC_u16GetDigitalValueBlocking+0x6>
    4838:	0f 92       	push	r0
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
    483e:	8b 83       	std	Y+3, r24	; 0x03

    u16 local_u16DigitalValue = 0;
    4840:	1a 82       	std	Y+2, r1	; 0x02
    4842:	19 82       	std	Y+1, r1	; 0x01

    // chosing channel
    ADMUX &= ~(0b11111 << MUX0);
    4844:	a7 e2       	ldi	r26, 0x27	; 39
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	e7 e2       	ldi	r30, 0x27	; 39
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	80 81       	ld	r24, Z
    484e:	80 7e       	andi	r24, 0xE0	; 224
    4850:	8c 93       	st	X, r24
    ADMUX |= (channel << MUX0);
    4852:	a7 e2       	ldi	r26, 0x27	; 39
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	e7 e2       	ldi	r30, 0x27	; 39
    4858:	f0 e0       	ldi	r31, 0x00	; 0
    485a:	90 81       	ld	r25, Z
    485c:	8b 81       	ldd	r24, Y+3	; 0x03
    485e:	89 2b       	or	r24, r25
    4860:	8c 93       	st	X, r24

    // starting conversion
    SET_BIT(ADCSRA, ADCS);
    4862:	a6 e2       	ldi	r26, 0x26	; 38
    4864:	b0 e0       	ldi	r27, 0x00	; 0
    4866:	e6 e2       	ldi	r30, 0x26	; 38
    4868:	f0 e0       	ldi	r31, 0x00	; 0
    486a:	80 81       	ld	r24, Z
    486c:	80 64       	ori	r24, 0x40	; 64
    486e:	8c 93       	st	X, r24

    // polling on flag until the conversion is finished
    while (GET_BIT(ADCSRA, ADIF) == 0)
    4870:	e6 e2       	ldi	r30, 0x26	; 38
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	80 81       	ld	r24, Z
    4876:	88 2f       	mov	r24, r24
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	9c 01       	movw	r18, r24
    487c:	2f 7e       	andi	r18, 0xEF	; 239
    487e:	e6 e2       	ldi	r30, 0x26	; 38
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	80 81       	ld	r24, Z
    4884:	88 2f       	mov	r24, r24
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	28 17       	cp	r18, r24
    488a:	39 07       	cpc	r19, r25
    488c:	89 f3       	breq	.-30     	; 0x4870 <ADC_u16GetDigitalValueBlocking+0x3e>
        ;
    // Read value
    local_u16DigitalValue = ((u16)ADCL) | ((u16)(ADCH << 8));
    488e:	e4 e2       	ldi	r30, 0x24	; 36
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	80 81       	ld	r24, Z
    4894:	28 2f       	mov	r18, r24
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	e5 e2       	ldi	r30, 0x25	; 37
    489a:	f0 e0       	ldi	r31, 0x00	; 0
    489c:	80 81       	ld	r24, Z
    489e:	88 2f       	mov	r24, r24
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	98 2f       	mov	r25, r24
    48a4:	88 27       	eor	r24, r24
    48a6:	82 2b       	or	r24, r18
    48a8:	93 2b       	or	r25, r19
    48aa:	9a 83       	std	Y+2, r25	; 0x02
    48ac:	89 83       	std	Y+1, r24	; 0x01

    return local_u16DigitalValue;
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	cf 91       	pop	r28
    48ba:	df 91       	pop	r29
    48bc:	08 95       	ret

000048be <ADC_voidStartConversionAsync>:

void ADC_voidStartConversionAsync(ADC_Channel channel)
{
    48be:	df 93       	push	r29
    48c0:	cf 93       	push	r28
    48c2:	0f 92       	push	r0
    48c4:	cd b7       	in	r28, 0x3d	; 61
    48c6:	de b7       	in	r29, 0x3e	; 62
    48c8:	89 83       	std	Y+1, r24	; 0x01
    // chosing channel
    ADMUX &= ~(0b11111 << MUX0);
    48ca:	a7 e2       	ldi	r26, 0x27	; 39
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	e7 e2       	ldi	r30, 0x27	; 39
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	80 7e       	andi	r24, 0xE0	; 224
    48d6:	8c 93       	st	X, r24
    ADMUX |= (channel << MUX0);
    48d8:	a7 e2       	ldi	r26, 0x27	; 39
    48da:	b0 e0       	ldi	r27, 0x00	; 0
    48dc:	e7 e2       	ldi	r30, 0x27	; 39
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	90 81       	ld	r25, Z
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	89 2b       	or	r24, r25
    48e6:	8c 93       	st	X, r24
    // starting conversion
    SET_BIT(ADCSRA, ADCS);
    48e8:	a6 e2       	ldi	r26, 0x26	; 38
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	e6 e2       	ldi	r30, 0x26	; 38
    48ee:	f0 e0       	ldi	r31, 0x00	; 0
    48f0:	80 81       	ld	r24, Z
    48f2:	80 64       	ori	r24, 0x40	; 64
    48f4:	8c 93       	st	X, r24
}
    48f6:	0f 90       	pop	r0
    48f8:	cf 91       	pop	r28
    48fa:	df 91       	pop	r29
    48fc:	08 95       	ret

000048fe <ADC_u16GetValueNonBlocking>:

u16 ADC_u16GetValueNonBlocking()
{
    48fe:	df 93       	push	r29
    4900:	cf 93       	push	r28
    4902:	00 d0       	rcall	.+0      	; 0x4904 <ADC_u16GetValueNonBlocking+0x6>
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    if (GET_BIT(ADCSRA, ADIF))
    4908:	e6 e2       	ldi	r30, 0x26	; 38
    490a:	f0 e0       	ldi	r31, 0x00	; 0
    490c:	80 81       	ld	r24, Z
    490e:	88 2f       	mov	r24, r24
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	9c 01       	movw	r18, r24
    4914:	2f 7e       	andi	r18, 0xEF	; 239
    4916:	e6 e2       	ldi	r30, 0x26	; 38
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	80 81       	ld	r24, Z
    491c:	88 2f       	mov	r24, r24
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	28 17       	cp	r18, r24
    4922:	39 07       	cpc	r19, r25
    4924:	91 f0       	breq	.+36     	; 0x494a <ADC_u16GetValueNonBlocking+0x4c>
    {
        return (u16)(ADCL) | ((u16)(ADCH << 8));
    4926:	e4 e2       	ldi	r30, 0x24	; 36
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	28 2f       	mov	r18, r24
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	e5 e2       	ldi	r30, 0x25	; 37
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	80 81       	ld	r24, Z
    4936:	88 2f       	mov	r24, r24
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	98 2f       	mov	r25, r24
    493c:	88 27       	eor	r24, r24
    493e:	a9 01       	movw	r20, r18
    4940:	48 2b       	or	r20, r24
    4942:	59 2b       	or	r21, r25
    4944:	5a 83       	std	Y+2, r21	; 0x02
    4946:	49 83       	std	Y+1, r20	; 0x01
    4948:	02 c0       	rjmp	.+4      	; 0x494e <ADC_u16GetValueNonBlocking+0x50>
    }
    return 0;
    494a:	1a 82       	std	Y+2, r1	; 0x02
    494c:	19 82       	std	Y+1, r1	; 0x01
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4952:	0f 90       	pop	r0
    4954:	0f 90       	pop	r0
    4956:	cf 91       	pop	r28
    4958:	df 91       	pop	r29
    495a:	08 95       	ret

0000495c <ADC_voidInterruptEnable>:

/****************************interrupt section******************************/
void ADC_voidInterruptEnable(void)
{
    495c:	df 93       	push	r29
    495e:	cf 93       	push	r28
    4960:	cd b7       	in	r28, 0x3d	; 61
    4962:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADCSRA, ADIE);
    4964:	a6 e2       	ldi	r26, 0x26	; 38
    4966:	b0 e0       	ldi	r27, 0x00	; 0
    4968:	e6 e2       	ldi	r30, 0x26	; 38
    496a:	f0 e0       	ldi	r31, 0x00	; 0
    496c:	80 81       	ld	r24, Z
    496e:	88 60       	ori	r24, 0x08	; 8
    4970:	8c 93       	st	X, r24
}
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	08 95       	ret

00004978 <ADC_voidInterruptDisable>:

void ADC_voidInterruptDisable(void)
{
    4978:	df 93       	push	r29
    497a:	cf 93       	push	r28
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADCSRA, ADIE);
    4980:	a6 e2       	ldi	r26, 0x26	; 38
    4982:	b0 e0       	ldi	r27, 0x00	; 0
    4984:	e6 e2       	ldi	r30, 0x26	; 38
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	80 81       	ld	r24, Z
    498a:	87 7f       	andi	r24, 0xF7	; 247
    498c:	8c 93       	st	X, r24
}
    498e:	cf 91       	pop	r28
    4990:	df 91       	pop	r29
    4992:	08 95       	ret

00004994 <ADC_voidCallBack>:

void ADC_voidCallBack(void (*ptrToLocal)(void))
{
    4994:	df 93       	push	r29
    4996:	cf 93       	push	r28
    4998:	00 d0       	rcall	.+0      	; 0x499a <ADC_voidCallBack+0x6>
    499a:	cd b7       	in	r28, 0x3d	; 61
    499c:	de b7       	in	r29, 0x3e	; 62
    499e:	9a 83       	std	Y+2, r25	; 0x02
    49a0:	89 83       	std	Y+1, r24	; 0x01
    ADC_CallBack = ptrToLocal;
    49a2:	89 81       	ldd	r24, Y+1	; 0x01
    49a4:	9a 81       	ldd	r25, Y+2	; 0x02
    49a6:	90 93 c2 01 	sts	0x01C2, r25
    49aa:	80 93 c1 01 	sts	0x01C1, r24
}
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	cf 91       	pop	r28
    49b4:	df 91       	pop	r29
    49b6:	08 95       	ret

000049b8 <__vector_16>:

ISR(ADC_VECT)
{
    49b8:	1f 92       	push	r1
    49ba:	0f 92       	push	r0
    49bc:	0f b6       	in	r0, 0x3f	; 63
    49be:	0f 92       	push	r0
    49c0:	11 24       	eor	r1, r1
    49c2:	2f 93       	push	r18
    49c4:	3f 93       	push	r19
    49c6:	4f 93       	push	r20
    49c8:	5f 93       	push	r21
    49ca:	6f 93       	push	r22
    49cc:	7f 93       	push	r23
    49ce:	8f 93       	push	r24
    49d0:	9f 93       	push	r25
    49d2:	af 93       	push	r26
    49d4:	bf 93       	push	r27
    49d6:	ef 93       	push	r30
    49d8:	ff 93       	push	r31
    49da:	df 93       	push	r29
    49dc:	cf 93       	push	r28
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
    if (ADC_CallBack != NULLPTR)
    49e2:	80 91 c1 01 	lds	r24, 0x01C1
    49e6:	90 91 c2 01 	lds	r25, 0x01C2
    49ea:	00 97       	sbiw	r24, 0x00	; 0
    49ec:	29 f0       	breq	.+10     	; 0x49f8 <__vector_16+0x40>
        ADC_CallBack();
    49ee:	e0 91 c1 01 	lds	r30, 0x01C1
    49f2:	f0 91 c2 01 	lds	r31, 0x01C2
    49f6:	09 95       	icall
    49f8:	cf 91       	pop	r28
    49fa:	df 91       	pop	r29
    49fc:	ff 91       	pop	r31
    49fe:	ef 91       	pop	r30
    4a00:	bf 91       	pop	r27
    4a02:	af 91       	pop	r26
    4a04:	9f 91       	pop	r25
    4a06:	8f 91       	pop	r24
    4a08:	7f 91       	pop	r23
    4a0a:	6f 91       	pop	r22
    4a0c:	5f 91       	pop	r21
    4a0e:	4f 91       	pop	r20
    4a10:	3f 91       	pop	r19
    4a12:	2f 91       	pop	r18
    4a14:	0f 90       	pop	r0
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	0f 90       	pop	r0
    4a1a:	1f 90       	pop	r1
    4a1c:	18 95       	reti

00004a1e <ULTRASONIC_voidInit>:
static void Func_ICU();
u8 global_u8Flag = 0, noOVF = 0;
u16 t1, t2;

void ULTRASONIC_voidInit(void)
{
    4a1e:	df 93       	push	r29
    4a20:	cf 93       	push	r28
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    TIMER1_voidInit(TIMER1_NORMAL_MODE, TIMER1_PRESCALER_8, TIMER1_COMPARE_OUTPUT_MODE_A_NORMAL, TIMER1_COMPARE_OUTPUT_MODE_B_NORMAL);
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	62 e0       	ldi	r22, 0x02	; 2
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	0e 94 28 17 	call	0x2e50	; 0x2e50 <TIMER1_voidInit>
    TIMER1_voidSetCallBackOVF(Func_OVF);
    4a32:	8f ea       	ldi	r24, 0xAF	; 175
    4a34:	97 e2       	ldi	r25, 0x27	; 39
    4a36:	0e 94 06 1b 	call	0x360c	; 0x360c <TIMER1_voidSetCallBackOVF>
    TIMER1_voidSetCallBackCapture(Func_ICU);
    4a3a:	81 e8       	ldi	r24, 0x81	; 129
    4a3c:	97 e2       	ldi	r25, 0x27	; 39
    4a3e:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <TIMER1_voidSetCallBackCapture>
}
    4a42:	cf 91       	pop	r28
    4a44:	df 91       	pop	r29
    4a46:	08 95       	ret

00004a48 <ULTRASONIC_u16GetDistance>:

u16 ULTRASONIC_u16GetDistance()
{
    4a48:	0f 93       	push	r16
    4a4a:	1f 93       	push	r17
    4a4c:	df 93       	push	r29
    4a4e:	cf 93       	push	r28
    4a50:	cd b7       	in	r28, 0x3d	; 61
    4a52:	de b7       	in	r29, 0x3e	; 62
    4a54:	6c 97       	sbiw	r28, 0x1c	; 28
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	f8 94       	cli
    4a5a:	de bf       	out	0x3e, r29	; 62
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	cd bf       	out	0x3d, r28	; 61
    u16 time;
    /*
        this line not be valid if we use timer in another application
        but for simplicity we consider the timer register equal to zero
    */
    TIMER1_voidSetTCNT1Value(0);
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	0e 94 be 1a 	call	0x357c	; 0x357c <TIMER1_voidSetTCNT1Value>
    // making number of overflow equal to zero to remove its time from calculation, cause
    // it happens before we gave trigger to ultrasonic
    noOVF = 0;
    4a68:	10 92 c4 01 	sts	0x01C4, r1
    global_u8Flag = 0;
    4a6c:	10 92 c3 01 	sts	0x01C3, r1
    DIO_voidSetPinValue(ULTRSONIC_PORT, ULTRSONIC_PIN, PIN_HIGH);
    4a70:	83 e0       	ldi	r24, 0x03	; 3
    4a72:	64 e0       	ldi	r22, 0x04	; 4
    4a74:	41 e0       	ldi	r20, 0x01	; 1
    4a76:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	a0 e2       	ldi	r26, 0x20	; 32
    4a80:	b1 e4       	ldi	r27, 0x41	; 65
    4a82:	8d 8b       	std	Y+21, r24	; 0x15
    4a84:	9e 8b       	std	Y+22, r25	; 0x16
    4a86:	af 8b       	std	Y+23, r26	; 0x17
    4a88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a90:	98 8d       	ldd	r25, Y+24	; 0x18
    4a92:	2b ea       	ldi	r18, 0xAB	; 171
    4a94:	3a ea       	ldi	r19, 0xAA	; 170
    4a96:	4a e2       	ldi	r20, 0x2A	; 42
    4a98:	50 e4       	ldi	r21, 0x40	; 64
    4a9a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	89 8b       	std	Y+17, r24	; 0x11
    4aa4:	9a 8b       	std	Y+18, r25	; 0x12
    4aa6:	ab 8b       	std	Y+19, r26	; 0x13
    4aa8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4aaa:	69 89       	ldd	r22, Y+17	; 0x11
    4aac:	7a 89       	ldd	r23, Y+18	; 0x12
    4aae:	8b 89       	ldd	r24, Y+19	; 0x13
    4ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	40 e8       	ldi	r20, 0x80	; 128
    4ab8:	5f e3       	ldi	r21, 0x3F	; 63
    4aba:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4abe:	88 23       	and	r24, r24
    4ac0:	1c f4       	brge	.+6      	; 0x4ac8 <ULTRASONIC_u16GetDistance+0x80>
		__ticks = 1;
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	88 8b       	std	Y+16, r24	; 0x10
    4ac6:	91 c0       	rjmp	.+290    	; 0x4bea <ULTRASONIC_u16GetDistance+0x1a2>
	else if (__tmp > 255)
    4ac8:	69 89       	ldd	r22, Y+17	; 0x11
    4aca:	7a 89       	ldd	r23, Y+18	; 0x12
    4acc:	8b 89       	ldd	r24, Y+19	; 0x13
    4ace:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	4f e7       	ldi	r20, 0x7F	; 127
    4ad6:	53 e4       	ldi	r21, 0x43	; 67
    4ad8:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4adc:	18 16       	cp	r1, r24
    4ade:	0c f0       	brlt	.+2      	; 0x4ae2 <ULTRASONIC_u16GetDistance+0x9a>
    4ae0:	7b c0       	rjmp	.+246    	; 0x4bd8 <ULTRASONIC_u16GetDistance+0x190>
	{
		_delay_ms(__us / 1000.0);
    4ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	30 e0       	ldi	r19, 0x00	; 0
    4aee:	4a e7       	ldi	r20, 0x7A	; 122
    4af0:	54 e4       	ldi	r21, 0x44	; 68
    4af2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	8c 87       	std	Y+12, r24	; 0x0c
    4afc:	9d 87       	std	Y+13, r25	; 0x0d
    4afe:	ae 87       	std	Y+14, r26	; 0x0e
    4b00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b02:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b04:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	4a ef       	ldi	r20, 0xFA	; 250
    4b10:	54 e4       	ldi	r21, 0x44	; 68
    4b12:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	88 87       	std	Y+8, r24	; 0x08
    4b1c:	99 87       	std	Y+9, r25	; 0x09
    4b1e:	aa 87       	std	Y+10, r26	; 0x0a
    4b20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4b22:	68 85       	ldd	r22, Y+8	; 0x08
    4b24:	79 85       	ldd	r23, Y+9	; 0x09
    4b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	40 e8       	ldi	r20, 0x80	; 128
    4b30:	5f e3       	ldi	r21, 0x3F	; 63
    4b32:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4b36:	88 23       	and	r24, r24
    4b38:	2c f4       	brge	.+10     	; 0x4b44 <ULTRASONIC_u16GetDistance+0xfc>
		__ticks = 1;
    4b3a:	81 e0       	ldi	r24, 0x01	; 1
    4b3c:	90 e0       	ldi	r25, 0x00	; 0
    4b3e:	9f 83       	std	Y+7, r25	; 0x07
    4b40:	8e 83       	std	Y+6, r24	; 0x06
    4b42:	3f c0       	rjmp	.+126    	; 0x4bc2 <ULTRASONIC_u16GetDistance+0x17a>
	else if (__tmp > 65535)
    4b44:	68 85       	ldd	r22, Y+8	; 0x08
    4b46:	79 85       	ldd	r23, Y+9	; 0x09
    4b48:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	3f ef       	ldi	r19, 0xFF	; 255
    4b50:	4f e7       	ldi	r20, 0x7F	; 127
    4b52:	57 e4       	ldi	r21, 0x47	; 71
    4b54:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4b58:	18 16       	cp	r1, r24
    4b5a:	4c f5       	brge	.+82     	; 0x4bae <ULTRASONIC_u16GetDistance+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b60:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b62:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	40 e2       	ldi	r20, 0x20	; 32
    4b6a:	51 e4       	ldi	r21, 0x41	; 65
    4b6c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	bc 01       	movw	r22, r24
    4b76:	cd 01       	movw	r24, r26
    4b78:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	cb 01       	movw	r24, r22
    4b80:	9f 83       	std	Y+7, r25	; 0x07
    4b82:	8e 83       	std	Y+6, r24	; 0x06
    4b84:	0f c0       	rjmp	.+30     	; 0x4ba4 <ULTRASONIC_u16GetDistance+0x15c>
    4b86:	88 ec       	ldi	r24, 0xC8	; 200
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	9d 83       	std	Y+5, r25	; 0x05
    4b8c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b90:	9d 81       	ldd	r25, Y+5	; 0x05
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	f1 f7       	brne	.-4      	; 0x4b92 <ULTRASONIC_u16GetDistance+0x14a>
    4b96:	9d 83       	std	Y+5, r25	; 0x05
    4b98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b9e:	01 97       	sbiw	r24, 0x01	; 1
    4ba0:	9f 83       	std	Y+7, r25	; 0x07
    4ba2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ba8:	00 97       	sbiw	r24, 0x00	; 0
    4baa:	69 f7       	brne	.-38     	; 0x4b86 <ULTRASONIC_u16GetDistance+0x13e>
    4bac:	24 c0       	rjmp	.+72     	; 0x4bf6 <ULTRASONIC_u16GetDistance+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bae:	68 85       	ldd	r22, Y+8	; 0x08
    4bb0:	79 85       	ldd	r23, Y+9	; 0x09
    4bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bb6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	9f 83       	std	Y+7, r25	; 0x07
    4bc0:	8e 83       	std	Y+6, r24	; 0x06
    4bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    4bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    4bc6:	9b 83       	std	Y+3, r25	; 0x03
    4bc8:	8a 83       	std	Y+2, r24	; 0x02
    4bca:	8a 81       	ldd	r24, Y+2	; 0x02
    4bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bce:	01 97       	sbiw	r24, 0x01	; 1
    4bd0:	f1 f7       	brne	.-4      	; 0x4bce <ULTRASONIC_u16GetDistance+0x186>
    4bd2:	9b 83       	std	Y+3, r25	; 0x03
    4bd4:	8a 83       	std	Y+2, r24	; 0x02
    4bd6:	0f c0       	rjmp	.+30     	; 0x4bf6 <ULTRASONIC_u16GetDistance+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4bd8:	69 89       	ldd	r22, Y+17	; 0x11
    4bda:	7a 89       	ldd	r23, Y+18	; 0x12
    4bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bde:	9c 89       	ldd	r25, Y+20	; 0x14
    4be0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	88 8b       	std	Y+16, r24	; 0x10
    4bea:	88 89       	ldd	r24, Y+16	; 0x10
    4bec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
    4bf0:	8a 95       	dec	r24
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <ULTRASONIC_u16GetDistance+0x1a8>
    4bf4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    DIO_voidSetPinValue(ULTRSONIC_PORT, ULTRSONIC_PIN, PIN_LOW);
    4bf6:	83 e0       	ldi	r24, 0x03	; 3
    4bf8:	64 e0       	ldi	r22, 0x04	; 4
    4bfa:	40 e0       	ldi	r20, 0x00	; 0
    4bfc:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    TIMER1_voidInputCaptureEdge(RISING);
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
    TIMER1_voidCaptureInterruptEnable();
    4c06:	0e 94 18 1a 	call	0x3430	; 0x3430 <TIMER1_voidCaptureInterruptEnable>
    while (global_u8Flag < 2)
    4c0a:	80 91 c3 01 	lds	r24, 0x01C3
    4c0e:	82 30       	cpi	r24, 0x02	; 2
    4c10:	e0 f3       	brcs	.-8      	; 0x4c0a <ULTRASONIC_u16GetDistance+0x1c2>
        ;
    time = t2 - t1 + ((u32)noOVF * 65535);
    4c12:	20 91 d7 01 	lds	r18, 0x01D7
    4c16:	30 91 d8 01 	lds	r19, 0x01D8
    4c1a:	80 91 d9 01 	lds	r24, 0x01D9
    4c1e:	90 91 da 01 	lds	r25, 0x01DA
    4c22:	89 01       	movw	r16, r18
    4c24:	08 1b       	sub	r16, r24
    4c26:	19 0b       	sbc	r17, r25
    4c28:	80 91 c4 01 	lds	r24, 0x01C4
    4c2c:	88 2f       	mov	r24, r24
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	a0 e0       	ldi	r26, 0x00	; 0
    4c32:	b0 e0       	ldi	r27, 0x00	; 0
    4c34:	2f ef       	ldi	r18, 0xFF	; 255
    4c36:	3f ef       	ldi	r19, 0xFF	; 255
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	bc 01       	movw	r22, r24
    4c3e:	cd 01       	movw	r24, r26
    4c40:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	80 0f       	add	r24, r16
    4c4a:	91 1f       	adc	r25, r17
    4c4c:	9a 8f       	std	Y+26, r25	; 0x1a
    4c4e:	89 8f       	std	Y+25, r24	; 0x19
    distance = time / 58;
    4c50:	89 8d       	ldd	r24, Y+25	; 0x19
    4c52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4c54:	2a e3       	ldi	r18, 0x3A	; 58
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	b9 01       	movw	r22, r18
    4c5a:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    4c5e:	cb 01       	movw	r24, r22
    4c60:	9c 8f       	std	Y+28, r25	; 0x1c
    4c62:	8b 8f       	std	Y+27, r24	; 0x1b
    TIMER1_voidCaptureInterruptDisable();
    4c64:	0e 94 26 1a 	call	0x344c	; 0x344c <TIMER1_voidCaptureInterruptDisable>
    return distance;
    4c68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
    4c6c:	6c 96       	adiw	r28, 0x1c	; 28
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	f8 94       	cli
    4c72:	de bf       	out	0x3e, r29	; 62
    4c74:	0f be       	out	0x3f, r0	; 63
    4c76:	cd bf       	out	0x3d, r28	; 61
    4c78:	cf 91       	pop	r28
    4c7a:	df 91       	pop	r29
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	08 95       	ret

00004c82 <ULTRASONIC_voidStart>:
    the following method is called periodic check
    it will not be polling on the flag waiting for ultrasonic to finish measurement, No it will
    just give the trigger to ultrasonic and get distance at any time
*/
void ULTRASONIC_voidStart()
{
    4c82:	df 93       	push	r29
    4c84:	cf 93       	push	r28
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	68 97       	sbiw	r28, 0x18	; 24
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	de bf       	out	0x3e, r29	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	cd bf       	out	0x3d, r28	; 61
    if (global_u8Flag == 0)
    4c96:	80 91 c3 01 	lds	r24, 0x01C3
    4c9a:	88 23       	and	r24, r24
    4c9c:	09 f0       	breq	.+2      	; 0x4ca0 <ULTRASONIC_voidStart+0x1e>
    4c9e:	cf c0       	rjmp	.+414    	; 0x4e3e <ULTRASONIC_voidStart+0x1bc>
    {
        DIO_voidSetPinValue(ULTRSONIC_PORT, ULTRSONIC_PIN, PIN_HIGH);
    4ca0:	83 e0       	ldi	r24, 0x03	; 3
    4ca2:	64 e0       	ldi	r22, 0x04	; 4
    4ca4:	41 e0       	ldi	r20, 0x01	; 1
    4ca6:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    4caa:	80 e0       	ldi	r24, 0x00	; 0
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	a0 e2       	ldi	r26, 0x20	; 32
    4cb0:	b1 e4       	ldi	r27, 0x41	; 65
    4cb2:	8d 8b       	std	Y+21, r24	; 0x15
    4cb4:	9e 8b       	std	Y+22, r25	; 0x16
    4cb6:	af 8b       	std	Y+23, r26	; 0x17
    4cb8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4cba:	6d 89       	ldd	r22, Y+21	; 0x15
    4cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    4cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc2:	2b ea       	ldi	r18, 0xAB	; 171
    4cc4:	3a ea       	ldi	r19, 0xAA	; 170
    4cc6:	4a e2       	ldi	r20, 0x2A	; 42
    4cc8:	50 e4       	ldi	r21, 0x40	; 64
    4cca:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4cce:	dc 01       	movw	r26, r24
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	89 8b       	std	Y+17, r24	; 0x11
    4cd4:	9a 8b       	std	Y+18, r25	; 0x12
    4cd6:	ab 8b       	std	Y+19, r26	; 0x13
    4cd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4cda:	69 89       	ldd	r22, Y+17	; 0x11
    4cdc:	7a 89       	ldd	r23, Y+18	; 0x12
    4cde:	8b 89       	ldd	r24, Y+19	; 0x13
    4ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	40 e8       	ldi	r20, 0x80	; 128
    4ce8:	5f e3       	ldi	r21, 0x3F	; 63
    4cea:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4cee:	88 23       	and	r24, r24
    4cf0:	1c f4       	brge	.+6      	; 0x4cf8 <ULTRASONIC_voidStart+0x76>
		__ticks = 1;
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	88 8b       	std	Y+16, r24	; 0x10
    4cf6:	91 c0       	rjmp	.+290    	; 0x4e1a <ULTRASONIC_voidStart+0x198>
	else if (__tmp > 255)
    4cf8:	69 89       	ldd	r22, Y+17	; 0x11
    4cfa:	7a 89       	ldd	r23, Y+18	; 0x12
    4cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    4cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    4d00:	20 e0       	ldi	r18, 0x00	; 0
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	4f e7       	ldi	r20, 0x7F	; 127
    4d06:	53 e4       	ldi	r21, 0x43	; 67
    4d08:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4d0c:	18 16       	cp	r1, r24
    4d0e:	0c f0       	brlt	.+2      	; 0x4d12 <ULTRASONIC_voidStart+0x90>
    4d10:	7b c0       	rjmp	.+246    	; 0x4e08 <ULTRASONIC_voidStart+0x186>
	{
		_delay_ms(__us / 1000.0);
    4d12:	6d 89       	ldd	r22, Y+21	; 0x15
    4d14:	7e 89       	ldd	r23, Y+22	; 0x16
    4d16:	8f 89       	ldd	r24, Y+23	; 0x17
    4d18:	98 8d       	ldd	r25, Y+24	; 0x18
    4d1a:	20 e0       	ldi	r18, 0x00	; 0
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	4a e7       	ldi	r20, 0x7A	; 122
    4d20:	54 e4       	ldi	r21, 0x44	; 68
    4d22:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    4d26:	dc 01       	movw	r26, r24
    4d28:	cb 01       	movw	r24, r22
    4d2a:	8c 87       	std	Y+12, r24	; 0x0c
    4d2c:	9d 87       	std	Y+13, r25	; 0x0d
    4d2e:	ae 87       	std	Y+14, r26	; 0x0e
    4d30:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d32:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d34:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d36:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d38:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	4a ef       	ldi	r20, 0xFA	; 250
    4d40:	54 e4       	ldi	r21, 0x44	; 68
    4d42:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4d46:	dc 01       	movw	r26, r24
    4d48:	cb 01       	movw	r24, r22
    4d4a:	88 87       	std	Y+8, r24	; 0x08
    4d4c:	99 87       	std	Y+9, r25	; 0x09
    4d4e:	aa 87       	std	Y+10, r26	; 0x0a
    4d50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d52:	68 85       	ldd	r22, Y+8	; 0x08
    4d54:	79 85       	ldd	r23, Y+9	; 0x09
    4d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	40 e8       	ldi	r20, 0x80	; 128
    4d60:	5f e3       	ldi	r21, 0x3F	; 63
    4d62:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4d66:	88 23       	and	r24, r24
    4d68:	2c f4       	brge	.+10     	; 0x4d74 <ULTRASONIC_voidStart+0xf2>
		__ticks = 1;
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	9f 83       	std	Y+7, r25	; 0x07
    4d70:	8e 83       	std	Y+6, r24	; 0x06
    4d72:	3f c0       	rjmp	.+126    	; 0x4df2 <ULTRASONIC_voidStart+0x170>
	else if (__tmp > 65535)
    4d74:	68 85       	ldd	r22, Y+8	; 0x08
    4d76:	79 85       	ldd	r23, Y+9	; 0x09
    4d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	3f ef       	ldi	r19, 0xFF	; 255
    4d80:	4f e7       	ldi	r20, 0x7F	; 127
    4d82:	57 e4       	ldi	r21, 0x47	; 71
    4d84:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4d88:	18 16       	cp	r1, r24
    4d8a:	4c f5       	brge	.+82     	; 0x4dde <ULTRASONIC_voidStart+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d90:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d92:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e2       	ldi	r20, 0x20	; 32
    4d9a:	51 e4       	ldi	r21, 0x41	; 65
    4d9c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	bc 01       	movw	r22, r24
    4da6:	cd 01       	movw	r24, r26
    4da8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	9f 83       	std	Y+7, r25	; 0x07
    4db2:	8e 83       	std	Y+6, r24	; 0x06
    4db4:	0f c0       	rjmp	.+30     	; 0x4dd4 <ULTRASONIC_voidStart+0x152>
    4db6:	88 ec       	ldi	r24, 0xC8	; 200
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	9d 83       	std	Y+5, r25	; 0x05
    4dbc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    4dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    4dc2:	01 97       	sbiw	r24, 0x01	; 1
    4dc4:	f1 f7       	brne	.-4      	; 0x4dc2 <ULTRASONIC_voidStart+0x140>
    4dc6:	9d 83       	std	Y+5, r25	; 0x05
    4dc8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dca:	8e 81       	ldd	r24, Y+6	; 0x06
    4dcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	9f 83       	std	Y+7, r25	; 0x07
    4dd2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    4dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    4dd8:	00 97       	sbiw	r24, 0x00	; 0
    4dda:	69 f7       	brne	.-38     	; 0x4db6 <ULTRASONIC_voidStart+0x134>
    4ddc:	24 c0       	rjmp	.+72     	; 0x4e26 <ULTRASONIC_voidStart+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dde:	68 85       	ldd	r22, Y+8	; 0x08
    4de0:	79 85       	ldd	r23, Y+9	; 0x09
    4de2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4de4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4de6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	9f 83       	std	Y+7, r25	; 0x07
    4df0:	8e 83       	std	Y+6, r24	; 0x06
    4df2:	8e 81       	ldd	r24, Y+6	; 0x06
    4df4:	9f 81       	ldd	r25, Y+7	; 0x07
    4df6:	9b 83       	std	Y+3, r25	; 0x03
    4df8:	8a 83       	std	Y+2, r24	; 0x02
    4dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	f1 f7       	brne	.-4      	; 0x4dfe <ULTRASONIC_voidStart+0x17c>
    4e02:	9b 83       	std	Y+3, r25	; 0x03
    4e04:	8a 83       	std	Y+2, r24	; 0x02
    4e06:	0f c0       	rjmp	.+30     	; 0x4e26 <ULTRASONIC_voidStart+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4e08:	69 89       	ldd	r22, Y+17	; 0x11
    4e0a:	7a 89       	ldd	r23, Y+18	; 0x12
    4e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e10:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4e14:	dc 01       	movw	r26, r24
    4e16:	cb 01       	movw	r24, r22
    4e18:	88 8b       	std	Y+16, r24	; 0x10
    4e1a:	88 89       	ldd	r24, Y+16	; 0x10
    4e1c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	8a 95       	dec	r24
    4e22:	f1 f7       	brne	.-4      	; 0x4e20 <ULTRASONIC_voidStart+0x19e>
    4e24:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(10);
        DIO_voidSetPinValue(ULTRSONIC_PORT, ULTRSONIC_PIN, PIN_LOW);
    4e26:	83 e0       	ldi	r24, 0x03	; 3
    4e28:	64 e0       	ldi	r22, 0x04	; 4
    4e2a:	40 e0       	ldi	r20, 0x00	; 0
    4e2c:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        TIMER1_voidInputCaptureEdge(RISING);
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
        TIMER1_voidCaptureInterruptEnable();
    4e36:	0e 94 18 1a 	call	0x3430	; 0x3430 <TIMER1_voidCaptureInterruptEnable>
        TIMER1_voidOverFlowInterruptEnable();
    4e3a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <TIMER1_voidOverFlowInterruptEnable>
    }
}
    4e3e:	68 96       	adiw	r28, 0x18	; 24
    4e40:	0f b6       	in	r0, 0x3f	; 63
    4e42:	f8 94       	cli
    4e44:	de bf       	out	0x3e, r29	; 62
    4e46:	0f be       	out	0x3f, r0	; 63
    4e48:	cd bf       	out	0x3d, r28	; 61
    4e4a:	cf 91       	pop	r28
    4e4c:	df 91       	pop	r29
    4e4e:	08 95       	ret

00004e50 <ULTRASONIC_u8GetDistanceNoBlock>:
u16 ULTRASONIC_u8GetDistanceNoBlock(u16 *Pdistance)
{
    4e50:	0f 93       	push	r16
    4e52:	1f 93       	push	r17
    4e54:	df 93       	push	r29
    4e56:	cf 93       	push	r28
    4e58:	cd b7       	in	r28, 0x3d	; 61
    4e5a:	de b7       	in	r29, 0x3e	; 62
    4e5c:	28 97       	sbiw	r28, 0x08	; 8
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	f8 94       	cli
    4e62:	de bf       	out	0x3e, r29	; 62
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	cd bf       	out	0x3d, r28	; 61
    4e68:	9e 83       	std	Y+6, r25	; 0x06
    4e6a:	8d 83       	std	Y+5, r24	; 0x05
    u16 distance;
    u16 time;
    if (global_u8Flag == 2)
    4e6c:	80 91 c3 01 	lds	r24, 0x01C3
    4e70:	82 30       	cpi	r24, 0x02	; 2
    4e72:	c1 f5       	brne	.+112    	; 0x4ee4 <ULTRASONIC_u8GetDistanceNoBlock+0x94>
    {
        time = t2 - t1 + ((u32)noOVF * 65535);
    4e74:	20 91 d7 01 	lds	r18, 0x01D7
    4e78:	30 91 d8 01 	lds	r19, 0x01D8
    4e7c:	80 91 d9 01 	lds	r24, 0x01D9
    4e80:	90 91 da 01 	lds	r25, 0x01DA
    4e84:	89 01       	movw	r16, r18
    4e86:	08 1b       	sub	r16, r24
    4e88:	19 0b       	sbc	r17, r25
    4e8a:	80 91 c4 01 	lds	r24, 0x01C4
    4e8e:	88 2f       	mov	r24, r24
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	a0 e0       	ldi	r26, 0x00	; 0
    4e94:	b0 e0       	ldi	r27, 0x00	; 0
    4e96:	2f ef       	ldi	r18, 0xFF	; 255
    4e98:	3f ef       	ldi	r19, 0xFF	; 255
    4e9a:	40 e0       	ldi	r20, 0x00	; 0
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	0e 94 c6 3a 	call	0x758c	; 0x758c <__mulsi3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	80 0f       	add	r24, r16
    4eac:	91 1f       	adc	r25, r17
    4eae:	9a 83       	std	Y+2, r25	; 0x02
    4eb0:	89 83       	std	Y+1, r24	; 0x01
        distance = time / 58;
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb6:	2a e3       	ldi	r18, 0x3A	; 58
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	b9 01       	movw	r22, r18
    4ebc:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	9c 83       	std	Y+4, r25	; 0x04
    4ec4:	8b 83       	std	Y+3, r24	; 0x03
        *Pdistance = distance;
    4ec6:	ed 81       	ldd	r30, Y+5	; 0x05
    4ec8:	fe 81       	ldd	r31, Y+6	; 0x06
    4eca:	8b 81       	ldd	r24, Y+3	; 0x03
    4ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ece:	91 83       	std	Z+1, r25	; 0x01
    4ed0:	80 83       	st	Z, r24
        TIMER1_voidOverFlowInterruptEnable();
    4ed2:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <TIMER1_voidOverFlowInterruptEnable>
        global_u8Flag = 0;
    4ed6:	10 92 c3 01 	sts	0x01C3, r1
        return 1;
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	98 87       	std	Y+8, r25	; 0x08
    4ee0:	8f 83       	std	Y+7, r24	; 0x07
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <ULTRASONIC_u8GetDistanceNoBlock+0x98>
    }
    return 0;
    4ee4:	18 86       	std	Y+8, r1	; 0x08
    4ee6:	1f 82       	std	Y+7, r1	; 0x07
    4ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    4eea:	98 85       	ldd	r25, Y+8	; 0x08
}
    4eec:	28 96       	adiw	r28, 0x08	; 8
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	f8 94       	cli
    4ef2:	de bf       	out	0x3e, r29	; 62
    4ef4:	0f be       	out	0x3f, r0	; 63
    4ef6:	cd bf       	out	0x3d, r28	; 61
    4ef8:	cf 91       	pop	r28
    4efa:	df 91       	pop	r29
    4efc:	1f 91       	pop	r17
    4efe:	0f 91       	pop	r16
    4f00:	08 95       	ret

00004f02 <Func_ICU>:

static void Func_ICU(void)
{
    4f02:	df 93       	push	r29
    4f04:	cf 93       	push	r28
    4f06:	cd b7       	in	r28, 0x3d	; 61
    4f08:	de b7       	in	r29, 0x3e	; 62
    if (global_u8Flag == 0)
    4f0a:	80 91 c3 01 	lds	r24, 0x01C3
    4f0e:	88 23       	and	r24, r24
    4f10:	79 f4       	brne	.+30     	; 0x4f30 <Func_ICU+0x2e>
    {
        noOVF = 0;
    4f12:	10 92 c4 01 	sts	0x01C4, r1
        t1 = TIMER1_voidGetICR1();
    4f16:	0e 94 0d 1a 	call	0x341a	; 0x341a <TIMER1_voidGetICR1>
    4f1a:	90 93 da 01 	sts	0x01DA, r25
    4f1e:	80 93 d9 01 	sts	0x01D9, r24
        global_u8Flag = 1;
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	80 93 c3 01 	sts	0x01C3, r24
        TIMER1_voidInputCaptureEdge(FALLING);
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
    4f2e:	14 c0       	rjmp	.+40     	; 0x4f58 <Func_ICU+0x56>
    }
    else if (global_u8Flag == 1)
    4f30:	80 91 c3 01 	lds	r24, 0x01C3
    4f34:	81 30       	cpi	r24, 0x01	; 1
    4f36:	81 f4       	brne	.+32     	; 0x4f58 <Func_ICU+0x56>
    {
        t2 = TIMER1_voidGetICR1();
    4f38:	0e 94 0d 1a 	call	0x341a	; 0x341a <TIMER1_voidGetICR1>
    4f3c:	90 93 d8 01 	sts	0x01D8, r25
    4f40:	80 93 d7 01 	sts	0x01D7, r24
        global_u8Flag = 2;
    4f44:	82 e0       	ldi	r24, 0x02	; 2
    4f46:	80 93 c3 01 	sts	0x01C3, r24
        TIMER1_voidInputCaptureEdge(RISING);
    4f4a:	80 e0       	ldi	r24, 0x00	; 0
    4f4c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <TIMER1_voidInputCaptureEdge>
        TIMER1_voidOverFlowInterruptDisable();
    4f50:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <TIMER1_voidOverFlowInterruptDisable>
        TIMER1_voidCaptureInterruptDisable();
    4f54:	0e 94 26 1a 	call	0x344c	; 0x344c <TIMER1_voidCaptureInterruptDisable>
    }
}
    4f58:	cf 91       	pop	r28
    4f5a:	df 91       	pop	r29
    4f5c:	08 95       	ret

00004f5e <Func_OVF>:

static void Func_OVF(void)
{
    4f5e:	df 93       	push	r29
    4f60:	cf 93       	push	r28
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
    noOVF++;
    4f66:	80 91 c4 01 	lds	r24, 0x01C4
    4f6a:	8f 5f       	subi	r24, 0xFF	; 255
    4f6c:	80 93 c4 01 	sts	0x01C4, r24
}
    4f70:	cf 91       	pop	r28
    4f72:	df 91       	pop	r29
    4f74:	08 95       	ret

00004f76 <STEP_voidFullStep>:
#include "./STEPPER_Configuration.h"

#include <util/delay.h>

void STEP_voidFullStep()
{
    4f76:	df 93       	push	r29
    4f78:	cf 93       	push	r28
    4f7a:	cd b7       	in	r28, 0x3d	; 61
    4f7c:	de b7       	in	r29, 0x3e	; 62
    4f7e:	e8 97       	sbiw	r28, 0x38	; 56
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_HIGH);
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	60 e0       	ldi	r22, 0x00	; 0
    4f8e:	41 e0       	ldi	r20, 0x01	; 1
    4f90:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_LOW);
    4f94:	80 e0       	ldi	r24, 0x00	; 0
    4f96:	61 e0       	ldi	r22, 0x01	; 1
    4f98:	40 e0       	ldi	r20, 0x00	; 0
    4f9a:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	62 e0       	ldi	r22, 0x02	; 2
    4fa2:	41 e0       	ldi	r20, 0x01	; 1
    4fa4:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	63 e0       	ldi	r22, 0x03	; 3
    4fac:	41 e0       	ldi	r20, 0x01	; 1
    4fae:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	a0 e2       	ldi	r26, 0x20	; 32
    4fb8:	b1 e4       	ldi	r27, 0x41	; 65
    4fba:	8d ab       	std	Y+53, r24	; 0x35
    4fbc:	9e ab       	std	Y+54, r25	; 0x36
    4fbe:	af ab       	std	Y+55, r26	; 0x37
    4fc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    4fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    4fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    4fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	4a ef       	ldi	r20, 0xFA	; 250
    4fd0:	54 e4       	ldi	r21, 0x44	; 68
    4fd2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	89 ab       	std	Y+49, r24	; 0x31
    4fdc:	9a ab       	std	Y+50, r25	; 0x32
    4fde:	ab ab       	std	Y+51, r26	; 0x33
    4fe0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4fe2:	69 a9       	ldd	r22, Y+49	; 0x31
    4fe4:	7a a9       	ldd	r23, Y+50	; 0x32
    4fe6:	8b a9       	ldd	r24, Y+51	; 0x33
    4fe8:	9c a9       	ldd	r25, Y+52	; 0x34
    4fea:	20 e0       	ldi	r18, 0x00	; 0
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	40 e8       	ldi	r20, 0x80	; 128
    4ff0:	5f e3       	ldi	r21, 0x3F	; 63
    4ff2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4ff6:	88 23       	and	r24, r24
    4ff8:	2c f4       	brge	.+10     	; 0x5004 <STEP_voidFullStep+0x8e>
		__ticks = 1;
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	98 ab       	std	Y+48, r25	; 0x30
    5000:	8f a7       	std	Y+47, r24	; 0x2f
    5002:	3f c0       	rjmp	.+126    	; 0x5082 <STEP_voidFullStep+0x10c>
	else if (__tmp > 65535)
    5004:	69 a9       	ldd	r22, Y+49	; 0x31
    5006:	7a a9       	ldd	r23, Y+50	; 0x32
    5008:	8b a9       	ldd	r24, Y+51	; 0x33
    500a:	9c a9       	ldd	r25, Y+52	; 0x34
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	3f ef       	ldi	r19, 0xFF	; 255
    5010:	4f e7       	ldi	r20, 0x7F	; 127
    5012:	57 e4       	ldi	r21, 0x47	; 71
    5014:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    5018:	18 16       	cp	r1, r24
    501a:	4c f5       	brge	.+82     	; 0x506e <STEP_voidFullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    501c:	6d a9       	ldd	r22, Y+53	; 0x35
    501e:	7e a9       	ldd	r23, Y+54	; 0x36
    5020:	8f a9       	ldd	r24, Y+55	; 0x37
    5022:	98 ad       	ldd	r25, Y+56	; 0x38
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	40 e2       	ldi	r20, 0x20	; 32
    502a:	51 e4       	ldi	r21, 0x41	; 65
    502c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	bc 01       	movw	r22, r24
    5036:	cd 01       	movw	r24, r26
    5038:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    503c:	dc 01       	movw	r26, r24
    503e:	cb 01       	movw	r24, r22
    5040:	98 ab       	std	Y+48, r25	; 0x30
    5042:	8f a7       	std	Y+47, r24	; 0x2f
    5044:	0f c0       	rjmp	.+30     	; 0x5064 <STEP_voidFullStep+0xee>
    5046:	88 ec       	ldi	r24, 0xC8	; 200
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	9e a7       	std	Y+46, r25	; 0x2e
    504c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    504e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5050:	9e a5       	ldd	r25, Y+46	; 0x2e
    5052:	01 97       	sbiw	r24, 0x01	; 1
    5054:	f1 f7       	brne	.-4      	; 0x5052 <STEP_voidFullStep+0xdc>
    5056:	9e a7       	std	Y+46, r25	; 0x2e
    5058:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505a:	8f a5       	ldd	r24, Y+47	; 0x2f
    505c:	98 a9       	ldd	r25, Y+48	; 0x30
    505e:	01 97       	sbiw	r24, 0x01	; 1
    5060:	98 ab       	std	Y+48, r25	; 0x30
    5062:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5064:	8f a5       	ldd	r24, Y+47	; 0x2f
    5066:	98 a9       	ldd	r25, Y+48	; 0x30
    5068:	00 97       	sbiw	r24, 0x00	; 0
    506a:	69 f7       	brne	.-38     	; 0x5046 <STEP_voidFullStep+0xd0>
    506c:	14 c0       	rjmp	.+40     	; 0x5096 <STEP_voidFullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    506e:	69 a9       	ldd	r22, Y+49	; 0x31
    5070:	7a a9       	ldd	r23, Y+50	; 0x32
    5072:	8b a9       	ldd	r24, Y+51	; 0x33
    5074:	9c a9       	ldd	r25, Y+52	; 0x34
    5076:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    507a:	dc 01       	movw	r26, r24
    507c:	cb 01       	movw	r24, r22
    507e:	98 ab       	std	Y+48, r25	; 0x30
    5080:	8f a7       	std	Y+47, r24	; 0x2f
    5082:	8f a5       	ldd	r24, Y+47	; 0x2f
    5084:	98 a9       	ldd	r25, Y+48	; 0x30
    5086:	9c a7       	std	Y+44, r25	; 0x2c
    5088:	8b a7       	std	Y+43, r24	; 0x2b
    508a:	8b a5       	ldd	r24, Y+43	; 0x2b
    508c:	9c a5       	ldd	r25, Y+44	; 0x2c
    508e:	01 97       	sbiw	r24, 0x01	; 1
    5090:	f1 f7       	brne	.-4      	; 0x508e <STEP_voidFullStep+0x118>
    5092:	9c a7       	std	Y+44, r25	; 0x2c
    5094:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_HIGH);
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	41 e0       	ldi	r20, 0x01	; 1
    509c:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	61 e0       	ldi	r22, 0x01	; 1
    50a4:	41 e0       	ldi	r20, 0x01	; 1
    50a6:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_LOW);
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	62 e0       	ldi	r22, 0x02	; 2
    50ae:	40 e0       	ldi	r20, 0x00	; 0
    50b0:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	63 e0       	ldi	r22, 0x03	; 3
    50b8:	41 e0       	ldi	r20, 0x01	; 1
    50ba:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	a0 e2       	ldi	r26, 0x20	; 32
    50c4:	b1 e4       	ldi	r27, 0x41	; 65
    50c6:	8f a3       	std	Y+39, r24	; 0x27
    50c8:	98 a7       	std	Y+40, r25	; 0x28
    50ca:	a9 a7       	std	Y+41, r26	; 0x29
    50cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ce:	6f a1       	ldd	r22, Y+39	; 0x27
    50d0:	78 a5       	ldd	r23, Y+40	; 0x28
    50d2:	89 a5       	ldd	r24, Y+41	; 0x29
    50d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	4a ef       	ldi	r20, 0xFA	; 250
    50dc:	54 e4       	ldi	r21, 0x44	; 68
    50de:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	8b a3       	std	Y+35, r24	; 0x23
    50e8:	9c a3       	std	Y+36, r25	; 0x24
    50ea:	ad a3       	std	Y+37, r26	; 0x25
    50ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50ee:	6b a1       	ldd	r22, Y+35	; 0x23
    50f0:	7c a1       	ldd	r23, Y+36	; 0x24
    50f2:	8d a1       	ldd	r24, Y+37	; 0x25
    50f4:	9e a1       	ldd	r25, Y+38	; 0x26
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	5f e3       	ldi	r21, 0x3F	; 63
    50fe:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    5102:	88 23       	and	r24, r24
    5104:	2c f4       	brge	.+10     	; 0x5110 <STEP_voidFullStep+0x19a>
		__ticks = 1;
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	9a a3       	std	Y+34, r25	; 0x22
    510c:	89 a3       	std	Y+33, r24	; 0x21
    510e:	3f c0       	rjmp	.+126    	; 0x518e <STEP_voidFullStep+0x218>
	else if (__tmp > 65535)
    5110:	6b a1       	ldd	r22, Y+35	; 0x23
    5112:	7c a1       	ldd	r23, Y+36	; 0x24
    5114:	8d a1       	ldd	r24, Y+37	; 0x25
    5116:	9e a1       	ldd	r25, Y+38	; 0x26
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	3f ef       	ldi	r19, 0xFF	; 255
    511c:	4f e7       	ldi	r20, 0x7F	; 127
    511e:	57 e4       	ldi	r21, 0x47	; 71
    5120:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    5124:	18 16       	cp	r1, r24
    5126:	4c f5       	brge	.+82     	; 0x517a <STEP_voidFullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5128:	6f a1       	ldd	r22, Y+39	; 0x27
    512a:	78 a5       	ldd	r23, Y+40	; 0x28
    512c:	89 a5       	ldd	r24, Y+41	; 0x29
    512e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e2       	ldi	r20, 0x20	; 32
    5136:	51 e4       	ldi	r21, 0x41	; 65
    5138:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    513c:	dc 01       	movw	r26, r24
    513e:	cb 01       	movw	r24, r22
    5140:	bc 01       	movw	r22, r24
    5142:	cd 01       	movw	r24, r26
    5144:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	9a a3       	std	Y+34, r25	; 0x22
    514e:	89 a3       	std	Y+33, r24	; 0x21
    5150:	0f c0       	rjmp	.+30     	; 0x5170 <STEP_voidFullStep+0x1fa>
    5152:	88 ec       	ldi	r24, 0xC8	; 200
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	98 a3       	std	Y+32, r25	; 0x20
    5158:	8f 8f       	std	Y+31, r24	; 0x1f
    515a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    515c:	98 a1       	ldd	r25, Y+32	; 0x20
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	f1 f7       	brne	.-4      	; 0x515e <STEP_voidFullStep+0x1e8>
    5162:	98 a3       	std	Y+32, r25	; 0x20
    5164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5166:	89 a1       	ldd	r24, Y+33	; 0x21
    5168:	9a a1       	ldd	r25, Y+34	; 0x22
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	9a a3       	std	Y+34, r25	; 0x22
    516e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5170:	89 a1       	ldd	r24, Y+33	; 0x21
    5172:	9a a1       	ldd	r25, Y+34	; 0x22
    5174:	00 97       	sbiw	r24, 0x00	; 0
    5176:	69 f7       	brne	.-38     	; 0x5152 <STEP_voidFullStep+0x1dc>
    5178:	14 c0       	rjmp	.+40     	; 0x51a2 <STEP_voidFullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    517a:	6b a1       	ldd	r22, Y+35	; 0x23
    517c:	7c a1       	ldd	r23, Y+36	; 0x24
    517e:	8d a1       	ldd	r24, Y+37	; 0x25
    5180:	9e a1       	ldd	r25, Y+38	; 0x26
    5182:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	9a a3       	std	Y+34, r25	; 0x22
    518c:	89 a3       	std	Y+33, r24	; 0x21
    518e:	89 a1       	ldd	r24, Y+33	; 0x21
    5190:	9a a1       	ldd	r25, Y+34	; 0x22
    5192:	9e 8f       	std	Y+30, r25	; 0x1e
    5194:	8d 8f       	std	Y+29, r24	; 0x1d
    5196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <STEP_voidFullStep+0x224>
    519e:	9e 8f       	std	Y+30, r25	; 0x1e
    51a0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_HIGH);
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	60 e0       	ldi	r22, 0x00	; 0
    51a6:	41 e0       	ldi	r20, 0x01	; 1
    51a8:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
    51ac:	80 e0       	ldi	r24, 0x00	; 0
    51ae:	61 e0       	ldi	r22, 0x01	; 1
    51b0:	41 e0       	ldi	r20, 0x01	; 1
    51b2:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
    51b6:	80 e0       	ldi	r24, 0x00	; 0
    51b8:	62 e0       	ldi	r22, 0x02	; 2
    51ba:	41 e0       	ldi	r20, 0x01	; 1
    51bc:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_LOW);
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	63 e0       	ldi	r22, 0x03	; 3
    51c4:	40 e0       	ldi	r20, 0x00	; 0
    51c6:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	a0 e2       	ldi	r26, 0x20	; 32
    51d0:	b1 e4       	ldi	r27, 0x41	; 65
    51d2:	89 8f       	std	Y+25, r24	; 0x19
    51d4:	9a 8f       	std	Y+26, r25	; 0x1a
    51d6:	ab 8f       	std	Y+27, r26	; 0x1b
    51d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51da:	69 8d       	ldd	r22, Y+25	; 0x19
    51dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	4a ef       	ldi	r20, 0xFA	; 250
    51e8:	54 e4       	ldi	r21, 0x44	; 68
    51ea:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	8d 8b       	std	Y+21, r24	; 0x15
    51f4:	9e 8b       	std	Y+22, r25	; 0x16
    51f6:	af 8b       	std	Y+23, r26	; 0x17
    51f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51fa:	6d 89       	ldd	r22, Y+21	; 0x15
    51fc:	7e 89       	ldd	r23, Y+22	; 0x16
    51fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5200:	98 8d       	ldd	r25, Y+24	; 0x18
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e8       	ldi	r20, 0x80	; 128
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    520e:	88 23       	and	r24, r24
    5210:	2c f4       	brge	.+10     	; 0x521c <STEP_voidFullStep+0x2a6>
		__ticks = 1;
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	9c 8b       	std	Y+20, r25	; 0x14
    5218:	8b 8b       	std	Y+19, r24	; 0x13
    521a:	3f c0       	rjmp	.+126    	; 0x529a <STEP_voidFullStep+0x324>
	else if (__tmp > 65535)
    521c:	6d 89       	ldd	r22, Y+21	; 0x15
    521e:	7e 89       	ldd	r23, Y+22	; 0x16
    5220:	8f 89       	ldd	r24, Y+23	; 0x17
    5222:	98 8d       	ldd	r25, Y+24	; 0x18
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	3f ef       	ldi	r19, 0xFF	; 255
    5228:	4f e7       	ldi	r20, 0x7F	; 127
    522a:	57 e4       	ldi	r21, 0x47	; 71
    522c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    5230:	18 16       	cp	r1, r24
    5232:	4c f5       	brge	.+82     	; 0x5286 <STEP_voidFullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5234:	69 8d       	ldd	r22, Y+25	; 0x19
    5236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    523a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	40 e2       	ldi	r20, 0x20	; 32
    5242:	51 e4       	ldi	r21, 0x41	; 65
    5244:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	bc 01       	movw	r22, r24
    524e:	cd 01       	movw	r24, r26
    5250:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5254:	dc 01       	movw	r26, r24
    5256:	cb 01       	movw	r24, r22
    5258:	9c 8b       	std	Y+20, r25	; 0x14
    525a:	8b 8b       	std	Y+19, r24	; 0x13
    525c:	0f c0       	rjmp	.+30     	; 0x527c <STEP_voidFullStep+0x306>
    525e:	88 ec       	ldi	r24, 0xC8	; 200
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	9a 8b       	std	Y+18, r25	; 0x12
    5264:	89 8b       	std	Y+17, r24	; 0x11
    5266:	89 89       	ldd	r24, Y+17	; 0x11
    5268:	9a 89       	ldd	r25, Y+18	; 0x12
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	f1 f7       	brne	.-4      	; 0x526a <STEP_voidFullStep+0x2f4>
    526e:	9a 8b       	std	Y+18, r25	; 0x12
    5270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5272:	8b 89       	ldd	r24, Y+19	; 0x13
    5274:	9c 89       	ldd	r25, Y+20	; 0x14
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	9c 8b       	std	Y+20, r25	; 0x14
    527a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527c:	8b 89       	ldd	r24, Y+19	; 0x13
    527e:	9c 89       	ldd	r25, Y+20	; 0x14
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	69 f7       	brne	.-38     	; 0x525e <STEP_voidFullStep+0x2e8>
    5284:	14 c0       	rjmp	.+40     	; 0x52ae <STEP_voidFullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5286:	6d 89       	ldd	r22, Y+21	; 0x15
    5288:	7e 89       	ldd	r23, Y+22	; 0x16
    528a:	8f 89       	ldd	r24, Y+23	; 0x17
    528c:	98 8d       	ldd	r25, Y+24	; 0x18
    528e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	9c 8b       	std	Y+20, r25	; 0x14
    5298:	8b 8b       	std	Y+19, r24	; 0x13
    529a:	8b 89       	ldd	r24, Y+19	; 0x13
    529c:	9c 89       	ldd	r25, Y+20	; 0x14
    529e:	98 8b       	std	Y+16, r25	; 0x10
    52a0:	8f 87       	std	Y+15, r24	; 0x0f
    52a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52a4:	98 89       	ldd	r25, Y+16	; 0x10
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <STEP_voidFullStep+0x330>
    52aa:	98 8b       	std	Y+16, r25	; 0x10
    52ac:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_LOW);
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	60 e0       	ldi	r22, 0x00	; 0
    52b2:	40 e0       	ldi	r20, 0x00	; 0
    52b4:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	61 e0       	ldi	r22, 0x01	; 1
    52bc:	41 e0       	ldi	r20, 0x01	; 1
    52be:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
    52c2:	80 e0       	ldi	r24, 0x00	; 0
    52c4:	62 e0       	ldi	r22, 0x02	; 2
    52c6:	41 e0       	ldi	r20, 0x01	; 1
    52c8:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	63 e0       	ldi	r22, 0x03	; 3
    52d0:	41 e0       	ldi	r20, 0x01	; 1
    52d2:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	a0 e2       	ldi	r26, 0x20	; 32
    52dc:	b1 e4       	ldi	r27, 0x41	; 65
    52de:	8b 87       	std	Y+11, r24	; 0x0b
    52e0:	9c 87       	std	Y+12, r25	; 0x0c
    52e2:	ad 87       	std	Y+13, r26	; 0x0d
    52e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    52e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    52ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	4a ef       	ldi	r20, 0xFA	; 250
    52f4:	54 e4       	ldi	r21, 0x44	; 68
    52f6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	8f 83       	std	Y+7, r24	; 0x07
    5300:	98 87       	std	Y+8, r25	; 0x08
    5302:	a9 87       	std	Y+9, r26	; 0x09
    5304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5306:	6f 81       	ldd	r22, Y+7	; 0x07
    5308:	78 85       	ldd	r23, Y+8	; 0x08
    530a:	89 85       	ldd	r24, Y+9	; 0x09
    530c:	9a 85       	ldd	r25, Y+10	; 0x0a
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	40 e8       	ldi	r20, 0x80	; 128
    5314:	5f e3       	ldi	r21, 0x3F	; 63
    5316:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    531a:	88 23       	and	r24, r24
    531c:	2c f4       	brge	.+10     	; 0x5328 <STEP_voidFullStep+0x3b2>
		__ticks = 1;
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	9e 83       	std	Y+6, r25	; 0x06
    5324:	8d 83       	std	Y+5, r24	; 0x05
    5326:	3f c0       	rjmp	.+126    	; 0x53a6 <STEP_voidFullStep+0x430>
	else if (__tmp > 65535)
    5328:	6f 81       	ldd	r22, Y+7	; 0x07
    532a:	78 85       	ldd	r23, Y+8	; 0x08
    532c:	89 85       	ldd	r24, Y+9	; 0x09
    532e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	3f ef       	ldi	r19, 0xFF	; 255
    5334:	4f e7       	ldi	r20, 0x7F	; 127
    5336:	57 e4       	ldi	r21, 0x47	; 71
    5338:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    533c:	18 16       	cp	r1, r24
    533e:	4c f5       	brge	.+82     	; 0x5392 <STEP_voidFullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5340:	6b 85       	ldd	r22, Y+11	; 0x0b
    5342:	7c 85       	ldd	r23, Y+12	; 0x0c
    5344:	8d 85       	ldd	r24, Y+13	; 0x0d
    5346:	9e 85       	ldd	r25, Y+14	; 0x0e
    5348:	20 e0       	ldi	r18, 0x00	; 0
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	40 e2       	ldi	r20, 0x20	; 32
    534e:	51 e4       	ldi	r21, 0x41	; 65
    5350:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5354:	dc 01       	movw	r26, r24
    5356:	cb 01       	movw	r24, r22
    5358:	bc 01       	movw	r22, r24
    535a:	cd 01       	movw	r24, r26
    535c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	9e 83       	std	Y+6, r25	; 0x06
    5366:	8d 83       	std	Y+5, r24	; 0x05
    5368:	0f c0       	rjmp	.+30     	; 0x5388 <STEP_voidFullStep+0x412>
    536a:	88 ec       	ldi	r24, 0xC8	; 200
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	9c 83       	std	Y+4, r25	; 0x04
    5370:	8b 83       	std	Y+3, r24	; 0x03
    5372:	8b 81       	ldd	r24, Y+3	; 0x03
    5374:	9c 81       	ldd	r25, Y+4	; 0x04
    5376:	01 97       	sbiw	r24, 0x01	; 1
    5378:	f1 f7       	brne	.-4      	; 0x5376 <STEP_voidFullStep+0x400>
    537a:	9c 83       	std	Y+4, r25	; 0x04
    537c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    537e:	8d 81       	ldd	r24, Y+5	; 0x05
    5380:	9e 81       	ldd	r25, Y+6	; 0x06
    5382:	01 97       	sbiw	r24, 0x01	; 1
    5384:	9e 83       	std	Y+6, r25	; 0x06
    5386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5388:	8d 81       	ldd	r24, Y+5	; 0x05
    538a:	9e 81       	ldd	r25, Y+6	; 0x06
    538c:	00 97       	sbiw	r24, 0x00	; 0
    538e:	69 f7       	brne	.-38     	; 0x536a <STEP_voidFullStep+0x3f4>
    5390:	14 c0       	rjmp	.+40     	; 0x53ba <STEP_voidFullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5392:	6f 81       	ldd	r22, Y+7	; 0x07
    5394:	78 85       	ldd	r23, Y+8	; 0x08
    5396:	89 85       	ldd	r24, Y+9	; 0x09
    5398:	9a 85       	ldd	r25, Y+10	; 0x0a
    539a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	9e 83       	std	Y+6, r25	; 0x06
    53a4:	8d 83       	std	Y+5, r24	; 0x05
    53a6:	8d 81       	ldd	r24, Y+5	; 0x05
    53a8:	9e 81       	ldd	r25, Y+6	; 0x06
    53aa:	9a 83       	std	Y+2, r25	; 0x02
    53ac:	89 83       	std	Y+1, r24	; 0x01
    53ae:	89 81       	ldd	r24, Y+1	; 0x01
    53b0:	9a 81       	ldd	r25, Y+2	; 0x02
    53b2:	01 97       	sbiw	r24, 0x01	; 1
    53b4:	f1 f7       	brne	.-4      	; 0x53b2 <STEP_voidFullStep+0x43c>
    53b6:	9a 83       	std	Y+2, r25	; 0x02
    53b8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    53ba:	e8 96       	adiw	r28, 0x38	; 56
    53bc:	0f b6       	in	r0, 0x3f	; 63
    53be:	f8 94       	cli
    53c0:	de bf       	out	0x3e, r29	; 62
    53c2:	0f be       	out	0x3f, r0	; 63
    53c4:	cd bf       	out	0x3d, r28	; 61
    53c6:	cf 91       	pop	r28
    53c8:	df 91       	pop	r29
    53ca:	08 95       	ret

000053cc <STEP_voidMotorAngle>:

void STEP_voidMotorAngle(u32 A_u32Angle)
{
    53cc:	df 93       	push	r29
    53ce:	cf 93       	push	r28
    53d0:	cd b7       	in	r28, 0x3d	; 61
    53d2:	de b7       	in	r29, 0x3e	; 62
    53d4:	c0 54       	subi	r28, 0x40	; 64
    53d6:	d0 40       	sbci	r29, 0x00	; 0
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	de bf       	out	0x3e, r29	; 62
    53de:	0f be       	out	0x3f, r0	; 63
    53e0:	cd bf       	out	0x3d, r28	; 61
    53e2:	fe 01       	movw	r30, r28
    53e4:	ff 96       	adiw	r30, 0x3f	; 63
    53e6:	91 83       	std	Z+1, r25	; 0x01
    53e8:	80 83       	st	Z, r24
    u32 local_u32Angle = ((NO_OF_STEPS_FOR_360 * A_u32Angle) / CIRCLE_ANGLE);
    53ea:	fe 01       	movw	r30, r28
    53ec:	ff 96       	adiw	r30, 0x3f	; 63
    53ee:	80 81       	ld	r24, Z
    53f0:	91 81       	ldd	r25, Z+1	; 0x01
    53f2:	98 2f       	mov	r25, r24
    53f4:	88 27       	eor	r24, r24
    53f6:	99 0f       	add	r25, r25
    53f8:	99 0f       	add	r25, r25
    53fa:	99 0f       	add	r25, r25
    53fc:	28 e6       	ldi	r18, 0x68	; 104
    53fe:	31 e0       	ldi	r19, 0x01	; 1
    5400:	b9 01       	movw	r22, r18
    5402:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    5406:	cb 01       	movw	r24, r22
    5408:	9e af       	std	Y+62, r25	; 0x3e
    540a:	8d af       	std	Y+61, r24	; 0x3d
    u32 local_u32Steps = local_u32Angle / NO_OF_COILS;
    540c:	8d ad       	ldd	r24, Y+61	; 0x3d
    540e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5410:	96 95       	lsr	r25
    5412:	87 95       	ror	r24
    5414:	96 95       	lsr	r25
    5416:	87 95       	ror	r24
    5418:	9c af       	std	Y+60, r25	; 0x3c
    541a:	8b af       	std	Y+59, r24	; 0x3b
    for (u16 i = 0; i < local_u32Steps; i++)
    541c:	1a ae       	std	Y+58, r1	; 0x3a
    541e:	19 ae       	std	Y+57, r1	; 0x39
    5420:	1d c2       	rjmp	.+1082   	; 0x585c <STEP_voidMotorAngle+0x490>
    {
        DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_HIGH);
    5422:	80 e0       	ldi	r24, 0x00	; 0
    5424:	60 e0       	ldi	r22, 0x00	; 0
    5426:	41 e0       	ldi	r20, 0x01	; 1
    5428:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_LOW);
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	61 e0       	ldi	r22, 0x01	; 1
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	62 e0       	ldi	r22, 0x02	; 2
    543a:	41 e0       	ldi	r20, 0x01	; 1
    543c:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	63 e0       	ldi	r22, 0x03	; 3
    5444:	41 e0       	ldi	r20, 0x01	; 1
    5446:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	a0 e2       	ldi	r26, 0x20	; 32
    5450:	b1 e4       	ldi	r27, 0x41	; 65
    5452:	8d ab       	std	Y+53, r24	; 0x35
    5454:	9e ab       	std	Y+54, r25	; 0x36
    5456:	af ab       	std	Y+55, r26	; 0x37
    5458:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    545a:	6d a9       	ldd	r22, Y+53	; 0x35
    545c:	7e a9       	ldd	r23, Y+54	; 0x36
    545e:	8f a9       	ldd	r24, Y+55	; 0x37
    5460:	98 ad       	ldd	r25, Y+56	; 0x38
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	4a ef       	ldi	r20, 0xFA	; 250
    5468:	54 e4       	ldi	r21, 0x44	; 68
    546a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    546e:	dc 01       	movw	r26, r24
    5470:	cb 01       	movw	r24, r22
    5472:	89 ab       	std	Y+49, r24	; 0x31
    5474:	9a ab       	std	Y+50, r25	; 0x32
    5476:	ab ab       	std	Y+51, r26	; 0x33
    5478:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    547a:	69 a9       	ldd	r22, Y+49	; 0x31
    547c:	7a a9       	ldd	r23, Y+50	; 0x32
    547e:	8b a9       	ldd	r24, Y+51	; 0x33
    5480:	9c a9       	ldd	r25, Y+52	; 0x34
    5482:	20 e0       	ldi	r18, 0x00	; 0
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	40 e8       	ldi	r20, 0x80	; 128
    5488:	5f e3       	ldi	r21, 0x3F	; 63
    548a:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    548e:	88 23       	and	r24, r24
    5490:	2c f4       	brge	.+10     	; 0x549c <STEP_voidMotorAngle+0xd0>
		__ticks = 1;
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	98 ab       	std	Y+48, r25	; 0x30
    5498:	8f a7       	std	Y+47, r24	; 0x2f
    549a:	3f c0       	rjmp	.+126    	; 0x551a <STEP_voidMotorAngle+0x14e>
	else if (__tmp > 65535)
    549c:	69 a9       	ldd	r22, Y+49	; 0x31
    549e:	7a a9       	ldd	r23, Y+50	; 0x32
    54a0:	8b a9       	ldd	r24, Y+51	; 0x33
    54a2:	9c a9       	ldd	r25, Y+52	; 0x34
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	3f ef       	ldi	r19, 0xFF	; 255
    54a8:	4f e7       	ldi	r20, 0x7F	; 127
    54aa:	57 e4       	ldi	r21, 0x47	; 71
    54ac:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    54b0:	18 16       	cp	r1, r24
    54b2:	4c f5       	brge	.+82     	; 0x5506 <STEP_voidMotorAngle+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54b4:	6d a9       	ldd	r22, Y+53	; 0x35
    54b6:	7e a9       	ldd	r23, Y+54	; 0x36
    54b8:	8f a9       	ldd	r24, Y+55	; 0x37
    54ba:	98 ad       	ldd	r25, Y+56	; 0x38
    54bc:	20 e0       	ldi	r18, 0x00	; 0
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	40 e2       	ldi	r20, 0x20	; 32
    54c2:	51 e4       	ldi	r21, 0x41	; 65
    54c4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	bc 01       	movw	r22, r24
    54ce:	cd 01       	movw	r24, r26
    54d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	98 ab       	std	Y+48, r25	; 0x30
    54da:	8f a7       	std	Y+47, r24	; 0x2f
    54dc:	0f c0       	rjmp	.+30     	; 0x54fc <STEP_voidMotorAngle+0x130>
    54de:	88 ec       	ldi	r24, 0xC8	; 200
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	9e a7       	std	Y+46, r25	; 0x2e
    54e4:	8d a7       	std	Y+45, r24	; 0x2d
    54e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    54e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	f1 f7       	brne	.-4      	; 0x54ea <STEP_voidMotorAngle+0x11e>
    54ee:	9e a7       	std	Y+46, r25	; 0x2e
    54f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    54f4:	98 a9       	ldd	r25, Y+48	; 0x30
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	98 ab       	std	Y+48, r25	; 0x30
    54fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    54fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5500:	00 97       	sbiw	r24, 0x00	; 0
    5502:	69 f7       	brne	.-38     	; 0x54de <STEP_voidMotorAngle+0x112>
    5504:	14 c0       	rjmp	.+40     	; 0x552e <STEP_voidMotorAngle+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5506:	69 a9       	ldd	r22, Y+49	; 0x31
    5508:	7a a9       	ldd	r23, Y+50	; 0x32
    550a:	8b a9       	ldd	r24, Y+51	; 0x33
    550c:	9c a9       	ldd	r25, Y+52	; 0x34
    550e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5512:	dc 01       	movw	r26, r24
    5514:	cb 01       	movw	r24, r22
    5516:	98 ab       	std	Y+48, r25	; 0x30
    5518:	8f a7       	std	Y+47, r24	; 0x2f
    551a:	8f a5       	ldd	r24, Y+47	; 0x2f
    551c:	98 a9       	ldd	r25, Y+48	; 0x30
    551e:	9c a7       	std	Y+44, r25	; 0x2c
    5520:	8b a7       	std	Y+43, r24	; 0x2b
    5522:	8b a5       	ldd	r24, Y+43	; 0x2b
    5524:	9c a5       	ldd	r25, Y+44	; 0x2c
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	f1 f7       	brne	.-4      	; 0x5526 <STEP_voidMotorAngle+0x15a>
    552a:	9c a7       	std	Y+44, r25	; 0x2c
    552c:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(10);
        DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_HIGH);
    552e:	80 e0       	ldi	r24, 0x00	; 0
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	41 e0       	ldi	r20, 0x01	; 1
    5534:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
    5538:	80 e0       	ldi	r24, 0x00	; 0
    553a:	61 e0       	ldi	r22, 0x01	; 1
    553c:	41 e0       	ldi	r20, 0x01	; 1
    553e:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_LOW);
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	62 e0       	ldi	r22, 0x02	; 2
    5546:	40 e0       	ldi	r20, 0x00	; 0
    5548:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	63 e0       	ldi	r22, 0x03	; 3
    5550:	41 e0       	ldi	r20, 0x01	; 1
    5552:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    5556:	80 e0       	ldi	r24, 0x00	; 0
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	a0 e2       	ldi	r26, 0x20	; 32
    555c:	b1 e4       	ldi	r27, 0x41	; 65
    555e:	8f a3       	std	Y+39, r24	; 0x27
    5560:	98 a7       	std	Y+40, r25	; 0x28
    5562:	a9 a7       	std	Y+41, r26	; 0x29
    5564:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5566:	6f a1       	ldd	r22, Y+39	; 0x27
    5568:	78 a5       	ldd	r23, Y+40	; 0x28
    556a:	89 a5       	ldd	r24, Y+41	; 0x29
    556c:	9a a5       	ldd	r25, Y+42	; 0x2a
    556e:	20 e0       	ldi	r18, 0x00	; 0
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	4a ef       	ldi	r20, 0xFA	; 250
    5574:	54 e4       	ldi	r21, 0x44	; 68
    5576:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    557a:	dc 01       	movw	r26, r24
    557c:	cb 01       	movw	r24, r22
    557e:	8b a3       	std	Y+35, r24	; 0x23
    5580:	9c a3       	std	Y+36, r25	; 0x24
    5582:	ad a3       	std	Y+37, r26	; 0x25
    5584:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5586:	6b a1       	ldd	r22, Y+35	; 0x23
    5588:	7c a1       	ldd	r23, Y+36	; 0x24
    558a:	8d a1       	ldd	r24, Y+37	; 0x25
    558c:	9e a1       	ldd	r25, Y+38	; 0x26
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e8       	ldi	r20, 0x80	; 128
    5594:	5f e3       	ldi	r21, 0x3F	; 63
    5596:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    559a:	88 23       	and	r24, r24
    559c:	2c f4       	brge	.+10     	; 0x55a8 <STEP_voidMotorAngle+0x1dc>
		__ticks = 1;
    559e:	81 e0       	ldi	r24, 0x01	; 1
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	9a a3       	std	Y+34, r25	; 0x22
    55a4:	89 a3       	std	Y+33, r24	; 0x21
    55a6:	3f c0       	rjmp	.+126    	; 0x5626 <STEP_voidMotorAngle+0x25a>
	else if (__tmp > 65535)
    55a8:	6b a1       	ldd	r22, Y+35	; 0x23
    55aa:	7c a1       	ldd	r23, Y+36	; 0x24
    55ac:	8d a1       	ldd	r24, Y+37	; 0x25
    55ae:	9e a1       	ldd	r25, Y+38	; 0x26
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	3f ef       	ldi	r19, 0xFF	; 255
    55b4:	4f e7       	ldi	r20, 0x7F	; 127
    55b6:	57 e4       	ldi	r21, 0x47	; 71
    55b8:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    55bc:	18 16       	cp	r1, r24
    55be:	4c f5       	brge	.+82     	; 0x5612 <STEP_voidMotorAngle+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55c0:	6f a1       	ldd	r22, Y+39	; 0x27
    55c2:	78 a5       	ldd	r23, Y+40	; 0x28
    55c4:	89 a5       	ldd	r24, Y+41	; 0x29
    55c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	40 e2       	ldi	r20, 0x20	; 32
    55ce:	51 e4       	ldi	r21, 0x41	; 65
    55d0:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	bc 01       	movw	r22, r24
    55da:	cd 01       	movw	r24, r26
    55dc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	9a a3       	std	Y+34, r25	; 0x22
    55e6:	89 a3       	std	Y+33, r24	; 0x21
    55e8:	0f c0       	rjmp	.+30     	; 0x5608 <STEP_voidMotorAngle+0x23c>
    55ea:	88 ec       	ldi	r24, 0xC8	; 200
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	98 a3       	std	Y+32, r25	; 0x20
    55f0:	8f 8f       	std	Y+31, r24	; 0x1f
    55f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55f4:	98 a1       	ldd	r25, Y+32	; 0x20
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	f1 f7       	brne	.-4      	; 0x55f6 <STEP_voidMotorAngle+0x22a>
    55fa:	98 a3       	std	Y+32, r25	; 0x20
    55fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55fe:	89 a1       	ldd	r24, Y+33	; 0x21
    5600:	9a a1       	ldd	r25, Y+34	; 0x22
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	9a a3       	std	Y+34, r25	; 0x22
    5606:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5608:	89 a1       	ldd	r24, Y+33	; 0x21
    560a:	9a a1       	ldd	r25, Y+34	; 0x22
    560c:	00 97       	sbiw	r24, 0x00	; 0
    560e:	69 f7       	brne	.-38     	; 0x55ea <STEP_voidMotorAngle+0x21e>
    5610:	14 c0       	rjmp	.+40     	; 0x563a <STEP_voidMotorAngle+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5612:	6b a1       	ldd	r22, Y+35	; 0x23
    5614:	7c a1       	ldd	r23, Y+36	; 0x24
    5616:	8d a1       	ldd	r24, Y+37	; 0x25
    5618:	9e a1       	ldd	r25, Y+38	; 0x26
    561a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    561e:	dc 01       	movw	r26, r24
    5620:	cb 01       	movw	r24, r22
    5622:	9a a3       	std	Y+34, r25	; 0x22
    5624:	89 a3       	std	Y+33, r24	; 0x21
    5626:	89 a1       	ldd	r24, Y+33	; 0x21
    5628:	9a a1       	ldd	r25, Y+34	; 0x22
    562a:	9e 8f       	std	Y+30, r25	; 0x1e
    562c:	8d 8f       	std	Y+29, r24	; 0x1d
    562e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5632:	01 97       	sbiw	r24, 0x01	; 1
    5634:	f1 f7       	brne	.-4      	; 0x5632 <STEP_voidMotorAngle+0x266>
    5636:	9e 8f       	std	Y+30, r25	; 0x1e
    5638:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(10);
        DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_HIGH);
    563a:	80 e0       	ldi	r24, 0x00	; 0
    563c:	60 e0       	ldi	r22, 0x00	; 0
    563e:	41 e0       	ldi	r20, 0x01	; 1
    5640:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	61 e0       	ldi	r22, 0x01	; 1
    5648:	41 e0       	ldi	r20, 0x01	; 1
    564a:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
    564e:	80 e0       	ldi	r24, 0x00	; 0
    5650:	62 e0       	ldi	r22, 0x02	; 2
    5652:	41 e0       	ldi	r20, 0x01	; 1
    5654:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_LOW);
    5658:	80 e0       	ldi	r24, 0x00	; 0
    565a:	63 e0       	ldi	r22, 0x03	; 3
    565c:	40 e0       	ldi	r20, 0x00	; 0
    565e:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    5662:	80 e0       	ldi	r24, 0x00	; 0
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	a0 e2       	ldi	r26, 0x20	; 32
    5668:	b1 e4       	ldi	r27, 0x41	; 65
    566a:	89 8f       	std	Y+25, r24	; 0x19
    566c:	9a 8f       	std	Y+26, r25	; 0x1a
    566e:	ab 8f       	std	Y+27, r26	; 0x1b
    5670:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5672:	69 8d       	ldd	r22, Y+25	; 0x19
    5674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	4a ef       	ldi	r20, 0xFA	; 250
    5680:	54 e4       	ldi	r21, 0x44	; 68
    5682:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5686:	dc 01       	movw	r26, r24
    5688:	cb 01       	movw	r24, r22
    568a:	8d 8b       	std	Y+21, r24	; 0x15
    568c:	9e 8b       	std	Y+22, r25	; 0x16
    568e:	af 8b       	std	Y+23, r26	; 0x17
    5690:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5692:	6d 89       	ldd	r22, Y+21	; 0x15
    5694:	7e 89       	ldd	r23, Y+22	; 0x16
    5696:	8f 89       	ldd	r24, Y+23	; 0x17
    5698:	98 8d       	ldd	r25, Y+24	; 0x18
    569a:	20 e0       	ldi	r18, 0x00	; 0
    569c:	30 e0       	ldi	r19, 0x00	; 0
    569e:	40 e8       	ldi	r20, 0x80	; 128
    56a0:	5f e3       	ldi	r21, 0x3F	; 63
    56a2:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    56a6:	88 23       	and	r24, r24
    56a8:	2c f4       	brge	.+10     	; 0x56b4 <STEP_voidMotorAngle+0x2e8>
		__ticks = 1;
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	9c 8b       	std	Y+20, r25	; 0x14
    56b0:	8b 8b       	std	Y+19, r24	; 0x13
    56b2:	3f c0       	rjmp	.+126    	; 0x5732 <STEP_voidMotorAngle+0x366>
	else if (__tmp > 65535)
    56b4:	6d 89       	ldd	r22, Y+21	; 0x15
    56b6:	7e 89       	ldd	r23, Y+22	; 0x16
    56b8:	8f 89       	ldd	r24, Y+23	; 0x17
    56ba:	98 8d       	ldd	r25, Y+24	; 0x18
    56bc:	20 e0       	ldi	r18, 0x00	; 0
    56be:	3f ef       	ldi	r19, 0xFF	; 255
    56c0:	4f e7       	ldi	r20, 0x7F	; 127
    56c2:	57 e4       	ldi	r21, 0x47	; 71
    56c4:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    56c8:	18 16       	cp	r1, r24
    56ca:	4c f5       	brge	.+82     	; 0x571e <STEP_voidMotorAngle+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56cc:	69 8d       	ldd	r22, Y+25	; 0x19
    56ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56d4:	20 e0       	ldi	r18, 0x00	; 0
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	40 e2       	ldi	r20, 0x20	; 32
    56da:	51 e4       	ldi	r21, 0x41	; 65
    56dc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    56e0:	dc 01       	movw	r26, r24
    56e2:	cb 01       	movw	r24, r22
    56e4:	bc 01       	movw	r22, r24
    56e6:	cd 01       	movw	r24, r26
    56e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56ec:	dc 01       	movw	r26, r24
    56ee:	cb 01       	movw	r24, r22
    56f0:	9c 8b       	std	Y+20, r25	; 0x14
    56f2:	8b 8b       	std	Y+19, r24	; 0x13
    56f4:	0f c0       	rjmp	.+30     	; 0x5714 <STEP_voidMotorAngle+0x348>
    56f6:	88 ec       	ldi	r24, 0xC8	; 200
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	9a 8b       	std	Y+18, r25	; 0x12
    56fc:	89 8b       	std	Y+17, r24	; 0x11
    56fe:	89 89       	ldd	r24, Y+17	; 0x11
    5700:	9a 89       	ldd	r25, Y+18	; 0x12
    5702:	01 97       	sbiw	r24, 0x01	; 1
    5704:	f1 f7       	brne	.-4      	; 0x5702 <STEP_voidMotorAngle+0x336>
    5706:	9a 8b       	std	Y+18, r25	; 0x12
    5708:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    570a:	8b 89       	ldd	r24, Y+19	; 0x13
    570c:	9c 89       	ldd	r25, Y+20	; 0x14
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	9c 8b       	std	Y+20, r25	; 0x14
    5712:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5714:	8b 89       	ldd	r24, Y+19	; 0x13
    5716:	9c 89       	ldd	r25, Y+20	; 0x14
    5718:	00 97       	sbiw	r24, 0x00	; 0
    571a:	69 f7       	brne	.-38     	; 0x56f6 <STEP_voidMotorAngle+0x32a>
    571c:	14 c0       	rjmp	.+40     	; 0x5746 <STEP_voidMotorAngle+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    571e:	6d 89       	ldd	r22, Y+21	; 0x15
    5720:	7e 89       	ldd	r23, Y+22	; 0x16
    5722:	8f 89       	ldd	r24, Y+23	; 0x17
    5724:	98 8d       	ldd	r25, Y+24	; 0x18
    5726:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	9c 8b       	std	Y+20, r25	; 0x14
    5730:	8b 8b       	std	Y+19, r24	; 0x13
    5732:	8b 89       	ldd	r24, Y+19	; 0x13
    5734:	9c 89       	ldd	r25, Y+20	; 0x14
    5736:	98 8b       	std	Y+16, r25	; 0x10
    5738:	8f 87       	std	Y+15, r24	; 0x0f
    573a:	8f 85       	ldd	r24, Y+15	; 0x0f
    573c:	98 89       	ldd	r25, Y+16	; 0x10
    573e:	01 97       	sbiw	r24, 0x01	; 1
    5740:	f1 f7       	brne	.-4      	; 0x573e <STEP_voidMotorAngle+0x372>
    5742:	98 8b       	std	Y+16, r25	; 0x10
    5744:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(10);
        DIO_voidSetPinValue(STEPPER_PORT, BLUE_COIL_PIN, PIN_LOW);
    5746:	80 e0       	ldi	r24, 0x00	; 0
    5748:	60 e0       	ldi	r22, 0x00	; 0
    574a:	40 e0       	ldi	r20, 0x00	; 0
    574c:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
    5750:	80 e0       	ldi	r24, 0x00	; 0
    5752:	61 e0       	ldi	r22, 0x01	; 1
    5754:	41 e0       	ldi	r20, 0x01	; 1
    5756:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
    575a:	80 e0       	ldi	r24, 0x00	; 0
    575c:	62 e0       	ldi	r22, 0x02	; 2
    575e:	41 e0       	ldi	r20, 0x01	; 1
    5760:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	63 e0       	ldi	r22, 0x03	; 3
    5768:	41 e0       	ldi	r20, 0x01	; 1
    576a:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	a0 e2       	ldi	r26, 0x20	; 32
    5774:	b1 e4       	ldi	r27, 0x41	; 65
    5776:	8b 87       	std	Y+11, r24	; 0x0b
    5778:	9c 87       	std	Y+12, r25	; 0x0c
    577a:	ad 87       	std	Y+13, r26	; 0x0d
    577c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    577e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5780:	7c 85       	ldd	r23, Y+12	; 0x0c
    5782:	8d 85       	ldd	r24, Y+13	; 0x0d
    5784:	9e 85       	ldd	r25, Y+14	; 0x0e
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	4a ef       	ldi	r20, 0xFA	; 250
    578c:	54 e4       	ldi	r21, 0x44	; 68
    578e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	8f 83       	std	Y+7, r24	; 0x07
    5798:	98 87       	std	Y+8, r25	; 0x08
    579a:	a9 87       	std	Y+9, r26	; 0x09
    579c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    579e:	6f 81       	ldd	r22, Y+7	; 0x07
    57a0:	78 85       	ldd	r23, Y+8	; 0x08
    57a2:	89 85       	ldd	r24, Y+9	; 0x09
    57a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e8       	ldi	r20, 0x80	; 128
    57ac:	5f e3       	ldi	r21, 0x3F	; 63
    57ae:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    57b2:	88 23       	and	r24, r24
    57b4:	2c f4       	brge	.+10     	; 0x57c0 <STEP_voidMotorAngle+0x3f4>
		__ticks = 1;
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	9e 83       	std	Y+6, r25	; 0x06
    57bc:	8d 83       	std	Y+5, r24	; 0x05
    57be:	3f c0       	rjmp	.+126    	; 0x583e <STEP_voidMotorAngle+0x472>
	else if (__tmp > 65535)
    57c0:	6f 81       	ldd	r22, Y+7	; 0x07
    57c2:	78 85       	ldd	r23, Y+8	; 0x08
    57c4:	89 85       	ldd	r24, Y+9	; 0x09
    57c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	3f ef       	ldi	r19, 0xFF	; 255
    57cc:	4f e7       	ldi	r20, 0x7F	; 127
    57ce:	57 e4       	ldi	r21, 0x47	; 71
    57d0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    57d4:	18 16       	cp	r1, r24
    57d6:	4c f5       	brge	.+82     	; 0x582a <STEP_voidMotorAngle+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    57da:	7c 85       	ldd	r23, Y+12	; 0x0c
    57dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57de:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	40 e2       	ldi	r20, 0x20	; 32
    57e6:	51 e4       	ldi	r21, 0x41	; 65
    57e8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    57ec:	dc 01       	movw	r26, r24
    57ee:	cb 01       	movw	r24, r22
    57f0:	bc 01       	movw	r22, r24
    57f2:	cd 01       	movw	r24, r26
    57f4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	9e 83       	std	Y+6, r25	; 0x06
    57fe:	8d 83       	std	Y+5, r24	; 0x05
    5800:	0f c0       	rjmp	.+30     	; 0x5820 <STEP_voidMotorAngle+0x454>
    5802:	88 ec       	ldi	r24, 0xC8	; 200
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	9c 83       	std	Y+4, r25	; 0x04
    5808:	8b 83       	std	Y+3, r24	; 0x03
    580a:	8b 81       	ldd	r24, Y+3	; 0x03
    580c:	9c 81       	ldd	r25, Y+4	; 0x04
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	f1 f7       	brne	.-4      	; 0x580e <STEP_voidMotorAngle+0x442>
    5812:	9c 83       	std	Y+4, r25	; 0x04
    5814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5816:	8d 81       	ldd	r24, Y+5	; 0x05
    5818:	9e 81       	ldd	r25, Y+6	; 0x06
    581a:	01 97       	sbiw	r24, 0x01	; 1
    581c:	9e 83       	std	Y+6, r25	; 0x06
    581e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5820:	8d 81       	ldd	r24, Y+5	; 0x05
    5822:	9e 81       	ldd	r25, Y+6	; 0x06
    5824:	00 97       	sbiw	r24, 0x00	; 0
    5826:	69 f7       	brne	.-38     	; 0x5802 <STEP_voidMotorAngle+0x436>
    5828:	14 c0       	rjmp	.+40     	; 0x5852 <STEP_voidMotorAngle+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    582a:	6f 81       	ldd	r22, Y+7	; 0x07
    582c:	78 85       	ldd	r23, Y+8	; 0x08
    582e:	89 85       	ldd	r24, Y+9	; 0x09
    5830:	9a 85       	ldd	r25, Y+10	; 0x0a
    5832:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	9e 83       	std	Y+6, r25	; 0x06
    583c:	8d 83       	std	Y+5, r24	; 0x05
    583e:	8d 81       	ldd	r24, Y+5	; 0x05
    5840:	9e 81       	ldd	r25, Y+6	; 0x06
    5842:	9a 83       	std	Y+2, r25	; 0x02
    5844:	89 83       	std	Y+1, r24	; 0x01
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	9a 81       	ldd	r25, Y+2	; 0x02
    584a:	01 97       	sbiw	r24, 0x01	; 1
    584c:	f1 f7       	brne	.-4      	; 0x584a <STEP_voidMotorAngle+0x47e>
    584e:	9a 83       	std	Y+2, r25	; 0x02
    5850:	89 83       	std	Y+1, r24	; 0x01

void STEP_voidMotorAngle(u32 A_u32Angle)
{
    u32 local_u32Angle = ((NO_OF_STEPS_FOR_360 * A_u32Angle) / CIRCLE_ANGLE);
    u32 local_u32Steps = local_u32Angle / NO_OF_COILS;
    for (u16 i = 0; i < local_u32Steps; i++)
    5852:	89 ad       	ldd	r24, Y+57	; 0x39
    5854:	9a ad       	ldd	r25, Y+58	; 0x3a
    5856:	01 96       	adiw	r24, 0x01	; 1
    5858:	9a af       	std	Y+58, r25	; 0x3a
    585a:	89 af       	std	Y+57, r24	; 0x39
    585c:	29 ad       	ldd	r18, Y+57	; 0x39
    585e:	3a ad       	ldd	r19, Y+58	; 0x3a
    5860:	8b ad       	ldd	r24, Y+59	; 0x3b
    5862:	9c ad       	ldd	r25, Y+60	; 0x3c
    5864:	28 17       	cp	r18, r24
    5866:	39 07       	cpc	r19, r25
    5868:	08 f4       	brcc	.+2      	; 0x586c <STEP_voidMotorAngle+0x4a0>
    586a:	db cd       	rjmp	.-1098   	; 0x5422 <STEP_voidMotorAngle+0x56>
        DIO_voidSetPinValue(STEPPER_PORT, PINK_COIL_PIN, PIN_HIGH);
        DIO_voidSetPinValue(STEPPER_PORT, YELLOW_COIL_PIN, PIN_HIGH);
        DIO_voidSetPinValue(STEPPER_PORT, ORANGE_COIL_PIN, PIN_HIGH);
        _delay_ms(10);
    }
    586c:	c0 5c       	subi	r28, 0xC0	; 192
    586e:	df 4f       	sbci	r29, 0xFF	; 255
    5870:	0f b6       	in	r0, 0x3f	; 63
    5872:	f8 94       	cli
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	0f be       	out	0x3f, r0	; 63
    5878:	cd bf       	out	0x3d, r28	; 61
    587a:	cf 91       	pop	r28
    587c:	df 91       	pop	r29
    587e:	08 95       	ret

00005880 <SSD_voidDisplay>:
#include "./SSD_Interface.h"
#include "./SSD_Private.h"

#include <util/delay.h>
void SSD_voidDisplay(u8 A_u8Number, u8 A_u8PortId)
{
    5880:	df 93       	push	r29
    5882:	cf 93       	push	r28
    5884:	00 d0       	rcall	.+0      	; 0x5886 <SSD_voidDisplay+0x6>
    5886:	00 d0       	rcall	.+0      	; 0x5888 <SSD_voidDisplay+0x8>
    5888:	cd b7       	in	r28, 0x3d	; 61
    588a:	de b7       	in	r29, 0x3e	; 62
    588c:	89 83       	std	Y+1, r24	; 0x01
    588e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8Number)
    5890:	89 81       	ldd	r24, Y+1	; 0x01
    5892:	28 2f       	mov	r18, r24
    5894:	30 e0       	ldi	r19, 0x00	; 0
    5896:	3c 83       	std	Y+4, r19	; 0x04
    5898:	2b 83       	std	Y+3, r18	; 0x03
    589a:	8b 81       	ldd	r24, Y+3	; 0x03
    589c:	9c 81       	ldd	r25, Y+4	; 0x04
    589e:	84 30       	cpi	r24, 0x04	; 4
    58a0:	91 05       	cpc	r25, r1
    58a2:	09 f4       	brne	.+2      	; 0x58a6 <SSD_voidDisplay+0x26>
    58a4:	55 c0       	rjmp	.+170    	; 0x5950 <SSD_voidDisplay+0xd0>
    58a6:	2b 81       	ldd	r18, Y+3	; 0x03
    58a8:	3c 81       	ldd	r19, Y+4	; 0x04
    58aa:	25 30       	cpi	r18, 0x05	; 5
    58ac:	31 05       	cpc	r19, r1
    58ae:	dc f4       	brge	.+54     	; 0x58e6 <SSD_voidDisplay+0x66>
    58b0:	8b 81       	ldd	r24, Y+3	; 0x03
    58b2:	9c 81       	ldd	r25, Y+4	; 0x04
    58b4:	81 30       	cpi	r24, 0x01	; 1
    58b6:	91 05       	cpc	r25, r1
    58b8:	09 f4       	brne	.+2      	; 0x58bc <SSD_voidDisplay+0x3c>
    58ba:	3b c0       	rjmp	.+118    	; 0x5932 <SSD_voidDisplay+0xb2>
    58bc:	2b 81       	ldd	r18, Y+3	; 0x03
    58be:	3c 81       	ldd	r19, Y+4	; 0x04
    58c0:	22 30       	cpi	r18, 0x02	; 2
    58c2:	31 05       	cpc	r19, r1
    58c4:	2c f4       	brge	.+10     	; 0x58d0 <SSD_voidDisplay+0x50>
    58c6:	8b 81       	ldd	r24, Y+3	; 0x03
    58c8:	9c 81       	ldd	r25, Y+4	; 0x04
    58ca:	00 97       	sbiw	r24, 0x00	; 0
    58cc:	69 f1       	breq	.+90     	; 0x5928 <SSD_voidDisplay+0xa8>
    58ce:	5d c0       	rjmp	.+186    	; 0x598a <SSD_voidDisplay+0x10a>
    58d0:	2b 81       	ldd	r18, Y+3	; 0x03
    58d2:	3c 81       	ldd	r19, Y+4	; 0x04
    58d4:	22 30       	cpi	r18, 0x02	; 2
    58d6:	31 05       	cpc	r19, r1
    58d8:	89 f1       	breq	.+98     	; 0x593c <SSD_voidDisplay+0xbc>
    58da:	8b 81       	ldd	r24, Y+3	; 0x03
    58dc:	9c 81       	ldd	r25, Y+4	; 0x04
    58de:	83 30       	cpi	r24, 0x03	; 3
    58e0:	91 05       	cpc	r25, r1
    58e2:	89 f1       	breq	.+98     	; 0x5946 <SSD_voidDisplay+0xc6>
    58e4:	52 c0       	rjmp	.+164    	; 0x598a <SSD_voidDisplay+0x10a>
    58e6:	2b 81       	ldd	r18, Y+3	; 0x03
    58e8:	3c 81       	ldd	r19, Y+4	; 0x04
    58ea:	27 30       	cpi	r18, 0x07	; 7
    58ec:	31 05       	cpc	r19, r1
    58ee:	09 f4       	brne	.+2      	; 0x58f2 <SSD_voidDisplay+0x72>
    58f0:	3e c0       	rjmp	.+124    	; 0x596e <SSD_voidDisplay+0xee>
    58f2:	8b 81       	ldd	r24, Y+3	; 0x03
    58f4:	9c 81       	ldd	r25, Y+4	; 0x04
    58f6:	88 30       	cpi	r24, 0x08	; 8
    58f8:	91 05       	cpc	r25, r1
    58fa:	5c f4       	brge	.+22     	; 0x5912 <SSD_voidDisplay+0x92>
    58fc:	2b 81       	ldd	r18, Y+3	; 0x03
    58fe:	3c 81       	ldd	r19, Y+4	; 0x04
    5900:	25 30       	cpi	r18, 0x05	; 5
    5902:	31 05       	cpc	r19, r1
    5904:	51 f1       	breq	.+84     	; 0x595a <SSD_voidDisplay+0xda>
    5906:	8b 81       	ldd	r24, Y+3	; 0x03
    5908:	9c 81       	ldd	r25, Y+4	; 0x04
    590a:	86 30       	cpi	r24, 0x06	; 6
    590c:	91 05       	cpc	r25, r1
    590e:	51 f1       	breq	.+84     	; 0x5964 <SSD_voidDisplay+0xe4>
    5910:	3c c0       	rjmp	.+120    	; 0x598a <SSD_voidDisplay+0x10a>
    5912:	2b 81       	ldd	r18, Y+3	; 0x03
    5914:	3c 81       	ldd	r19, Y+4	; 0x04
    5916:	28 30       	cpi	r18, 0x08	; 8
    5918:	31 05       	cpc	r19, r1
    591a:	71 f1       	breq	.+92     	; 0x5978 <SSD_voidDisplay+0xf8>
    591c:	8b 81       	ldd	r24, Y+3	; 0x03
    591e:	9c 81       	ldd	r25, Y+4	; 0x04
    5920:	89 30       	cpi	r24, 0x09	; 9
    5922:	91 05       	cpc	r25, r1
    5924:	71 f1       	breq	.+92     	; 0x5982 <SSD_voidDisplay+0x102>
    5926:	31 c0       	rjmp	.+98     	; 0x598a <SSD_voidDisplay+0x10a>
	{
	case 0:
		DIO_voidSetPortValue(A_u8PortId, ZERO_SSD);
    5928:	8a 81       	ldd	r24, Y+2	; 0x02
    592a:	6f e3       	ldi	r22, 0x3F	; 63
    592c:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    5930:	2c c0       	rjmp	.+88     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 1:
		DIO_voidSetPortValue(A_u8PortId, ONE_SSD);
    5932:	8a 81       	ldd	r24, Y+2	; 0x02
    5934:	66 e0       	ldi	r22, 0x06	; 6
    5936:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    593a:	27 c0       	rjmp	.+78     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 2:
		DIO_voidSetPortValue(A_u8PortId, TWO_SSD);
    593c:	8a 81       	ldd	r24, Y+2	; 0x02
    593e:	6b e5       	ldi	r22, 0x5B	; 91
    5940:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    5944:	22 c0       	rjmp	.+68     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 3:
		DIO_voidSetPortValue(A_u8PortId, THREE_SSD);
    5946:	8a 81       	ldd	r24, Y+2	; 0x02
    5948:	6f e4       	ldi	r22, 0x4F	; 79
    594a:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    594e:	1d c0       	rjmp	.+58     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 4:
		DIO_voidSetPortValue(A_u8PortId, FOUR_SSD);
    5950:	8a 81       	ldd	r24, Y+2	; 0x02
    5952:	66 e6       	ldi	r22, 0x66	; 102
    5954:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    5958:	18 c0       	rjmp	.+48     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 5:
		DIO_voidSetPortValue(A_u8PortId, FIVE_SSD);
    595a:	8a 81       	ldd	r24, Y+2	; 0x02
    595c:	6d e6       	ldi	r22, 0x6D	; 109
    595e:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    5962:	13 c0       	rjmp	.+38     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 6:
		DIO_voidSetPortValue(A_u8PortId, SIX_SSD);
    5964:	8a 81       	ldd	r24, Y+2	; 0x02
    5966:	6d e7       	ldi	r22, 0x7D	; 125
    5968:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    596c:	0e c0       	rjmp	.+28     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 7:
		DIO_voidSetPortValue(A_u8PortId, SEVEN_SSD);
    596e:	8a 81       	ldd	r24, Y+2	; 0x02
    5970:	67 e0       	ldi	r22, 0x07	; 7
    5972:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    5976:	09 c0       	rjmp	.+18     	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 8:
		DIO_voidSetPortValue(A_u8PortId, EIGHT_SSD);
    5978:	8a 81       	ldd	r24, Y+2	; 0x02
    597a:	6f e7       	ldi	r22, 0x7F	; 127
    597c:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    5980:	04 c0       	rjmp	.+8      	; 0x598a <SSD_voidDisplay+0x10a>
		break;
	case 9:
		DIO_voidSetPortValue(A_u8PortId, NINE_SSD);
    5982:	8a 81       	ldd	r24, Y+2	; 0x02
    5984:	6f e6       	ldi	r22, 0x6F	; 111
    5986:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
		break;
	}
}
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	0f 90       	pop	r0
    5990:	0f 90       	pop	r0
    5992:	cf 91       	pop	r28
    5994:	df 91       	pop	r29
    5996:	08 95       	ret

00005998 <SSD_voidDisplayAscending>:

void SSD_voidDisplayAscending(u8 A_u8PortId, u16 A_u16Delayms)
{
    5998:	df 93       	push	r29
    599a:	cf 93       	push	r28
    599c:	cd b7       	in	r28, 0x3d	; 61
    599e:	de b7       	in	r29, 0x3e	; 62
    59a0:	a1 97       	sbiw	r28, 0x21	; 33
    59a2:	0f b6       	in	r0, 0x3f	; 63
    59a4:	f8 94       	cli
    59a6:	de bf       	out	0x3e, r29	; 62
    59a8:	0f be       	out	0x3f, r0	; 63
    59aa:	cd bf       	out	0x3d, r28	; 61
    59ac:	8a 8f       	std	Y+26, r24	; 0x1a
    59ae:	7c 8f       	std	Y+28, r23	; 0x1c
    59b0:	6b 8f       	std	Y+27, r22	; 0x1b
	u8 arr[] = {ZERO_SSD, ONE_SSD, TWO_SSD, THREE_SSD, FOUR_SSD, FIVE_SSD, SIX_SSD, SEVEN_SSD, EIGHT_SSD, NINE_SSD};
    59b2:	ce 01       	movw	r24, r28
    59b4:	40 96       	adiw	r24, 0x10	; 16
    59b6:	9e 8f       	std	Y+30, r25	; 0x1e
    59b8:	8d 8f       	std	Y+29, r24	; 0x1d
    59ba:	e3 e8       	ldi	r30, 0x83	; 131
    59bc:	f1 e0       	ldi	r31, 0x01	; 1
    59be:	f8 a3       	std	Y+32, r31	; 0x20
    59c0:	ef 8f       	std	Y+31, r30	; 0x1f
    59c2:	fa e0       	ldi	r31, 0x0A	; 10
    59c4:	f9 a3       	std	Y+33, r31	; 0x21
    59c6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    59c8:	f8 a1       	ldd	r31, Y+32	; 0x20
    59ca:	00 80       	ld	r0, Z
    59cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59ce:	98 a1       	ldd	r25, Y+32	; 0x20
    59d0:	01 96       	adiw	r24, 0x01	; 1
    59d2:	98 a3       	std	Y+32, r25	; 0x20
    59d4:	8f 8f       	std	Y+31, r24	; 0x1f
    59d6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    59d8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    59da:	00 82       	st	Z, r0
    59dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59e0:	01 96       	adiw	r24, 0x01	; 1
    59e2:	9e 8f       	std	Y+30, r25	; 0x1e
    59e4:	8d 8f       	std	Y+29, r24	; 0x1d
    59e6:	99 a1       	ldd	r25, Y+33	; 0x21
    59e8:	91 50       	subi	r25, 0x01	; 1
    59ea:	99 a3       	std	Y+33, r25	; 0x21
    59ec:	e9 a1       	ldd	r30, Y+33	; 0x21
    59ee:	ee 23       	and	r30, r30
    59f0:	51 f7       	brne	.-44     	; 0x59c6 <SSD_voidDisplayAscending+0x2e>
	for (u8 i = 0; i < 10; i++)
    59f2:	1f 86       	std	Y+15, r1	; 0x0f
    59f4:	88 c0       	rjmp	.+272    	; 0x5b06 <SSD_voidDisplayAscending+0x16e>
	{
		SSD_voidDisplay(arr[i], A_u8PortId);
    59f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    59f8:	28 2f       	mov	r18, r24
    59fa:	30 e0       	ldi	r19, 0x00	; 0
    59fc:	ce 01       	movw	r24, r28
    59fe:	40 96       	adiw	r24, 0x10	; 16
    5a00:	fc 01       	movw	r30, r24
    5a02:	e2 0f       	add	r30, r18
    5a04:	f3 1f       	adc	r31, r19
    5a06:	80 81       	ld	r24, Z
    5a08:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5a0a:	0e 94 40 2c 	call	0x5880	; 0x5880 <SSD_voidDisplay>
		_delay_ms(A_u16Delayms);
    5a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a12:	cc 01       	movw	r24, r24
    5a14:	a0 e0       	ldi	r26, 0x00	; 0
    5a16:	b0 e0       	ldi	r27, 0x00	; 0
    5a18:	bc 01       	movw	r22, r24
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatunsisf>
    5a20:	dc 01       	movw	r26, r24
    5a22:	cb 01       	movw	r24, r22
    5a24:	8b 87       	std	Y+11, r24	; 0x0b
    5a26:	9c 87       	std	Y+12, r25	; 0x0c
    5a28:	ad 87       	std	Y+13, r26	; 0x0d
    5a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a34:	20 e0       	ldi	r18, 0x00	; 0
    5a36:	30 e0       	ldi	r19, 0x00	; 0
    5a38:	4a ef       	ldi	r20, 0xFA	; 250
    5a3a:	54 e4       	ldi	r21, 0x44	; 68
    5a3c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5a40:	dc 01       	movw	r26, r24
    5a42:	cb 01       	movw	r24, r22
    5a44:	8f 83       	std	Y+7, r24	; 0x07
    5a46:	98 87       	std	Y+8, r25	; 0x08
    5a48:	a9 87       	std	Y+9, r26	; 0x09
    5a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    5a4e:	78 85       	ldd	r23, Y+8	; 0x08
    5a50:	89 85       	ldd	r24, Y+9	; 0x09
    5a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	40 e8       	ldi	r20, 0x80	; 128
    5a5a:	5f e3       	ldi	r21, 0x3F	; 63
    5a5c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    5a60:	88 23       	and	r24, r24
    5a62:	2c f4       	brge	.+10     	; 0x5a6e <SSD_voidDisplayAscending+0xd6>
		__ticks = 1;
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	9e 83       	std	Y+6, r25	; 0x06
    5a6a:	8d 83       	std	Y+5, r24	; 0x05
    5a6c:	3f c0       	rjmp	.+126    	; 0x5aec <SSD_voidDisplayAscending+0x154>
	else if (__tmp > 65535)
    5a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5a70:	78 85       	ldd	r23, Y+8	; 0x08
    5a72:	89 85       	ldd	r24, Y+9	; 0x09
    5a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	3f ef       	ldi	r19, 0xFF	; 255
    5a7a:	4f e7       	ldi	r20, 0x7F	; 127
    5a7c:	57 e4       	ldi	r21, 0x47	; 71
    5a7e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    5a82:	18 16       	cp	r1, r24
    5a84:	4c f5       	brge	.+82     	; 0x5ad8 <SSD_voidDisplayAscending+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a8e:	20 e0       	ldi	r18, 0x00	; 0
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	40 e2       	ldi	r20, 0x20	; 32
    5a94:	51 e4       	ldi	r21, 0x41	; 65
    5a96:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5a9a:	dc 01       	movw	r26, r24
    5a9c:	cb 01       	movw	r24, r22
    5a9e:	bc 01       	movw	r22, r24
    5aa0:	cd 01       	movw	r24, r26
    5aa2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5aa6:	dc 01       	movw	r26, r24
    5aa8:	cb 01       	movw	r24, r22
    5aaa:	9e 83       	std	Y+6, r25	; 0x06
    5aac:	8d 83       	std	Y+5, r24	; 0x05
    5aae:	0f c0       	rjmp	.+30     	; 0x5ace <SSD_voidDisplayAscending+0x136>
    5ab0:	88 ec       	ldi	r24, 0xC8	; 200
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	9c 83       	std	Y+4, r25	; 0x04
    5ab6:	8b 83       	std	Y+3, r24	; 0x03
    5ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    5aba:	9c 81       	ldd	r25, Y+4	; 0x04
    5abc:	01 97       	sbiw	r24, 0x01	; 1
    5abe:	f1 f7       	brne	.-4      	; 0x5abc <SSD_voidDisplayAscending+0x124>
    5ac0:	9c 83       	std	Y+4, r25	; 0x04
    5ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ac8:	01 97       	sbiw	r24, 0x01	; 1
    5aca:	9e 83       	std	Y+6, r25	; 0x06
    5acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ace:	8d 81       	ldd	r24, Y+5	; 0x05
    5ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ad2:	00 97       	sbiw	r24, 0x00	; 0
    5ad4:	69 f7       	brne	.-38     	; 0x5ab0 <SSD_voidDisplayAscending+0x118>
    5ad6:	14 c0       	rjmp	.+40     	; 0x5b00 <SSD_voidDisplayAscending+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    5ada:	78 85       	ldd	r23, Y+8	; 0x08
    5adc:	89 85       	ldd	r24, Y+9	; 0x09
    5ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ae0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ae4:	dc 01       	movw	r26, r24
    5ae6:	cb 01       	movw	r24, r22
    5ae8:	9e 83       	std	Y+6, r25	; 0x06
    5aea:	8d 83       	std	Y+5, r24	; 0x05
    5aec:	8d 81       	ldd	r24, Y+5	; 0x05
    5aee:	9e 81       	ldd	r25, Y+6	; 0x06
    5af0:	9a 83       	std	Y+2, r25	; 0x02
    5af2:	89 83       	std	Y+1, r24	; 0x01
    5af4:	89 81       	ldd	r24, Y+1	; 0x01
    5af6:	9a 81       	ldd	r25, Y+2	; 0x02
    5af8:	01 97       	sbiw	r24, 0x01	; 1
    5afa:	f1 f7       	brne	.-4      	; 0x5af8 <SSD_voidDisplayAscending+0x160>
    5afc:	9a 83       	std	Y+2, r25	; 0x02
    5afe:	89 83       	std	Y+1, r24	; 0x01
}

void SSD_voidDisplayAscending(u8 A_u8PortId, u16 A_u16Delayms)
{
	u8 arr[] = {ZERO_SSD, ONE_SSD, TWO_SSD, THREE_SSD, FOUR_SSD, FIVE_SSD, SIX_SSD, SEVEN_SSD, EIGHT_SSD, NINE_SSD};
	for (u8 i = 0; i < 10; i++)
    5b00:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b02:	8f 5f       	subi	r24, 0xFF	; 255
    5b04:	8f 87       	std	Y+15, r24	; 0x0f
    5b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b08:	8a 30       	cpi	r24, 0x0A	; 10
    5b0a:	08 f4       	brcc	.+2      	; 0x5b0e <SSD_voidDisplayAscending+0x176>
    5b0c:	74 cf       	rjmp	.-280    	; 0x59f6 <SSD_voidDisplayAscending+0x5e>
	{
		SSD_voidDisplay(arr[i], A_u8PortId);
		_delay_ms(A_u16Delayms);
	}
}
    5b0e:	a1 96       	adiw	r28, 0x21	; 33
    5b10:	0f b6       	in	r0, 0x3f	; 63
    5b12:	f8 94       	cli
    5b14:	de bf       	out	0x3e, r29	; 62
    5b16:	0f be       	out	0x3f, r0	; 63
    5b18:	cd bf       	out	0x3d, r28	; 61
    5b1a:	cf 91       	pop	r28
    5b1c:	df 91       	pop	r29
    5b1e:	08 95       	ret

00005b20 <SSD_voidDisplayDescending>:

void SSD_voidDisplayDescending(u8 A_u8PortId, u16 A_u16Delayms)
{
    5b20:	df 93       	push	r29
    5b22:	cf 93       	push	r28
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
    5b28:	a1 97       	sbiw	r28, 0x21	; 33
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	f8 94       	cli
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	0f be       	out	0x3f, r0	; 63
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	8a 8f       	std	Y+26, r24	; 0x1a
    5b36:	7c 8f       	std	Y+28, r23	; 0x1c
    5b38:	6b 8f       	std	Y+27, r22	; 0x1b
	u8 arr[] = {ZERO_SSD, ONE_SSD, TWO_SSD, THREE_SSD, FOUR_SSD, FIVE_SSD, SIX_SSD, SEVEN_SSD, EIGHT_SSD, NINE_SSD};
    5b3a:	ce 01       	movw	r24, r28
    5b3c:	40 96       	adiw	r24, 0x10	; 16
    5b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b40:	8d 8f       	std	Y+29, r24	; 0x1d
    5b42:	ed e8       	ldi	r30, 0x8D	; 141
    5b44:	f1 e0       	ldi	r31, 0x01	; 1
    5b46:	f8 a3       	std	Y+32, r31	; 0x20
    5b48:	ef 8f       	std	Y+31, r30	; 0x1f
    5b4a:	fa e0       	ldi	r31, 0x0A	; 10
    5b4c:	f9 a3       	std	Y+33, r31	; 0x21
    5b4e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5b50:	f8 a1       	ldd	r31, Y+32	; 0x20
    5b52:	00 80       	ld	r0, Z
    5b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b56:	98 a1       	ldd	r25, Y+32	; 0x20
    5b58:	01 96       	adiw	r24, 0x01	; 1
    5b5a:	98 a3       	std	Y+32, r25	; 0x20
    5b5c:	8f 8f       	std	Y+31, r24	; 0x1f
    5b5e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5b60:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5b62:	00 82       	st	Z, r0
    5b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b68:	01 96       	adiw	r24, 0x01	; 1
    5b6a:	9e 8f       	std	Y+30, r25	; 0x1e
    5b6c:	8d 8f       	std	Y+29, r24	; 0x1d
    5b6e:	99 a1       	ldd	r25, Y+33	; 0x21
    5b70:	91 50       	subi	r25, 0x01	; 1
    5b72:	99 a3       	std	Y+33, r25	; 0x21
    5b74:	e9 a1       	ldd	r30, Y+33	; 0x21
    5b76:	ee 23       	and	r30, r30
    5b78:	51 f7       	brne	.-44     	; 0x5b4e <SSD_voidDisplayDescending+0x2e>
	for (u8 j = 9; j >= 0; j--)
    5b7a:	89 e0       	ldi	r24, 0x09	; 9
    5b7c:	8f 87       	std	Y+15, r24	; 0x0f
	{
		SSD_voidDisplay(arr[j], A_u8PortId);
    5b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b80:	28 2f       	mov	r18, r24
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	ce 01       	movw	r24, r28
    5b86:	40 96       	adiw	r24, 0x10	; 16
    5b88:	fc 01       	movw	r30, r24
    5b8a:	e2 0f       	add	r30, r18
    5b8c:	f3 1f       	adc	r31, r19
    5b8e:	80 81       	ld	r24, Z
    5b90:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5b92:	0e 94 40 2c 	call	0x5880	; 0x5880 <SSD_voidDisplay>
		_delay_ms(A_u16Delayms);
    5b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b9a:	cc 01       	movw	r24, r24
    5b9c:	a0 e0       	ldi	r26, 0x00	; 0
    5b9e:	b0 e0       	ldi	r27, 0x00	; 0
    5ba0:	bc 01       	movw	r22, r24
    5ba2:	cd 01       	movw	r24, r26
    5ba4:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatunsisf>
    5ba8:	dc 01       	movw	r26, r24
    5baa:	cb 01       	movw	r24, r22
    5bac:	8b 87       	std	Y+11, r24	; 0x0b
    5bae:	9c 87       	std	Y+12, r25	; 0x0c
    5bb0:	ad 87       	std	Y+13, r26	; 0x0d
    5bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	4a ef       	ldi	r20, 0xFA	; 250
    5bc2:	54 e4       	ldi	r21, 0x44	; 68
    5bc4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	8f 83       	std	Y+7, r24	; 0x07
    5bce:	98 87       	std	Y+8, r25	; 0x08
    5bd0:	a9 87       	std	Y+9, r26	; 0x09
    5bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    5bd6:	78 85       	ldd	r23, Y+8	; 0x08
    5bd8:	89 85       	ldd	r24, Y+9	; 0x09
    5bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bdc:	20 e0       	ldi	r18, 0x00	; 0
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	40 e8       	ldi	r20, 0x80	; 128
    5be2:	5f e3       	ldi	r21, 0x3F	; 63
    5be4:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    5be8:	88 23       	and	r24, r24
    5bea:	2c f4       	brge	.+10     	; 0x5bf6 <SSD_voidDisplayDescending+0xd6>
		__ticks = 1;
    5bec:	81 e0       	ldi	r24, 0x01	; 1
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	9e 83       	std	Y+6, r25	; 0x06
    5bf2:	8d 83       	std	Y+5, r24	; 0x05
    5bf4:	3f c0       	rjmp	.+126    	; 0x5c74 <SSD_voidDisplayDescending+0x154>
	else if (__tmp > 65535)
    5bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf8:	78 85       	ldd	r23, Y+8	; 0x08
    5bfa:	89 85       	ldd	r24, Y+9	; 0x09
    5bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bfe:	20 e0       	ldi	r18, 0x00	; 0
    5c00:	3f ef       	ldi	r19, 0xFF	; 255
    5c02:	4f e7       	ldi	r20, 0x7F	; 127
    5c04:	57 e4       	ldi	r21, 0x47	; 71
    5c06:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    5c0a:	18 16       	cp	r1, r24
    5c0c:	4c f5       	brge	.+82     	; 0x5c60 <SSD_voidDisplayDescending+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	40 e2       	ldi	r20, 0x20	; 32
    5c1c:	51 e4       	ldi	r21, 0x41	; 65
    5c1e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    5c22:	dc 01       	movw	r26, r24
    5c24:	cb 01       	movw	r24, r22
    5c26:	bc 01       	movw	r22, r24
    5c28:	cd 01       	movw	r24, r26
    5c2a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c2e:	dc 01       	movw	r26, r24
    5c30:	cb 01       	movw	r24, r22
    5c32:	9e 83       	std	Y+6, r25	; 0x06
    5c34:	8d 83       	std	Y+5, r24	; 0x05
    5c36:	0f c0       	rjmp	.+30     	; 0x5c56 <SSD_voidDisplayDescending+0x136>
    5c38:	88 ec       	ldi	r24, 0xC8	; 200
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	9c 83       	std	Y+4, r25	; 0x04
    5c3e:	8b 83       	std	Y+3, r24	; 0x03
    5c40:	8b 81       	ldd	r24, Y+3	; 0x03
    5c42:	9c 81       	ldd	r25, Y+4	; 0x04
    5c44:	01 97       	sbiw	r24, 0x01	; 1
    5c46:	f1 f7       	brne	.-4      	; 0x5c44 <SSD_voidDisplayDescending+0x124>
    5c48:	9c 83       	std	Y+4, r25	; 0x04
    5c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c50:	01 97       	sbiw	r24, 0x01	; 1
    5c52:	9e 83       	std	Y+6, r25	; 0x06
    5c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c56:	8d 81       	ldd	r24, Y+5	; 0x05
    5c58:	9e 81       	ldd	r25, Y+6	; 0x06
    5c5a:	00 97       	sbiw	r24, 0x00	; 0
    5c5c:	69 f7       	brne	.-38     	; 0x5c38 <SSD_voidDisplayDescending+0x118>
    5c5e:	14 c0       	rjmp	.+40     	; 0x5c88 <SSD_voidDisplayDescending+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c60:	6f 81       	ldd	r22, Y+7	; 0x07
    5c62:	78 85       	ldd	r23, Y+8	; 0x08
    5c64:	89 85       	ldd	r24, Y+9	; 0x09
    5c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c68:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c6c:	dc 01       	movw	r26, r24
    5c6e:	cb 01       	movw	r24, r22
    5c70:	9e 83       	std	Y+6, r25	; 0x06
    5c72:	8d 83       	std	Y+5, r24	; 0x05
    5c74:	8d 81       	ldd	r24, Y+5	; 0x05
    5c76:	9e 81       	ldd	r25, Y+6	; 0x06
    5c78:	9a 83       	std	Y+2, r25	; 0x02
    5c7a:	89 83       	std	Y+1, r24	; 0x01
    5c7c:	89 81       	ldd	r24, Y+1	; 0x01
    5c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c80:	01 97       	sbiw	r24, 0x01	; 1
    5c82:	f1 f7       	brne	.-4      	; 0x5c80 <SSD_voidDisplayDescending+0x160>
    5c84:	9a 83       	std	Y+2, r25	; 0x02
    5c86:	89 83       	std	Y+1, r24	; 0x01
}

void SSD_voidDisplayDescending(u8 A_u8PortId, u16 A_u16Delayms)
{
	u8 arr[] = {ZERO_SSD, ONE_SSD, TWO_SSD, THREE_SSD, FOUR_SSD, FIVE_SSD, SIX_SSD, SEVEN_SSD, EIGHT_SSD, NINE_SSD};
	for (u8 j = 9; j >= 0; j--)
    5c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c8a:	81 50       	subi	r24, 0x01	; 1
    5c8c:	8f 87       	std	Y+15, r24	; 0x0f
    5c8e:	77 cf       	rjmp	.-274    	; 0x5b7e <SSD_voidDisplayDescending+0x5e>

00005c90 <SERVO_voidInit>:

#include "./SERVO_Configurations.h"
#include "./SERVO_Interface.h"

void SERVO_voidInit(void)
{
    5c90:	df 93       	push	r29
    5c92:	cf 93       	push	r28
    5c94:	cd b7       	in	r28, 0x3d	; 61
    5c96:	de b7       	in	r29, 0x3e	; 62
    TIMER1_voidInit(TIMER1_FAST_PWM_ICR1, TIMER1_PRESCALER_8, TIMER1_COMPARE_OUTPUT_MODE_A_NON_INVERTING, TIMER1_COMPARE_OUTPUT_MODE_B_NON_INVERTING);
    5c98:	8d e0       	ldi	r24, 0x0D	; 13
    5c9a:	62 e0       	ldi	r22, 0x02	; 2
    5c9c:	42 e0       	ldi	r20, 0x02	; 2
    5c9e:	22 e0       	ldi	r18, 0x02	; 2
    5ca0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <TIMER1_voidInit>
    TIMER1_voidSetICR1Value(19999);
    5ca4:	8f e1       	ldi	r24, 0x1F	; 31
    5ca6:	9e e4       	ldi	r25, 0x4E	; 78
    5ca8:	0e 94 88 1a 	call	0x3510	; 0x3510 <TIMER1_voidSetICR1Value>
        time = 1/50 hz = 20msec =20000usec
        so setting value of ICR1 to be 19999 cause it takes another step from 19999 to 0
        By varing the duty cycle between 999 to 1999 we get 0 to 180

    */
}
    5cac:	cf 91       	pop	r28
    5cae:	df 91       	pop	r29
    5cb0:	08 95       	ret

00005cb2 <SERVO_voidSetServoAngle>:
----------------  = ------------     so desired Angel =====> OCRA_value =  (------------) + 999
Angle      -  0      180  -  0                                                   180
*/

void SERVO_voidSetServoAngle(u8 A_u8Angle)
{
    5cb2:	2f 92       	push	r2
    5cb4:	3f 92       	push	r3
    5cb6:	4f 92       	push	r4
    5cb8:	5f 92       	push	r5
    5cba:	6f 92       	push	r6
    5cbc:	7f 92       	push	r7
    5cbe:	8f 92       	push	r8
    5cc0:	9f 92       	push	r9
    5cc2:	af 92       	push	r10
    5cc4:	bf 92       	push	r11
    5cc6:	cf 92       	push	r12
    5cc8:	df 92       	push	r13
    5cca:	ef 92       	push	r14
    5ccc:	ff 92       	push	r15
    5cce:	0f 93       	push	r16
    5cd0:	1f 93       	push	r17
    5cd2:	df 93       	push	r29
    5cd4:	cf 93       	push	r28
    5cd6:	cd b7       	in	r28, 0x3d	; 61
    5cd8:	de b7       	in	r29, 0x3e	; 62
    5cda:	c1 55       	subi	r28, 0x51	; 81
    5cdc:	d0 40       	sbci	r29, 0x00	; 0
    5cde:	0f b6       	in	r0, 0x3f	; 63
    5ce0:	f8 94       	cli
    5ce2:	de bf       	out	0x3e, r29	; 62
    5ce4:	0f be       	out	0x3f, r0	; 63
    5ce6:	cd bf       	out	0x3d, r28	; 61
    5ce8:	8b 83       	std	Y+3, r24	; 0x03
    u16 local_u16OCRAValue = (((u64)A_u8Angle * 1000) / 180) + 999;
    5cea:	8b 81       	ldd	r24, Y+3	; 0x03
    5cec:	08 2f       	mov	r16, r24
    5cee:	10 e0       	ldi	r17, 0x00	; 0
    5cf0:	20 e0       	ldi	r18, 0x00	; 0
    5cf2:	30 e0       	ldi	r19, 0x00	; 0
    5cf4:	40 e0       	ldi	r20, 0x00	; 0
    5cf6:	50 e0       	ldi	r21, 0x00	; 0
    5cf8:	60 e0       	ldi	r22, 0x00	; 0
    5cfa:	70 e0       	ldi	r23, 0x00	; 0
    5cfc:	0c 83       	std	Y+4, r16	; 0x04
    5cfe:	1d 83       	std	Y+5, r17	; 0x05
    5d00:	2e 83       	std	Y+6, r18	; 0x06
    5d02:	3f 83       	std	Y+7, r19	; 0x07
    5d04:	48 87       	std	Y+8, r20	; 0x08
    5d06:	59 87       	std	Y+9, r21	; 0x09
    5d08:	6a 87       	std	Y+10, r22	; 0x0a
    5d0a:	7b 87       	std	Y+11, r23	; 0x0b
    5d0c:	ac 80       	ldd	r10, Y+4	; 0x04
    5d0e:	bd 80       	ldd	r11, Y+5	; 0x05
    5d10:	ce 80       	ldd	r12, Y+6	; 0x06
    5d12:	df 80       	ldd	r13, Y+7	; 0x07
    5d14:	e8 84       	ldd	r14, Y+8	; 0x08
    5d16:	f9 84       	ldd	r15, Y+9	; 0x09
    5d18:	0a 85       	ldd	r16, Y+10	; 0x0a
    5d1a:	1b 85       	ldd	r17, Y+11	; 0x0b
    5d1c:	2a 2d       	mov	r18, r10
    5d1e:	3b 2d       	mov	r19, r11
    5d20:	4c 2d       	mov	r20, r12
    5d22:	5d 2d       	mov	r21, r13
    5d24:	6e 2d       	mov	r22, r14
    5d26:	7f 2d       	mov	r23, r15
    5d28:	80 2f       	mov	r24, r16
    5d2a:	91 2f       	mov	r25, r17
    5d2c:	02 e0       	ldi	r16, 0x02	; 2
    5d2e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5d32:	2c 87       	std	Y+12, r18	; 0x0c
    5d34:	3d 87       	std	Y+13, r19	; 0x0d
    5d36:	4e 87       	std	Y+14, r20	; 0x0e
    5d38:	5f 87       	std	Y+15, r21	; 0x0f
    5d3a:	68 8b       	std	Y+16, r22	; 0x10
    5d3c:	79 8b       	std	Y+17, r23	; 0x11
    5d3e:	8a 8b       	std	Y+18, r24	; 0x12
    5d40:	9b 8b       	std	Y+19, r25	; 0x13
    5d42:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d44:	3d 85       	ldd	r19, Y+13	; 0x0d
    5d46:	4e 85       	ldd	r20, Y+14	; 0x0e
    5d48:	5f 85       	ldd	r21, Y+15	; 0x0f
    5d4a:	68 89       	ldd	r22, Y+16	; 0x10
    5d4c:	79 89       	ldd	r23, Y+17	; 0x11
    5d4e:	8a 89       	ldd	r24, Y+18	; 0x12
    5d50:	9b 89       	ldd	r25, Y+19	; 0x13
    5d52:	05 e0       	ldi	r16, 0x05	; 5
    5d54:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5d58:	2c 8b       	std	Y+20, r18	; 0x14
    5d5a:	3d 8b       	std	Y+21, r19	; 0x15
    5d5c:	4e 8b       	std	Y+22, r20	; 0x16
    5d5e:	5f 8b       	std	Y+23, r21	; 0x17
    5d60:	68 8f       	std	Y+24, r22	; 0x18
    5d62:	79 8f       	std	Y+25, r23	; 0x19
    5d64:	8a 8f       	std	Y+26, r24	; 0x1a
    5d66:	9b 8f       	std	Y+27, r25	; 0x1b
    5d68:	1c 89       	ldd	r17, Y+20	; 0x14
    5d6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d6c:	12 1b       	sub	r17, r18
    5d6e:	1c 8f       	std	Y+28, r17	; 0x1c
    5d70:	31 e0       	ldi	r19, 0x01	; 1
    5d72:	3c a3       	std	Y+36, r19	; 0x24
    5d74:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5d76:	5c 89       	ldd	r21, Y+20	; 0x14
    5d78:	54 17       	cp	r21, r20
    5d7a:	08 f0       	brcs	.+2      	; 0x5d7e <SERVO_voidSetServoAngle+0xcc>
    5d7c:	1c a2       	std	Y+36, r1	; 0x24
    5d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    5d80:	7d 85       	ldd	r23, Y+13	; 0x0d
    5d82:	67 1b       	sub	r22, r23
    5d84:	6d 8f       	std	Y+29, r22	; 0x1d
    5d86:	81 e0       	ldi	r24, 0x01	; 1
    5d88:	8d a3       	std	Y+37, r24	; 0x25
    5d8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5d8c:	0d 89       	ldd	r16, Y+21	; 0x15
    5d8e:	09 17       	cp	r16, r25
    5d90:	08 f0       	brcs	.+2      	; 0x5d94 <SERVO_voidSetServoAngle+0xe2>
    5d92:	1d a2       	std	Y+37, r1	; 0x25
    5d94:	1d 8d       	ldd	r17, Y+29	; 0x1d
    5d96:	2c a1       	ldd	r18, Y+36	; 0x24
    5d98:	12 1b       	sub	r17, r18
    5d9a:	1e a3       	std	Y+38, r17	; 0x26
    5d9c:	31 e0       	ldi	r19, 0x01	; 1
    5d9e:	3f a3       	std	Y+39, r19	; 0x27
    5da0:	4e a1       	ldd	r20, Y+38	; 0x26
    5da2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5da4:	54 17       	cp	r21, r20
    5da6:	08 f0       	brcs	.+2      	; 0x5daa <SERVO_voidSetServoAngle+0xf8>
    5da8:	1f a2       	std	Y+39, r1	; 0x27
    5daa:	6d a1       	ldd	r22, Y+37	; 0x25
    5dac:	7f a1       	ldd	r23, Y+39	; 0x27
    5dae:	67 2b       	or	r22, r23
    5db0:	6d a3       	std	Y+37, r22	; 0x25
    5db2:	8e a1       	ldd	r24, Y+38	; 0x26
    5db4:	8d 8f       	std	Y+29, r24	; 0x1d
    5db6:	9e 89       	ldd	r25, Y+22	; 0x16
    5db8:	0e 85       	ldd	r16, Y+14	; 0x0e
    5dba:	90 1b       	sub	r25, r16
    5dbc:	9e 8f       	std	Y+30, r25	; 0x1e
    5dbe:	11 e0       	ldi	r17, 0x01	; 1
    5dc0:	18 a7       	std	Y+40, r17	; 0x28
    5dc2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    5dc4:	3e 89       	ldd	r19, Y+22	; 0x16
    5dc6:	32 17       	cp	r19, r18
    5dc8:	08 f0       	brcs	.+2      	; 0x5dcc <SERVO_voidSetServoAngle+0x11a>
    5dca:	18 a6       	std	Y+40, r1	; 0x28
    5dcc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    5dce:	5d a1       	ldd	r21, Y+37	; 0x25
    5dd0:	45 1b       	sub	r20, r21
    5dd2:	49 a7       	std	Y+41, r20	; 0x29
    5dd4:	61 e0       	ldi	r22, 0x01	; 1
    5dd6:	6a a7       	std	Y+42, r22	; 0x2a
    5dd8:	79 a5       	ldd	r23, Y+41	; 0x29
    5dda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ddc:	87 17       	cp	r24, r23
    5dde:	08 f0       	brcs	.+2      	; 0x5de2 <SERVO_voidSetServoAngle+0x130>
    5de0:	1a a6       	std	Y+42, r1	; 0x2a
    5de2:	98 a5       	ldd	r25, Y+40	; 0x28
    5de4:	0a a5       	ldd	r16, Y+42	; 0x2a
    5de6:	90 2b       	or	r25, r16
    5de8:	98 a7       	std	Y+40, r25	; 0x28
    5dea:	19 a5       	ldd	r17, Y+41	; 0x29
    5dec:	1e 8f       	std	Y+30, r17	; 0x1e
    5dee:	2f 89       	ldd	r18, Y+23	; 0x17
    5df0:	3f 85       	ldd	r19, Y+15	; 0x0f
    5df2:	23 1b       	sub	r18, r19
    5df4:	2f 8f       	std	Y+31, r18	; 0x1f
    5df6:	41 e0       	ldi	r20, 0x01	; 1
    5df8:	4b a7       	std	Y+43, r20	; 0x2b
    5dfa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    5dfc:	6f 89       	ldd	r22, Y+23	; 0x17
    5dfe:	65 17       	cp	r22, r21
    5e00:	08 f0       	brcs	.+2      	; 0x5e04 <SERVO_voidSetServoAngle+0x152>
    5e02:	1b a6       	std	Y+43, r1	; 0x2b
    5e04:	7f 8d       	ldd	r23, Y+31	; 0x1f
    5e06:	88 a5       	ldd	r24, Y+40	; 0x28
    5e08:	78 1b       	sub	r23, r24
    5e0a:	7c a7       	std	Y+44, r23	; 0x2c
    5e0c:	91 e0       	ldi	r25, 0x01	; 1
    5e0e:	9d a7       	std	Y+45, r25	; 0x2d
    5e10:	0c a5       	ldd	r16, Y+44	; 0x2c
    5e12:	1f 8d       	ldd	r17, Y+31	; 0x1f
    5e14:	10 17       	cp	r17, r16
    5e16:	08 f0       	brcs	.+2      	; 0x5e1a <SERVO_voidSetServoAngle+0x168>
    5e18:	1d a6       	std	Y+45, r1	; 0x2d
    5e1a:	2b a5       	ldd	r18, Y+43	; 0x2b
    5e1c:	3d a5       	ldd	r19, Y+45	; 0x2d
    5e1e:	23 2b       	or	r18, r19
    5e20:	2b a7       	std	Y+43, r18	; 0x2b
    5e22:	4c a5       	ldd	r20, Y+44	; 0x2c
    5e24:	4f 8f       	std	Y+31, r20	; 0x1f
    5e26:	58 8d       	ldd	r21, Y+24	; 0x18
    5e28:	68 89       	ldd	r22, Y+16	; 0x10
    5e2a:	56 1b       	sub	r21, r22
    5e2c:	58 a3       	std	Y+32, r21	; 0x20
    5e2e:	71 e0       	ldi	r23, 0x01	; 1
    5e30:	7e a7       	std	Y+46, r23	; 0x2e
    5e32:	88 a1       	ldd	r24, Y+32	; 0x20
    5e34:	98 8d       	ldd	r25, Y+24	; 0x18
    5e36:	98 17       	cp	r25, r24
    5e38:	08 f0       	brcs	.+2      	; 0x5e3c <SERVO_voidSetServoAngle+0x18a>
    5e3a:	1e a6       	std	Y+46, r1	; 0x2e
    5e3c:	08 a1       	ldd	r16, Y+32	; 0x20
    5e3e:	1b a5       	ldd	r17, Y+43	; 0x2b
    5e40:	01 1b       	sub	r16, r17
    5e42:	0f a7       	std	Y+47, r16	; 0x2f
    5e44:	21 e0       	ldi	r18, 0x01	; 1
    5e46:	28 ab       	std	Y+48, r18	; 0x30
    5e48:	3f a5       	ldd	r19, Y+47	; 0x2f
    5e4a:	48 a1       	ldd	r20, Y+32	; 0x20
    5e4c:	43 17       	cp	r20, r19
    5e4e:	08 f0       	brcs	.+2      	; 0x5e52 <SERVO_voidSetServoAngle+0x1a0>
    5e50:	18 aa       	std	Y+48, r1	; 0x30
    5e52:	5e a5       	ldd	r21, Y+46	; 0x2e
    5e54:	68 a9       	ldd	r22, Y+48	; 0x30
    5e56:	56 2b       	or	r21, r22
    5e58:	5e a7       	std	Y+46, r21	; 0x2e
    5e5a:	7f a5       	ldd	r23, Y+47	; 0x2f
    5e5c:	78 a3       	std	Y+32, r23	; 0x20
    5e5e:	89 8d       	ldd	r24, Y+25	; 0x19
    5e60:	99 89       	ldd	r25, Y+17	; 0x11
    5e62:	89 1b       	sub	r24, r25
    5e64:	89 a3       	std	Y+33, r24	; 0x21
    5e66:	01 e0       	ldi	r16, 0x01	; 1
    5e68:	09 ab       	std	Y+49, r16	; 0x31
    5e6a:	19 a1       	ldd	r17, Y+33	; 0x21
    5e6c:	29 8d       	ldd	r18, Y+25	; 0x19
    5e6e:	21 17       	cp	r18, r17
    5e70:	08 f0       	brcs	.+2      	; 0x5e74 <SERVO_voidSetServoAngle+0x1c2>
    5e72:	19 aa       	std	Y+49, r1	; 0x31
    5e74:	39 a1       	ldd	r19, Y+33	; 0x21
    5e76:	4e a5       	ldd	r20, Y+46	; 0x2e
    5e78:	34 1b       	sub	r19, r20
    5e7a:	3a ab       	std	Y+50, r19	; 0x32
    5e7c:	51 e0       	ldi	r21, 0x01	; 1
    5e7e:	5b ab       	std	Y+51, r21	; 0x33
    5e80:	6a a9       	ldd	r22, Y+50	; 0x32
    5e82:	79 a1       	ldd	r23, Y+33	; 0x21
    5e84:	76 17       	cp	r23, r22
    5e86:	08 f0       	brcs	.+2      	; 0x5e8a <SERVO_voidSetServoAngle+0x1d8>
    5e88:	1b aa       	std	Y+51, r1	; 0x33
    5e8a:	89 a9       	ldd	r24, Y+49	; 0x31
    5e8c:	9b a9       	ldd	r25, Y+51	; 0x33
    5e8e:	89 2b       	or	r24, r25
    5e90:	89 ab       	std	Y+49, r24	; 0x31
    5e92:	0a a9       	ldd	r16, Y+50	; 0x32
    5e94:	09 a3       	std	Y+33, r16	; 0x21
    5e96:	1a 8d       	ldd	r17, Y+26	; 0x1a
    5e98:	2a 89       	ldd	r18, Y+18	; 0x12
    5e9a:	12 1b       	sub	r17, r18
    5e9c:	1a a3       	std	Y+34, r17	; 0x22
    5e9e:	31 e0       	ldi	r19, 0x01	; 1
    5ea0:	3c ab       	std	Y+52, r19	; 0x34
    5ea2:	4a a1       	ldd	r20, Y+34	; 0x22
    5ea4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5ea6:	54 17       	cp	r21, r20
    5ea8:	08 f0       	brcs	.+2      	; 0x5eac <SERVO_voidSetServoAngle+0x1fa>
    5eaa:	1c aa       	std	Y+52, r1	; 0x34
    5eac:	6a a1       	ldd	r22, Y+34	; 0x22
    5eae:	79 a9       	ldd	r23, Y+49	; 0x31
    5eb0:	67 1b       	sub	r22, r23
    5eb2:	6d ab       	std	Y+53, r22	; 0x35
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	8e ab       	std	Y+54, r24	; 0x36
    5eb8:	9d a9       	ldd	r25, Y+53	; 0x35
    5eba:	0a a1       	ldd	r16, Y+34	; 0x22
    5ebc:	09 17       	cp	r16, r25
    5ebe:	08 f0       	brcs	.+2      	; 0x5ec2 <SERVO_voidSetServoAngle+0x210>
    5ec0:	1e aa       	std	Y+54, r1	; 0x36
    5ec2:	1c a9       	ldd	r17, Y+52	; 0x34
    5ec4:	2e a9       	ldd	r18, Y+54	; 0x36
    5ec6:	12 2b       	or	r17, r18
    5ec8:	1c ab       	std	Y+52, r17	; 0x34
    5eca:	3d a9       	ldd	r19, Y+53	; 0x35
    5ecc:	3a a3       	std	Y+34, r19	; 0x22
    5ece:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5ed0:	5b 89       	ldd	r21, Y+19	; 0x13
    5ed2:	45 1b       	sub	r20, r21
    5ed4:	4b a3       	std	Y+35, r20	; 0x23
    5ed6:	8b a1       	ldd	r24, Y+35	; 0x23
    5ed8:	6c a9       	ldd	r22, Y+52	; 0x34
    5eda:	86 1b       	sub	r24, r22
    5edc:	8b a3       	std	Y+35, r24	; 0x23
    5ede:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5ee0:	7c 8b       	std	Y+20, r23	; 0x14
    5ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ee4:	8d 8b       	std	Y+21, r24	; 0x15
    5ee6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ee8:	9e 8b       	std	Y+22, r25	; 0x16
    5eea:	0f 8d       	ldd	r16, Y+31	; 0x1f
    5eec:	0f 8b       	std	Y+23, r16	; 0x17
    5eee:	18 a1       	ldd	r17, Y+32	; 0x20
    5ef0:	18 8f       	std	Y+24, r17	; 0x18
    5ef2:	29 a1       	ldd	r18, Y+33	; 0x21
    5ef4:	29 8f       	std	Y+25, r18	; 0x19
    5ef6:	3a a1       	ldd	r19, Y+34	; 0x22
    5ef8:	3a 8f       	std	Y+26, r19	; 0x1a
    5efa:	4b a1       	ldd	r20, Y+35	; 0x23
    5efc:	4b 8f       	std	Y+27, r20	; 0x1b
    5efe:	5c 89       	ldd	r21, Y+20	; 0x14
    5f00:	6c 81       	ldd	r22, Y+4	; 0x04
    5f02:	56 0f       	add	r21, r22
    5f04:	5f ab       	std	Y+55, r21	; 0x37
    5f06:	71 e0       	ldi	r23, 0x01	; 1
    5f08:	7f af       	std	Y+63, r23	; 0x3f
    5f0a:	8f a9       	ldd	r24, Y+55	; 0x37
    5f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f0e:	89 17       	cp	r24, r25
    5f10:	08 f0       	brcs	.+2      	; 0x5f14 <SERVO_voidSetServoAngle+0x262>
    5f12:	1f ae       	std	Y+63, r1	; 0x3f
    5f14:	0d 89       	ldd	r16, Y+21	; 0x15
    5f16:	1d 81       	ldd	r17, Y+5	; 0x05
    5f18:	01 0f       	add	r16, r17
    5f1a:	08 af       	std	Y+56, r16	; 0x38
    5f1c:	21 e0       	ldi	r18, 0x01	; 1
    5f1e:	21 96       	adiw	r28, 0x01	; 1
    5f20:	2f af       	std	Y+63, r18	; 0x3f
    5f22:	21 97       	sbiw	r28, 0x01	; 1
    5f24:	38 ad       	ldd	r19, Y+56	; 0x38
    5f26:	4d 89       	ldd	r20, Y+21	; 0x15
    5f28:	34 17       	cp	r19, r20
    5f2a:	18 f0       	brcs	.+6      	; 0x5f32 <SERVO_voidSetServoAngle+0x280>
    5f2c:	21 96       	adiw	r28, 0x01	; 1
    5f2e:	1f ae       	std	Y+63, r1	; 0x3f
    5f30:	21 97       	sbiw	r28, 0x01	; 1
    5f32:	5f ad       	ldd	r21, Y+63	; 0x3f
    5f34:	68 ad       	ldd	r22, Y+56	; 0x38
    5f36:	56 0f       	add	r21, r22
    5f38:	22 96       	adiw	r28, 0x02	; 2
    5f3a:	5f af       	std	Y+63, r21	; 0x3f
    5f3c:	22 97       	sbiw	r28, 0x02	; 2
    5f3e:	71 e0       	ldi	r23, 0x01	; 1
    5f40:	23 96       	adiw	r28, 0x03	; 3
    5f42:	7f af       	std	Y+63, r23	; 0x3f
    5f44:	23 97       	sbiw	r28, 0x03	; 3
    5f46:	22 96       	adiw	r28, 0x02	; 2
    5f48:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f4a:	22 97       	sbiw	r28, 0x02	; 2
    5f4c:	98 ad       	ldd	r25, Y+56	; 0x38
    5f4e:	89 17       	cp	r24, r25
    5f50:	18 f0       	brcs	.+6      	; 0x5f58 <SERVO_voidSetServoAngle+0x2a6>
    5f52:	23 96       	adiw	r28, 0x03	; 3
    5f54:	1f ae       	std	Y+63, r1	; 0x3f
    5f56:	23 97       	sbiw	r28, 0x03	; 3
    5f58:	21 96       	adiw	r28, 0x01	; 1
    5f5a:	0f ad       	ldd	r16, Y+63	; 0x3f
    5f5c:	21 97       	sbiw	r28, 0x01	; 1
    5f5e:	23 96       	adiw	r28, 0x03	; 3
    5f60:	1f ad       	ldd	r17, Y+63	; 0x3f
    5f62:	23 97       	sbiw	r28, 0x03	; 3
    5f64:	01 2b       	or	r16, r17
    5f66:	21 96       	adiw	r28, 0x01	; 1
    5f68:	0f af       	std	Y+63, r16	; 0x3f
    5f6a:	21 97       	sbiw	r28, 0x01	; 1
    5f6c:	22 96       	adiw	r28, 0x02	; 2
    5f6e:	2f ad       	ldd	r18, Y+63	; 0x3f
    5f70:	22 97       	sbiw	r28, 0x02	; 2
    5f72:	28 af       	std	Y+56, r18	; 0x38
    5f74:	3e 89       	ldd	r19, Y+22	; 0x16
    5f76:	4e 81       	ldd	r20, Y+6	; 0x06
    5f78:	34 0f       	add	r19, r20
    5f7a:	39 af       	std	Y+57, r19	; 0x39
    5f7c:	51 e0       	ldi	r21, 0x01	; 1
    5f7e:	24 96       	adiw	r28, 0x04	; 4
    5f80:	5f af       	std	Y+63, r21	; 0x3f
    5f82:	24 97       	sbiw	r28, 0x04	; 4
    5f84:	69 ad       	ldd	r22, Y+57	; 0x39
    5f86:	7e 89       	ldd	r23, Y+22	; 0x16
    5f88:	67 17       	cp	r22, r23
    5f8a:	18 f0       	brcs	.+6      	; 0x5f92 <SERVO_voidSetServoAngle+0x2e0>
    5f8c:	24 96       	adiw	r28, 0x04	; 4
    5f8e:	1f ae       	std	Y+63, r1	; 0x3f
    5f90:	24 97       	sbiw	r28, 0x04	; 4
    5f92:	21 96       	adiw	r28, 0x01	; 1
    5f94:	8f ad       	ldd	r24, Y+63	; 0x3f
    5f96:	21 97       	sbiw	r28, 0x01	; 1
    5f98:	99 ad       	ldd	r25, Y+57	; 0x39
    5f9a:	89 0f       	add	r24, r25
    5f9c:	25 96       	adiw	r28, 0x05	; 5
    5f9e:	8f af       	std	Y+63, r24	; 0x3f
    5fa0:	25 97       	sbiw	r28, 0x05	; 5
    5fa2:	01 e0       	ldi	r16, 0x01	; 1
    5fa4:	26 96       	adiw	r28, 0x06	; 6
    5fa6:	0f af       	std	Y+63, r16	; 0x3f
    5fa8:	26 97       	sbiw	r28, 0x06	; 6
    5faa:	25 96       	adiw	r28, 0x05	; 5
    5fac:	1f ad       	ldd	r17, Y+63	; 0x3f
    5fae:	25 97       	sbiw	r28, 0x05	; 5
    5fb0:	29 ad       	ldd	r18, Y+57	; 0x39
    5fb2:	12 17       	cp	r17, r18
    5fb4:	18 f0       	brcs	.+6      	; 0x5fbc <SERVO_voidSetServoAngle+0x30a>
    5fb6:	26 96       	adiw	r28, 0x06	; 6
    5fb8:	1f ae       	std	Y+63, r1	; 0x3f
    5fba:	26 97       	sbiw	r28, 0x06	; 6
    5fbc:	24 96       	adiw	r28, 0x04	; 4
    5fbe:	3f ad       	ldd	r19, Y+63	; 0x3f
    5fc0:	24 97       	sbiw	r28, 0x04	; 4
    5fc2:	26 96       	adiw	r28, 0x06	; 6
    5fc4:	4f ad       	ldd	r20, Y+63	; 0x3f
    5fc6:	26 97       	sbiw	r28, 0x06	; 6
    5fc8:	34 2b       	or	r19, r20
    5fca:	24 96       	adiw	r28, 0x04	; 4
    5fcc:	3f af       	std	Y+63, r19	; 0x3f
    5fce:	24 97       	sbiw	r28, 0x04	; 4
    5fd0:	25 96       	adiw	r28, 0x05	; 5
    5fd2:	5f ad       	ldd	r21, Y+63	; 0x3f
    5fd4:	25 97       	sbiw	r28, 0x05	; 5
    5fd6:	59 af       	std	Y+57, r21	; 0x39
    5fd8:	6f 89       	ldd	r22, Y+23	; 0x17
    5fda:	7f 81       	ldd	r23, Y+7	; 0x07
    5fdc:	67 0f       	add	r22, r23
    5fde:	6a af       	std	Y+58, r22	; 0x3a
    5fe0:	81 e0       	ldi	r24, 0x01	; 1
    5fe2:	27 96       	adiw	r28, 0x07	; 7
    5fe4:	8f af       	std	Y+63, r24	; 0x3f
    5fe6:	27 97       	sbiw	r28, 0x07	; 7
    5fe8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5fea:	0f 89       	ldd	r16, Y+23	; 0x17
    5fec:	90 17       	cp	r25, r16
    5fee:	18 f0       	brcs	.+6      	; 0x5ff6 <SERVO_voidSetServoAngle+0x344>
    5ff0:	27 96       	adiw	r28, 0x07	; 7
    5ff2:	1f ae       	std	Y+63, r1	; 0x3f
    5ff4:	27 97       	sbiw	r28, 0x07	; 7
    5ff6:	24 96       	adiw	r28, 0x04	; 4
    5ff8:	1f ad       	ldd	r17, Y+63	; 0x3f
    5ffa:	24 97       	sbiw	r28, 0x04	; 4
    5ffc:	2a ad       	ldd	r18, Y+58	; 0x3a
    5ffe:	12 0f       	add	r17, r18
    6000:	28 96       	adiw	r28, 0x08	; 8
    6002:	1f af       	std	Y+63, r17	; 0x3f
    6004:	28 97       	sbiw	r28, 0x08	; 8
    6006:	31 e0       	ldi	r19, 0x01	; 1
    6008:	29 96       	adiw	r28, 0x09	; 9
    600a:	3f af       	std	Y+63, r19	; 0x3f
    600c:	29 97       	sbiw	r28, 0x09	; 9
    600e:	28 96       	adiw	r28, 0x08	; 8
    6010:	4f ad       	ldd	r20, Y+63	; 0x3f
    6012:	28 97       	sbiw	r28, 0x08	; 8
    6014:	5a ad       	ldd	r21, Y+58	; 0x3a
    6016:	45 17       	cp	r20, r21
    6018:	18 f0       	brcs	.+6      	; 0x6020 <SERVO_voidSetServoAngle+0x36e>
    601a:	29 96       	adiw	r28, 0x09	; 9
    601c:	1f ae       	std	Y+63, r1	; 0x3f
    601e:	29 97       	sbiw	r28, 0x09	; 9
    6020:	27 96       	adiw	r28, 0x07	; 7
    6022:	6f ad       	ldd	r22, Y+63	; 0x3f
    6024:	27 97       	sbiw	r28, 0x07	; 7
    6026:	29 96       	adiw	r28, 0x09	; 9
    6028:	7f ad       	ldd	r23, Y+63	; 0x3f
    602a:	29 97       	sbiw	r28, 0x09	; 9
    602c:	67 2b       	or	r22, r23
    602e:	27 96       	adiw	r28, 0x07	; 7
    6030:	6f af       	std	Y+63, r22	; 0x3f
    6032:	27 97       	sbiw	r28, 0x07	; 7
    6034:	28 96       	adiw	r28, 0x08	; 8
    6036:	8f ad       	ldd	r24, Y+63	; 0x3f
    6038:	28 97       	sbiw	r28, 0x08	; 8
    603a:	8a af       	std	Y+58, r24	; 0x3a
    603c:	98 8d       	ldd	r25, Y+24	; 0x18
    603e:	08 85       	ldd	r16, Y+8	; 0x08
    6040:	90 0f       	add	r25, r16
    6042:	9b af       	std	Y+59, r25	; 0x3b
    6044:	11 e0       	ldi	r17, 0x01	; 1
    6046:	2a 96       	adiw	r28, 0x0a	; 10
    6048:	1f af       	std	Y+63, r17	; 0x3f
    604a:	2a 97       	sbiw	r28, 0x0a	; 10
    604c:	2b ad       	ldd	r18, Y+59	; 0x3b
    604e:	38 8d       	ldd	r19, Y+24	; 0x18
    6050:	23 17       	cp	r18, r19
    6052:	18 f0       	brcs	.+6      	; 0x605a <SERVO_voidSetServoAngle+0x3a8>
    6054:	2a 96       	adiw	r28, 0x0a	; 10
    6056:	1f ae       	std	Y+63, r1	; 0x3f
    6058:	2a 97       	sbiw	r28, 0x0a	; 10
    605a:	27 96       	adiw	r28, 0x07	; 7
    605c:	4f ad       	ldd	r20, Y+63	; 0x3f
    605e:	27 97       	sbiw	r28, 0x07	; 7
    6060:	5b ad       	ldd	r21, Y+59	; 0x3b
    6062:	45 0f       	add	r20, r21
    6064:	2b 96       	adiw	r28, 0x0b	; 11
    6066:	4f af       	std	Y+63, r20	; 0x3f
    6068:	2b 97       	sbiw	r28, 0x0b	; 11
    606a:	61 e0       	ldi	r22, 0x01	; 1
    606c:	2c 96       	adiw	r28, 0x0c	; 12
    606e:	6f af       	std	Y+63, r22	; 0x3f
    6070:	2c 97       	sbiw	r28, 0x0c	; 12
    6072:	2b 96       	adiw	r28, 0x0b	; 11
    6074:	7f ad       	ldd	r23, Y+63	; 0x3f
    6076:	2b 97       	sbiw	r28, 0x0b	; 11
    6078:	8b ad       	ldd	r24, Y+59	; 0x3b
    607a:	78 17       	cp	r23, r24
    607c:	18 f0       	brcs	.+6      	; 0x6084 <SERVO_voidSetServoAngle+0x3d2>
    607e:	2c 96       	adiw	r28, 0x0c	; 12
    6080:	1f ae       	std	Y+63, r1	; 0x3f
    6082:	2c 97       	sbiw	r28, 0x0c	; 12
    6084:	2a 96       	adiw	r28, 0x0a	; 10
    6086:	9f ad       	ldd	r25, Y+63	; 0x3f
    6088:	2a 97       	sbiw	r28, 0x0a	; 10
    608a:	2c 96       	adiw	r28, 0x0c	; 12
    608c:	0f ad       	ldd	r16, Y+63	; 0x3f
    608e:	2c 97       	sbiw	r28, 0x0c	; 12
    6090:	90 2b       	or	r25, r16
    6092:	2a 96       	adiw	r28, 0x0a	; 10
    6094:	9f af       	std	Y+63, r25	; 0x3f
    6096:	2a 97       	sbiw	r28, 0x0a	; 10
    6098:	2b 96       	adiw	r28, 0x0b	; 11
    609a:	1f ad       	ldd	r17, Y+63	; 0x3f
    609c:	2b 97       	sbiw	r28, 0x0b	; 11
    609e:	1b af       	std	Y+59, r17	; 0x3b
    60a0:	29 8d       	ldd	r18, Y+25	; 0x19
    60a2:	39 85       	ldd	r19, Y+9	; 0x09
    60a4:	23 0f       	add	r18, r19
    60a6:	2c af       	std	Y+60, r18	; 0x3c
    60a8:	41 e0       	ldi	r20, 0x01	; 1
    60aa:	2d 96       	adiw	r28, 0x0d	; 13
    60ac:	4f af       	std	Y+63, r20	; 0x3f
    60ae:	2d 97       	sbiw	r28, 0x0d	; 13
    60b0:	5c ad       	ldd	r21, Y+60	; 0x3c
    60b2:	69 8d       	ldd	r22, Y+25	; 0x19
    60b4:	56 17       	cp	r21, r22
    60b6:	18 f0       	brcs	.+6      	; 0x60be <SERVO_voidSetServoAngle+0x40c>
    60b8:	2d 96       	adiw	r28, 0x0d	; 13
    60ba:	1f ae       	std	Y+63, r1	; 0x3f
    60bc:	2d 97       	sbiw	r28, 0x0d	; 13
    60be:	2a 96       	adiw	r28, 0x0a	; 10
    60c0:	7f ad       	ldd	r23, Y+63	; 0x3f
    60c2:	2a 97       	sbiw	r28, 0x0a	; 10
    60c4:	8c ad       	ldd	r24, Y+60	; 0x3c
    60c6:	78 0f       	add	r23, r24
    60c8:	2e 96       	adiw	r28, 0x0e	; 14
    60ca:	7f af       	std	Y+63, r23	; 0x3f
    60cc:	2e 97       	sbiw	r28, 0x0e	; 14
    60ce:	91 e0       	ldi	r25, 0x01	; 1
    60d0:	2f 96       	adiw	r28, 0x0f	; 15
    60d2:	9f af       	std	Y+63, r25	; 0x3f
    60d4:	2f 97       	sbiw	r28, 0x0f	; 15
    60d6:	2e 96       	adiw	r28, 0x0e	; 14
    60d8:	0f ad       	ldd	r16, Y+63	; 0x3f
    60da:	2e 97       	sbiw	r28, 0x0e	; 14
    60dc:	1c ad       	ldd	r17, Y+60	; 0x3c
    60de:	01 17       	cp	r16, r17
    60e0:	18 f0       	brcs	.+6      	; 0x60e8 <SERVO_voidSetServoAngle+0x436>
    60e2:	2f 96       	adiw	r28, 0x0f	; 15
    60e4:	1f ae       	std	Y+63, r1	; 0x3f
    60e6:	2f 97       	sbiw	r28, 0x0f	; 15
    60e8:	2d 96       	adiw	r28, 0x0d	; 13
    60ea:	2f ad       	ldd	r18, Y+63	; 0x3f
    60ec:	2d 97       	sbiw	r28, 0x0d	; 13
    60ee:	2f 96       	adiw	r28, 0x0f	; 15
    60f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    60f2:	2f 97       	sbiw	r28, 0x0f	; 15
    60f4:	23 2b       	or	r18, r19
    60f6:	2d 96       	adiw	r28, 0x0d	; 13
    60f8:	2f af       	std	Y+63, r18	; 0x3f
    60fa:	2d 97       	sbiw	r28, 0x0d	; 13
    60fc:	2e 96       	adiw	r28, 0x0e	; 14
    60fe:	4f ad       	ldd	r20, Y+63	; 0x3f
    6100:	2e 97       	sbiw	r28, 0x0e	; 14
    6102:	4c af       	std	Y+60, r20	; 0x3c
    6104:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6106:	6a 85       	ldd	r22, Y+10	; 0x0a
    6108:	56 0f       	add	r21, r22
    610a:	5d af       	std	Y+61, r21	; 0x3d
    610c:	71 e0       	ldi	r23, 0x01	; 1
    610e:	60 96       	adiw	r28, 0x10	; 16
    6110:	7f af       	std	Y+63, r23	; 0x3f
    6112:	60 97       	sbiw	r28, 0x10	; 16
    6114:	8d ad       	ldd	r24, Y+61	; 0x3d
    6116:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6118:	89 17       	cp	r24, r25
    611a:	18 f0       	brcs	.+6      	; 0x6122 <SERVO_voidSetServoAngle+0x470>
    611c:	60 96       	adiw	r28, 0x10	; 16
    611e:	1f ae       	std	Y+63, r1	; 0x3f
    6120:	60 97       	sbiw	r28, 0x10	; 16
    6122:	2d 96       	adiw	r28, 0x0d	; 13
    6124:	0f ad       	ldd	r16, Y+63	; 0x3f
    6126:	2d 97       	sbiw	r28, 0x0d	; 13
    6128:	1d ad       	ldd	r17, Y+61	; 0x3d
    612a:	01 0f       	add	r16, r17
    612c:	61 96       	adiw	r28, 0x11	; 17
    612e:	0f af       	std	Y+63, r16	; 0x3f
    6130:	61 97       	sbiw	r28, 0x11	; 17
    6132:	21 e0       	ldi	r18, 0x01	; 1
    6134:	62 96       	adiw	r28, 0x12	; 18
    6136:	2f af       	std	Y+63, r18	; 0x3f
    6138:	62 97       	sbiw	r28, 0x12	; 18
    613a:	61 96       	adiw	r28, 0x11	; 17
    613c:	3f ad       	ldd	r19, Y+63	; 0x3f
    613e:	61 97       	sbiw	r28, 0x11	; 17
    6140:	4d ad       	ldd	r20, Y+61	; 0x3d
    6142:	34 17       	cp	r19, r20
    6144:	18 f0       	brcs	.+6      	; 0x614c <SERVO_voidSetServoAngle+0x49a>
    6146:	62 96       	adiw	r28, 0x12	; 18
    6148:	1f ae       	std	Y+63, r1	; 0x3f
    614a:	62 97       	sbiw	r28, 0x12	; 18
    614c:	60 96       	adiw	r28, 0x10	; 16
    614e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6150:	60 97       	sbiw	r28, 0x10	; 16
    6152:	62 96       	adiw	r28, 0x12	; 18
    6154:	6f ad       	ldd	r22, Y+63	; 0x3f
    6156:	62 97       	sbiw	r28, 0x12	; 18
    6158:	56 2b       	or	r21, r22
    615a:	60 96       	adiw	r28, 0x10	; 16
    615c:	5f af       	std	Y+63, r21	; 0x3f
    615e:	60 97       	sbiw	r28, 0x10	; 16
    6160:	61 96       	adiw	r28, 0x11	; 17
    6162:	7f ad       	ldd	r23, Y+63	; 0x3f
    6164:	61 97       	sbiw	r28, 0x11	; 17
    6166:	7d af       	std	Y+61, r23	; 0x3d
    6168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    616a:	9b 85       	ldd	r25, Y+11	; 0x0b
    616c:	89 0f       	add	r24, r25
    616e:	8e af       	std	Y+62, r24	; 0x3e
    6170:	60 96       	adiw	r28, 0x10	; 16
    6172:	8f ad       	ldd	r24, Y+63	; 0x3f
    6174:	60 97       	sbiw	r28, 0x10	; 16
    6176:	0e ad       	ldd	r16, Y+62	; 0x3e
    6178:	80 0f       	add	r24, r16
    617a:	8e af       	std	Y+62, r24	; 0x3e
    617c:	1f a9       	ldd	r17, Y+55	; 0x37
    617e:	1c 8b       	std	Y+20, r17	; 0x14
    6180:	28 ad       	ldd	r18, Y+56	; 0x38
    6182:	2d 8b       	std	Y+21, r18	; 0x15
    6184:	39 ad       	ldd	r19, Y+57	; 0x39
    6186:	3e 8b       	std	Y+22, r19	; 0x16
    6188:	4a ad       	ldd	r20, Y+58	; 0x3a
    618a:	4f 8b       	std	Y+23, r20	; 0x17
    618c:	5b ad       	ldd	r21, Y+59	; 0x3b
    618e:	58 8f       	std	Y+24, r21	; 0x18
    6190:	6c ad       	ldd	r22, Y+60	; 0x3c
    6192:	69 8f       	std	Y+25, r22	; 0x19
    6194:	7d ad       	ldd	r23, Y+61	; 0x3d
    6196:	7a 8f       	std	Y+26, r23	; 0x1a
    6198:	8e ad       	ldd	r24, Y+62	; 0x3e
    619a:	8b 8f       	std	Y+27, r24	; 0x1b
    619c:	2c 89       	ldd	r18, Y+20	; 0x14
    619e:	3d 89       	ldd	r19, Y+21	; 0x15
    61a0:	4e 89       	ldd	r20, Y+22	; 0x16
    61a2:	5f 89       	ldd	r21, Y+23	; 0x17
    61a4:	68 8d       	ldd	r22, Y+24	; 0x18
    61a6:	79 8d       	ldd	r23, Y+25	; 0x19
    61a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    61aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    61ac:	03 e0       	ldi	r16, 0x03	; 3
    61ae:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    61b2:	22 2e       	mov	r2, r18
    61b4:	33 2e       	mov	r3, r19
    61b6:	44 2e       	mov	r4, r20
    61b8:	55 2e       	mov	r5, r21
    61ba:	66 2e       	mov	r6, r22
    61bc:	77 2e       	mov	r7, r23
    61be:	88 2e       	mov	r8, r24
    61c0:	99 2e       	mov	r9, r25
    61c2:	a2 2c       	mov	r10, r2
    61c4:	b3 2c       	mov	r11, r3
    61c6:	c4 2c       	mov	r12, r4
    61c8:	d5 2c       	mov	r13, r5
    61ca:	e6 2c       	mov	r14, r6
    61cc:	f7 2c       	mov	r15, r7
    61ce:	08 2d       	mov	r16, r8
    61d0:	19 2d       	mov	r17, r9
    61d2:	2a 2d       	mov	r18, r10
    61d4:	3b 2d       	mov	r19, r11
    61d6:	4c 2d       	mov	r20, r12
    61d8:	5d 2d       	mov	r21, r13
    61da:	6e 2d       	mov	r22, r14
    61dc:	7f 2d       	mov	r23, r15
    61de:	80 2f       	mov	r24, r16
    61e0:	91 2f       	mov	r25, r17
    61e2:	0f 2e       	mov	r0, r31
    61e4:	f4 eb       	ldi	r31, 0xB4	; 180
    61e6:	af 2e       	mov	r10, r31
    61e8:	f0 2d       	mov	r31, r0
    61ea:	bb 24       	eor	r11, r11
    61ec:	cc 24       	eor	r12, r12
    61ee:	dd 24       	eor	r13, r13
    61f0:	ee 24       	eor	r14, r14
    61f2:	ff 24       	eor	r15, r15
    61f4:	00 e0       	ldi	r16, 0x00	; 0
    61f6:	10 e0       	ldi	r17, 0x00	; 0
    61f8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    61fc:	a2 2e       	mov	r10, r18
    61fe:	b3 2e       	mov	r11, r19
    6200:	c4 2e       	mov	r12, r20
    6202:	d5 2e       	mov	r13, r21
    6204:	e6 2e       	mov	r14, r22
    6206:	f7 2e       	mov	r15, r23
    6208:	08 2f       	mov	r16, r24
    620a:	19 2f       	mov	r17, r25
    620c:	2a 2d       	mov	r18, r10
    620e:	3b 2d       	mov	r19, r11
    6210:	4c 2d       	mov	r20, r12
    6212:	5d 2d       	mov	r21, r13
    6214:	6e 2d       	mov	r22, r14
    6216:	7f 2d       	mov	r23, r15
    6218:	80 2f       	mov	r24, r16
    621a:	91 2f       	mov	r25, r17
    621c:	c9 01       	movw	r24, r18
    621e:	89 51       	subi	r24, 0x19	; 25
    6220:	9c 4f       	sbci	r25, 0xFC	; 252
    6222:	9a 83       	std	Y+2, r25	; 0x02
    6224:	89 83       	std	Y+1, r24	; 0x01
    TIMER1_voidSetOCR1AValue(local_u16OCRAValue);
    6226:	89 81       	ldd	r24, Y+1	; 0x01
    6228:	9a 81       	ldd	r25, Y+2	; 0x02
    622a:	0e 94 9a 1a 	call	0x3534	; 0x3534 <TIMER1_voidSetOCR1AValue>
}
    622e:	cf 5a       	subi	r28, 0xAF	; 175
    6230:	df 4f       	sbci	r29, 0xFF	; 255
    6232:	0f b6       	in	r0, 0x3f	; 63
    6234:	f8 94       	cli
    6236:	de bf       	out	0x3e, r29	; 62
    6238:	0f be       	out	0x3f, r0	; 63
    623a:	cd bf       	out	0x3d, r28	; 61
    623c:	cf 91       	pop	r28
    623e:	df 91       	pop	r29
    6240:	1f 91       	pop	r17
    6242:	0f 91       	pop	r16
    6244:	ff 90       	pop	r15
    6246:	ef 90       	pop	r14
    6248:	df 90       	pop	r13
    624a:	cf 90       	pop	r12
    624c:	bf 90       	pop	r11
    624e:	af 90       	pop	r10
    6250:	9f 90       	pop	r9
    6252:	8f 90       	pop	r8
    6254:	7f 90       	pop	r7
    6256:	6f 90       	pop	r6
    6258:	5f 90       	pop	r5
    625a:	4f 90       	pop	r4
    625c:	3f 90       	pop	r3
    625e:	2f 90       	pop	r2
    6260:	08 95       	ret

00006262 <LCD_voidSendCommand>:
#include <stdlib.h>
#include <util/delay.h>

#if LCD_MODE == _8_BIT_MODE
void LCD_voidSendCommand(u8 A_u8Command)
{
    6262:	df 93       	push	r29
    6264:	cf 93       	push	r28
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	2f 97       	sbiw	r28, 0x0f	; 15
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	0f be       	out	0x3f, r0	; 63
    6274:	cd bf       	out	0x3d, r28	; 61
    6276:	8f 87       	std	Y+15, r24	; 0x0f
    // RS=0 RW=0
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, PIN_LOW);
    6278:	82 e0       	ldi	r24, 0x02	; 2
    627a:	60 e0       	ldi	r22, 0x00	; 0
    627c:	40 e0       	ldi	r20, 0x00	; 0
    627e:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW_PIN, PIN_LOW);
    6282:	82 e0       	ldi	r24, 0x02	; 2
    6284:	61 e0       	ldi	r22, 0x01	; 1
    6286:	40 e0       	ldi	r20, 0x00	; 0
    6288:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>

    DIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    628c:	83 e0       	ldi	r24, 0x03	; 3
    628e:	6f 85       	ldd	r22, Y+15	; 0x0f
    6290:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_HIGH);
    6294:	82 e0       	ldi	r24, 0x02	; 2
    6296:	62 e0       	ldi	r22, 0x02	; 2
    6298:	41 e0       	ldi	r20, 0x01	; 1
    629a:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	a0 e0       	ldi	r26, 0x00	; 0
    62a4:	b0 e4       	ldi	r27, 0x40	; 64
    62a6:	8b 87       	std	Y+11, r24	; 0x0b
    62a8:	9c 87       	std	Y+12, r25	; 0x0c
    62aa:	ad 87       	std	Y+13, r26	; 0x0d
    62ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    62b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    62b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    62b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    62b6:	20 e0       	ldi	r18, 0x00	; 0
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	4a ef       	ldi	r20, 0xFA	; 250
    62bc:	54 e4       	ldi	r21, 0x44	; 68
    62be:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    62c2:	dc 01       	movw	r26, r24
    62c4:	cb 01       	movw	r24, r22
    62c6:	8f 83       	std	Y+7, r24	; 0x07
    62c8:	98 87       	std	Y+8, r25	; 0x08
    62ca:	a9 87       	std	Y+9, r26	; 0x09
    62cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62ce:	6f 81       	ldd	r22, Y+7	; 0x07
    62d0:	78 85       	ldd	r23, Y+8	; 0x08
    62d2:	89 85       	ldd	r24, Y+9	; 0x09
    62d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62d6:	20 e0       	ldi	r18, 0x00	; 0
    62d8:	30 e0       	ldi	r19, 0x00	; 0
    62da:	40 e8       	ldi	r20, 0x80	; 128
    62dc:	5f e3       	ldi	r21, 0x3F	; 63
    62de:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    62e2:	88 23       	and	r24, r24
    62e4:	2c f4       	brge	.+10     	; 0x62f0 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    62e6:	81 e0       	ldi	r24, 0x01	; 1
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	9e 83       	std	Y+6, r25	; 0x06
    62ec:	8d 83       	std	Y+5, r24	; 0x05
    62ee:	3f c0       	rjmp	.+126    	; 0x636e <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    62f0:	6f 81       	ldd	r22, Y+7	; 0x07
    62f2:	78 85       	ldd	r23, Y+8	; 0x08
    62f4:	89 85       	ldd	r24, Y+9	; 0x09
    62f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    62f8:	20 e0       	ldi	r18, 0x00	; 0
    62fa:	3f ef       	ldi	r19, 0xFF	; 255
    62fc:	4f e7       	ldi	r20, 0x7F	; 127
    62fe:	57 e4       	ldi	r21, 0x47	; 71
    6300:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6304:	18 16       	cp	r1, r24
    6306:	4c f5       	brge	.+82     	; 0x635a <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6308:	6b 85       	ldd	r22, Y+11	; 0x0b
    630a:	7c 85       	ldd	r23, Y+12	; 0x0c
    630c:	8d 85       	ldd	r24, Y+13	; 0x0d
    630e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6310:	20 e0       	ldi	r18, 0x00	; 0
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	40 e2       	ldi	r20, 0x20	; 32
    6316:	51 e4       	ldi	r21, 0x41	; 65
    6318:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    631c:	dc 01       	movw	r26, r24
    631e:	cb 01       	movw	r24, r22
    6320:	bc 01       	movw	r22, r24
    6322:	cd 01       	movw	r24, r26
    6324:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6328:	dc 01       	movw	r26, r24
    632a:	cb 01       	movw	r24, r22
    632c:	9e 83       	std	Y+6, r25	; 0x06
    632e:	8d 83       	std	Y+5, r24	; 0x05
    6330:	0f c0       	rjmp	.+30     	; 0x6350 <LCD_voidSendCommand+0xee>
    6332:	88 ec       	ldi	r24, 0xC8	; 200
    6334:	90 e0       	ldi	r25, 0x00	; 0
    6336:	9c 83       	std	Y+4, r25	; 0x04
    6338:	8b 83       	std	Y+3, r24	; 0x03
    633a:	8b 81       	ldd	r24, Y+3	; 0x03
    633c:	9c 81       	ldd	r25, Y+4	; 0x04
    633e:	01 97       	sbiw	r24, 0x01	; 1
    6340:	f1 f7       	brne	.-4      	; 0x633e <LCD_voidSendCommand+0xdc>
    6342:	9c 83       	std	Y+4, r25	; 0x04
    6344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6346:	8d 81       	ldd	r24, Y+5	; 0x05
    6348:	9e 81       	ldd	r25, Y+6	; 0x06
    634a:	01 97       	sbiw	r24, 0x01	; 1
    634c:	9e 83       	std	Y+6, r25	; 0x06
    634e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6350:	8d 81       	ldd	r24, Y+5	; 0x05
    6352:	9e 81       	ldd	r25, Y+6	; 0x06
    6354:	00 97       	sbiw	r24, 0x00	; 0
    6356:	69 f7       	brne	.-38     	; 0x6332 <LCD_voidSendCommand+0xd0>
    6358:	14 c0       	rjmp	.+40     	; 0x6382 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    635a:	6f 81       	ldd	r22, Y+7	; 0x07
    635c:	78 85       	ldd	r23, Y+8	; 0x08
    635e:	89 85       	ldd	r24, Y+9	; 0x09
    6360:	9a 85       	ldd	r25, Y+10	; 0x0a
    6362:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6366:	dc 01       	movw	r26, r24
    6368:	cb 01       	movw	r24, r22
    636a:	9e 83       	std	Y+6, r25	; 0x06
    636c:	8d 83       	std	Y+5, r24	; 0x05
    636e:	8d 81       	ldd	r24, Y+5	; 0x05
    6370:	9e 81       	ldd	r25, Y+6	; 0x06
    6372:	9a 83       	std	Y+2, r25	; 0x02
    6374:	89 83       	std	Y+1, r24	; 0x01
    6376:	89 81       	ldd	r24, Y+1	; 0x01
    6378:	9a 81       	ldd	r25, Y+2	; 0x02
    637a:	01 97       	sbiw	r24, 0x01	; 1
    637c:	f1 f7       	brne	.-4      	; 0x637a <LCD_voidSendCommand+0x118>
    637e:	9a 83       	std	Y+2, r25	; 0x02
    6380:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_LOW);
    6382:	82 e0       	ldi	r24, 0x02	; 2
    6384:	62 e0       	ldi	r22, 0x02	; 2
    6386:	40 e0       	ldi	r20, 0x00	; 0
    6388:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
}
    638c:	2f 96       	adiw	r28, 0x0f	; 15
    638e:	0f b6       	in	r0, 0x3f	; 63
    6390:	f8 94       	cli
    6392:	de bf       	out	0x3e, r29	; 62
    6394:	0f be       	out	0x3f, r0	; 63
    6396:	cd bf       	out	0x3d, r28	; 61
    6398:	cf 91       	pop	r28
    639a:	df 91       	pop	r29
    639c:	08 95       	ret

0000639e <LCD_voidSendData>:

void LCD_voidSendData(u8 A_u8Data)
{
    639e:	df 93       	push	r29
    63a0:	cf 93       	push	r28
    63a2:	cd b7       	in	r28, 0x3d	; 61
    63a4:	de b7       	in	r29, 0x3e	; 62
    63a6:	2f 97       	sbiw	r28, 0x0f	; 15
    63a8:	0f b6       	in	r0, 0x3f	; 63
    63aa:	f8 94       	cli
    63ac:	de bf       	out	0x3e, r29	; 62
    63ae:	0f be       	out	0x3f, r0	; 63
    63b0:	cd bf       	out	0x3d, r28	; 61
    63b2:	8f 87       	std	Y+15, r24	; 0x0f
    // RS=1 RW=0
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, PIN_HIGH);
    63b4:	82 e0       	ldi	r24, 0x02	; 2
    63b6:	60 e0       	ldi	r22, 0x00	; 0
    63b8:	41 e0       	ldi	r20, 0x01	; 1
    63ba:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW_PIN, PIN_LOW);
    63be:	82 e0       	ldi	r24, 0x02	; 2
    63c0:	61 e0       	ldi	r22, 0x01	; 1
    63c2:	40 e0       	ldi	r20, 0x00	; 0
    63c4:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>

    DIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    63c8:	83 e0       	ldi	r24, 0x03	; 3
    63ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    63cc:	0e 94 4c 23 	call	0x4698	; 0x4698 <DIO_voidSetPortValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_HIGH);
    63d0:	82 e0       	ldi	r24, 0x02	; 2
    63d2:	62 e0       	ldi	r22, 0x02	; 2
    63d4:	41 e0       	ldi	r20, 0x01	; 1
    63d6:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    63da:	80 e0       	ldi	r24, 0x00	; 0
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	a0 e0       	ldi	r26, 0x00	; 0
    63e0:	b0 e4       	ldi	r27, 0x40	; 64
    63e2:	8b 87       	std	Y+11, r24	; 0x0b
    63e4:	9c 87       	std	Y+12, r25	; 0x0c
    63e6:	ad 87       	std	Y+13, r26	; 0x0d
    63e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    63ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    63ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    63f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    63f2:	20 e0       	ldi	r18, 0x00	; 0
    63f4:	30 e0       	ldi	r19, 0x00	; 0
    63f6:	4a ef       	ldi	r20, 0xFA	; 250
    63f8:	54 e4       	ldi	r21, 0x44	; 68
    63fa:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    63fe:	dc 01       	movw	r26, r24
    6400:	cb 01       	movw	r24, r22
    6402:	8f 83       	std	Y+7, r24	; 0x07
    6404:	98 87       	std	Y+8, r25	; 0x08
    6406:	a9 87       	std	Y+9, r26	; 0x09
    6408:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    640a:	6f 81       	ldd	r22, Y+7	; 0x07
    640c:	78 85       	ldd	r23, Y+8	; 0x08
    640e:	89 85       	ldd	r24, Y+9	; 0x09
    6410:	9a 85       	ldd	r25, Y+10	; 0x0a
    6412:	20 e0       	ldi	r18, 0x00	; 0
    6414:	30 e0       	ldi	r19, 0x00	; 0
    6416:	40 e8       	ldi	r20, 0x80	; 128
    6418:	5f e3       	ldi	r21, 0x3F	; 63
    641a:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    641e:	88 23       	and	r24, r24
    6420:	2c f4       	brge	.+10     	; 0x642c <LCD_voidSendData+0x8e>
		__ticks = 1;
    6422:	81 e0       	ldi	r24, 0x01	; 1
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	9e 83       	std	Y+6, r25	; 0x06
    6428:	8d 83       	std	Y+5, r24	; 0x05
    642a:	3f c0       	rjmp	.+126    	; 0x64aa <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    642c:	6f 81       	ldd	r22, Y+7	; 0x07
    642e:	78 85       	ldd	r23, Y+8	; 0x08
    6430:	89 85       	ldd	r24, Y+9	; 0x09
    6432:	9a 85       	ldd	r25, Y+10	; 0x0a
    6434:	20 e0       	ldi	r18, 0x00	; 0
    6436:	3f ef       	ldi	r19, 0xFF	; 255
    6438:	4f e7       	ldi	r20, 0x7F	; 127
    643a:	57 e4       	ldi	r21, 0x47	; 71
    643c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6440:	18 16       	cp	r1, r24
    6442:	4c f5       	brge	.+82     	; 0x6496 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6444:	6b 85       	ldd	r22, Y+11	; 0x0b
    6446:	7c 85       	ldd	r23, Y+12	; 0x0c
    6448:	8d 85       	ldd	r24, Y+13	; 0x0d
    644a:	9e 85       	ldd	r25, Y+14	; 0x0e
    644c:	20 e0       	ldi	r18, 0x00	; 0
    644e:	30 e0       	ldi	r19, 0x00	; 0
    6450:	40 e2       	ldi	r20, 0x20	; 32
    6452:	51 e4       	ldi	r21, 0x41	; 65
    6454:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6458:	dc 01       	movw	r26, r24
    645a:	cb 01       	movw	r24, r22
    645c:	bc 01       	movw	r22, r24
    645e:	cd 01       	movw	r24, r26
    6460:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6464:	dc 01       	movw	r26, r24
    6466:	cb 01       	movw	r24, r22
    6468:	9e 83       	std	Y+6, r25	; 0x06
    646a:	8d 83       	std	Y+5, r24	; 0x05
    646c:	0f c0       	rjmp	.+30     	; 0x648c <LCD_voidSendData+0xee>
    646e:	88 ec       	ldi	r24, 0xC8	; 200
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	9c 83       	std	Y+4, r25	; 0x04
    6474:	8b 83       	std	Y+3, r24	; 0x03
    6476:	8b 81       	ldd	r24, Y+3	; 0x03
    6478:	9c 81       	ldd	r25, Y+4	; 0x04
    647a:	01 97       	sbiw	r24, 0x01	; 1
    647c:	f1 f7       	brne	.-4      	; 0x647a <LCD_voidSendData+0xdc>
    647e:	9c 83       	std	Y+4, r25	; 0x04
    6480:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6482:	8d 81       	ldd	r24, Y+5	; 0x05
    6484:	9e 81       	ldd	r25, Y+6	; 0x06
    6486:	01 97       	sbiw	r24, 0x01	; 1
    6488:	9e 83       	std	Y+6, r25	; 0x06
    648a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    648c:	8d 81       	ldd	r24, Y+5	; 0x05
    648e:	9e 81       	ldd	r25, Y+6	; 0x06
    6490:	00 97       	sbiw	r24, 0x00	; 0
    6492:	69 f7       	brne	.-38     	; 0x646e <LCD_voidSendData+0xd0>
    6494:	14 c0       	rjmp	.+40     	; 0x64be <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6496:	6f 81       	ldd	r22, Y+7	; 0x07
    6498:	78 85       	ldd	r23, Y+8	; 0x08
    649a:	89 85       	ldd	r24, Y+9	; 0x09
    649c:	9a 85       	ldd	r25, Y+10	; 0x0a
    649e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    64a2:	dc 01       	movw	r26, r24
    64a4:	cb 01       	movw	r24, r22
    64a6:	9e 83       	std	Y+6, r25	; 0x06
    64a8:	8d 83       	std	Y+5, r24	; 0x05
    64aa:	8d 81       	ldd	r24, Y+5	; 0x05
    64ac:	9e 81       	ldd	r25, Y+6	; 0x06
    64ae:	9a 83       	std	Y+2, r25	; 0x02
    64b0:	89 83       	std	Y+1, r24	; 0x01
    64b2:	89 81       	ldd	r24, Y+1	; 0x01
    64b4:	9a 81       	ldd	r25, Y+2	; 0x02
    64b6:	01 97       	sbiw	r24, 0x01	; 1
    64b8:	f1 f7       	brne	.-4      	; 0x64b6 <LCD_voidSendData+0x118>
    64ba:	9a 83       	std	Y+2, r25	; 0x02
    64bc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_LOW);
    64be:	82 e0       	ldi	r24, 0x02	; 2
    64c0:	62 e0       	ldi	r22, 0x02	; 2
    64c2:	40 e0       	ldi	r20, 0x00	; 0
    64c4:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
}
    64c8:	2f 96       	adiw	r28, 0x0f	; 15
    64ca:	0f b6       	in	r0, 0x3f	; 63
    64cc:	f8 94       	cli
    64ce:	de bf       	out	0x3e, r29	; 62
    64d0:	0f be       	out	0x3f, r0	; 63
    64d2:	cd bf       	out	0x3d, r28	; 61
    64d4:	cf 91       	pop	r28
    64d6:	df 91       	pop	r29
    64d8:	08 95       	ret

000064da <LCD_voidInit>:

void LCD_voidInit()
{
    64da:	df 93       	push	r29
    64dc:	cf 93       	push	r28
    64de:	cd b7       	in	r28, 0x3d	; 61
    64e0:	de b7       	in	r29, 0x3e	; 62
    64e2:	e8 97       	sbiw	r28, 0x38	; 56
    64e4:	0f b6       	in	r0, 0x3f	; 63
    64e6:	f8 94       	cli
    64e8:	de bf       	out	0x3e, r29	; 62
    64ea:	0f be       	out	0x3f, r0	; 63
    64ec:	cd bf       	out	0x3d, r28	; 61
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	a0 ef       	ldi	r26, 0xF0	; 240
    64f4:	b1 e4       	ldi	r27, 0x41	; 65
    64f6:	8d ab       	std	Y+53, r24	; 0x35
    64f8:	9e ab       	std	Y+54, r25	; 0x36
    64fa:	af ab       	std	Y+55, r26	; 0x37
    64fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64fe:	6d a9       	ldd	r22, Y+53	; 0x35
    6500:	7e a9       	ldd	r23, Y+54	; 0x36
    6502:	8f a9       	ldd	r24, Y+55	; 0x37
    6504:	98 ad       	ldd	r25, Y+56	; 0x38
    6506:	20 e0       	ldi	r18, 0x00	; 0
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	4a ef       	ldi	r20, 0xFA	; 250
    650c:	54 e4       	ldi	r21, 0x44	; 68
    650e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6512:	dc 01       	movw	r26, r24
    6514:	cb 01       	movw	r24, r22
    6516:	89 ab       	std	Y+49, r24	; 0x31
    6518:	9a ab       	std	Y+50, r25	; 0x32
    651a:	ab ab       	std	Y+51, r26	; 0x33
    651c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    651e:	69 a9       	ldd	r22, Y+49	; 0x31
    6520:	7a a9       	ldd	r23, Y+50	; 0x32
    6522:	8b a9       	ldd	r24, Y+51	; 0x33
    6524:	9c a9       	ldd	r25, Y+52	; 0x34
    6526:	20 e0       	ldi	r18, 0x00	; 0
    6528:	30 e0       	ldi	r19, 0x00	; 0
    652a:	40 e8       	ldi	r20, 0x80	; 128
    652c:	5f e3       	ldi	r21, 0x3F	; 63
    652e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6532:	88 23       	and	r24, r24
    6534:	2c f4       	brge	.+10     	; 0x6540 <LCD_voidInit+0x66>
		__ticks = 1;
    6536:	81 e0       	ldi	r24, 0x01	; 1
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	98 ab       	std	Y+48, r25	; 0x30
    653c:	8f a7       	std	Y+47, r24	; 0x2f
    653e:	3f c0       	rjmp	.+126    	; 0x65be <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    6540:	69 a9       	ldd	r22, Y+49	; 0x31
    6542:	7a a9       	ldd	r23, Y+50	; 0x32
    6544:	8b a9       	ldd	r24, Y+51	; 0x33
    6546:	9c a9       	ldd	r25, Y+52	; 0x34
    6548:	20 e0       	ldi	r18, 0x00	; 0
    654a:	3f ef       	ldi	r19, 0xFF	; 255
    654c:	4f e7       	ldi	r20, 0x7F	; 127
    654e:	57 e4       	ldi	r21, 0x47	; 71
    6550:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6554:	18 16       	cp	r1, r24
    6556:	4c f5       	brge	.+82     	; 0x65aa <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6558:	6d a9       	ldd	r22, Y+53	; 0x35
    655a:	7e a9       	ldd	r23, Y+54	; 0x36
    655c:	8f a9       	ldd	r24, Y+55	; 0x37
    655e:	98 ad       	ldd	r25, Y+56	; 0x38
    6560:	20 e0       	ldi	r18, 0x00	; 0
    6562:	30 e0       	ldi	r19, 0x00	; 0
    6564:	40 e2       	ldi	r20, 0x20	; 32
    6566:	51 e4       	ldi	r21, 0x41	; 65
    6568:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    656c:	dc 01       	movw	r26, r24
    656e:	cb 01       	movw	r24, r22
    6570:	bc 01       	movw	r22, r24
    6572:	cd 01       	movw	r24, r26
    6574:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6578:	dc 01       	movw	r26, r24
    657a:	cb 01       	movw	r24, r22
    657c:	98 ab       	std	Y+48, r25	; 0x30
    657e:	8f a7       	std	Y+47, r24	; 0x2f
    6580:	0f c0       	rjmp	.+30     	; 0x65a0 <LCD_voidInit+0xc6>
    6582:	88 ec       	ldi	r24, 0xC8	; 200
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	9e a7       	std	Y+46, r25	; 0x2e
    6588:	8d a7       	std	Y+45, r24	; 0x2d
    658a:	8d a5       	ldd	r24, Y+45	; 0x2d
    658c:	9e a5       	ldd	r25, Y+46	; 0x2e
    658e:	01 97       	sbiw	r24, 0x01	; 1
    6590:	f1 f7       	brne	.-4      	; 0x658e <LCD_voidInit+0xb4>
    6592:	9e a7       	std	Y+46, r25	; 0x2e
    6594:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6596:	8f a5       	ldd	r24, Y+47	; 0x2f
    6598:	98 a9       	ldd	r25, Y+48	; 0x30
    659a:	01 97       	sbiw	r24, 0x01	; 1
    659c:	98 ab       	std	Y+48, r25	; 0x30
    659e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    65a2:	98 a9       	ldd	r25, Y+48	; 0x30
    65a4:	00 97       	sbiw	r24, 0x00	; 0
    65a6:	69 f7       	brne	.-38     	; 0x6582 <LCD_voidInit+0xa8>
    65a8:	14 c0       	rjmp	.+40     	; 0x65d2 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65aa:	69 a9       	ldd	r22, Y+49	; 0x31
    65ac:	7a a9       	ldd	r23, Y+50	; 0x32
    65ae:	8b a9       	ldd	r24, Y+51	; 0x33
    65b0:	9c a9       	ldd	r25, Y+52	; 0x34
    65b2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    65b6:	dc 01       	movw	r26, r24
    65b8:	cb 01       	movw	r24, r22
    65ba:	98 ab       	std	Y+48, r25	; 0x30
    65bc:	8f a7       	std	Y+47, r24	; 0x2f
    65be:	8f a5       	ldd	r24, Y+47	; 0x2f
    65c0:	98 a9       	ldd	r25, Y+48	; 0x30
    65c2:	9c a7       	std	Y+44, r25	; 0x2c
    65c4:	8b a7       	std	Y+43, r24	; 0x2b
    65c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    65c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    65ca:	01 97       	sbiw	r24, 0x01	; 1
    65cc:	f1 f7       	brne	.-4      	; 0x65ca <LCD_voidInit+0xf0>
    65ce:	9c a7       	std	Y+44, r25	; 0x2c
    65d0:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    LCD_voidSendCommand(FUNCTION_SET);
    65d2:	88 e3       	ldi	r24, 0x38	; 56
    65d4:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    65d8:	80 e0       	ldi	r24, 0x00	; 0
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	a0 e8       	ldi	r26, 0x80	; 128
    65de:	bf e3       	ldi	r27, 0x3F	; 63
    65e0:	8f a3       	std	Y+39, r24	; 0x27
    65e2:	98 a7       	std	Y+40, r25	; 0x28
    65e4:	a9 a7       	std	Y+41, r26	; 0x29
    65e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65e8:	6f a1       	ldd	r22, Y+39	; 0x27
    65ea:	78 a5       	ldd	r23, Y+40	; 0x28
    65ec:	89 a5       	ldd	r24, Y+41	; 0x29
    65ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    65f0:	20 e0       	ldi	r18, 0x00	; 0
    65f2:	30 e0       	ldi	r19, 0x00	; 0
    65f4:	4a ef       	ldi	r20, 0xFA	; 250
    65f6:	54 e4       	ldi	r21, 0x44	; 68
    65f8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    65fc:	dc 01       	movw	r26, r24
    65fe:	cb 01       	movw	r24, r22
    6600:	8b a3       	std	Y+35, r24	; 0x23
    6602:	9c a3       	std	Y+36, r25	; 0x24
    6604:	ad a3       	std	Y+37, r26	; 0x25
    6606:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6608:	6b a1       	ldd	r22, Y+35	; 0x23
    660a:	7c a1       	ldd	r23, Y+36	; 0x24
    660c:	8d a1       	ldd	r24, Y+37	; 0x25
    660e:	9e a1       	ldd	r25, Y+38	; 0x26
    6610:	20 e0       	ldi	r18, 0x00	; 0
    6612:	30 e0       	ldi	r19, 0x00	; 0
    6614:	40 e8       	ldi	r20, 0x80	; 128
    6616:	5f e3       	ldi	r21, 0x3F	; 63
    6618:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    661c:	88 23       	and	r24, r24
    661e:	2c f4       	brge	.+10     	; 0x662a <LCD_voidInit+0x150>
		__ticks = 1;
    6620:	81 e0       	ldi	r24, 0x01	; 1
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	9a a3       	std	Y+34, r25	; 0x22
    6626:	89 a3       	std	Y+33, r24	; 0x21
    6628:	3f c0       	rjmp	.+126    	; 0x66a8 <LCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    662a:	6b a1       	ldd	r22, Y+35	; 0x23
    662c:	7c a1       	ldd	r23, Y+36	; 0x24
    662e:	8d a1       	ldd	r24, Y+37	; 0x25
    6630:	9e a1       	ldd	r25, Y+38	; 0x26
    6632:	20 e0       	ldi	r18, 0x00	; 0
    6634:	3f ef       	ldi	r19, 0xFF	; 255
    6636:	4f e7       	ldi	r20, 0x7F	; 127
    6638:	57 e4       	ldi	r21, 0x47	; 71
    663a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    663e:	18 16       	cp	r1, r24
    6640:	4c f5       	brge	.+82     	; 0x6694 <LCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6642:	6f a1       	ldd	r22, Y+39	; 0x27
    6644:	78 a5       	ldd	r23, Y+40	; 0x28
    6646:	89 a5       	ldd	r24, Y+41	; 0x29
    6648:	9a a5       	ldd	r25, Y+42	; 0x2a
    664a:	20 e0       	ldi	r18, 0x00	; 0
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	40 e2       	ldi	r20, 0x20	; 32
    6650:	51 e4       	ldi	r21, 0x41	; 65
    6652:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6656:	dc 01       	movw	r26, r24
    6658:	cb 01       	movw	r24, r22
    665a:	bc 01       	movw	r22, r24
    665c:	cd 01       	movw	r24, r26
    665e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	9a a3       	std	Y+34, r25	; 0x22
    6668:	89 a3       	std	Y+33, r24	; 0x21
    666a:	0f c0       	rjmp	.+30     	; 0x668a <LCD_voidInit+0x1b0>
    666c:	88 ec       	ldi	r24, 0xC8	; 200
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	98 a3       	std	Y+32, r25	; 0x20
    6672:	8f 8f       	std	Y+31, r24	; 0x1f
    6674:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6676:	98 a1       	ldd	r25, Y+32	; 0x20
    6678:	01 97       	sbiw	r24, 0x01	; 1
    667a:	f1 f7       	brne	.-4      	; 0x6678 <LCD_voidInit+0x19e>
    667c:	98 a3       	std	Y+32, r25	; 0x20
    667e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6680:	89 a1       	ldd	r24, Y+33	; 0x21
    6682:	9a a1       	ldd	r25, Y+34	; 0x22
    6684:	01 97       	sbiw	r24, 0x01	; 1
    6686:	9a a3       	std	Y+34, r25	; 0x22
    6688:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    668a:	89 a1       	ldd	r24, Y+33	; 0x21
    668c:	9a a1       	ldd	r25, Y+34	; 0x22
    668e:	00 97       	sbiw	r24, 0x00	; 0
    6690:	69 f7       	brne	.-38     	; 0x666c <LCD_voidInit+0x192>
    6692:	14 c0       	rjmp	.+40     	; 0x66bc <LCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6694:	6b a1       	ldd	r22, Y+35	; 0x23
    6696:	7c a1       	ldd	r23, Y+36	; 0x24
    6698:	8d a1       	ldd	r24, Y+37	; 0x25
    669a:	9e a1       	ldd	r25, Y+38	; 0x26
    669c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    66a0:	dc 01       	movw	r26, r24
    66a2:	cb 01       	movw	r24, r22
    66a4:	9a a3       	std	Y+34, r25	; 0x22
    66a6:	89 a3       	std	Y+33, r24	; 0x21
    66a8:	89 a1       	ldd	r24, Y+33	; 0x21
    66aa:	9a a1       	ldd	r25, Y+34	; 0x22
    66ac:	9e 8f       	std	Y+30, r25	; 0x1e
    66ae:	8d 8f       	std	Y+29, r24	; 0x1d
    66b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66b4:	01 97       	sbiw	r24, 0x01	; 1
    66b6:	f1 f7       	brne	.-4      	; 0x66b4 <LCD_voidInit+0x1da>
    66b8:	9e 8f       	std	Y+30, r25	; 0x1e
    66ba:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    LCD_voidSendCommand(ON_OFF_CONTROL);
    66bc:	8c e0       	ldi	r24, 0x0C	; 12
    66be:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	a0 e8       	ldi	r26, 0x80	; 128
    66c8:	bf e3       	ldi	r27, 0x3F	; 63
    66ca:	89 8f       	std	Y+25, r24	; 0x19
    66cc:	9a 8f       	std	Y+26, r25	; 0x1a
    66ce:	ab 8f       	std	Y+27, r26	; 0x1b
    66d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66d2:	69 8d       	ldd	r22, Y+25	; 0x19
    66d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66da:	20 e0       	ldi	r18, 0x00	; 0
    66dc:	30 e0       	ldi	r19, 0x00	; 0
    66de:	4a ef       	ldi	r20, 0xFA	; 250
    66e0:	54 e4       	ldi	r21, 0x44	; 68
    66e2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    66e6:	dc 01       	movw	r26, r24
    66e8:	cb 01       	movw	r24, r22
    66ea:	8d 8b       	std	Y+21, r24	; 0x15
    66ec:	9e 8b       	std	Y+22, r25	; 0x16
    66ee:	af 8b       	std	Y+23, r26	; 0x17
    66f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    66f2:	6d 89       	ldd	r22, Y+21	; 0x15
    66f4:	7e 89       	ldd	r23, Y+22	; 0x16
    66f6:	8f 89       	ldd	r24, Y+23	; 0x17
    66f8:	98 8d       	ldd	r25, Y+24	; 0x18
    66fa:	20 e0       	ldi	r18, 0x00	; 0
    66fc:	30 e0       	ldi	r19, 0x00	; 0
    66fe:	40 e8       	ldi	r20, 0x80	; 128
    6700:	5f e3       	ldi	r21, 0x3F	; 63
    6702:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6706:	88 23       	and	r24, r24
    6708:	2c f4       	brge	.+10     	; 0x6714 <LCD_voidInit+0x23a>
		__ticks = 1;
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	9c 8b       	std	Y+20, r25	; 0x14
    6710:	8b 8b       	std	Y+19, r24	; 0x13
    6712:	3f c0       	rjmp	.+126    	; 0x6792 <LCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    6714:	6d 89       	ldd	r22, Y+21	; 0x15
    6716:	7e 89       	ldd	r23, Y+22	; 0x16
    6718:	8f 89       	ldd	r24, Y+23	; 0x17
    671a:	98 8d       	ldd	r25, Y+24	; 0x18
    671c:	20 e0       	ldi	r18, 0x00	; 0
    671e:	3f ef       	ldi	r19, 0xFF	; 255
    6720:	4f e7       	ldi	r20, 0x7F	; 127
    6722:	57 e4       	ldi	r21, 0x47	; 71
    6724:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6728:	18 16       	cp	r1, r24
    672a:	4c f5       	brge	.+82     	; 0x677e <LCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    672c:	69 8d       	ldd	r22, Y+25	; 0x19
    672e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6732:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6734:	20 e0       	ldi	r18, 0x00	; 0
    6736:	30 e0       	ldi	r19, 0x00	; 0
    6738:	40 e2       	ldi	r20, 0x20	; 32
    673a:	51 e4       	ldi	r21, 0x41	; 65
    673c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6740:	dc 01       	movw	r26, r24
    6742:	cb 01       	movw	r24, r22
    6744:	bc 01       	movw	r22, r24
    6746:	cd 01       	movw	r24, r26
    6748:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    674c:	dc 01       	movw	r26, r24
    674e:	cb 01       	movw	r24, r22
    6750:	9c 8b       	std	Y+20, r25	; 0x14
    6752:	8b 8b       	std	Y+19, r24	; 0x13
    6754:	0f c0       	rjmp	.+30     	; 0x6774 <LCD_voidInit+0x29a>
    6756:	88 ec       	ldi	r24, 0xC8	; 200
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	9a 8b       	std	Y+18, r25	; 0x12
    675c:	89 8b       	std	Y+17, r24	; 0x11
    675e:	89 89       	ldd	r24, Y+17	; 0x11
    6760:	9a 89       	ldd	r25, Y+18	; 0x12
    6762:	01 97       	sbiw	r24, 0x01	; 1
    6764:	f1 f7       	brne	.-4      	; 0x6762 <LCD_voidInit+0x288>
    6766:	9a 8b       	std	Y+18, r25	; 0x12
    6768:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    676a:	8b 89       	ldd	r24, Y+19	; 0x13
    676c:	9c 89       	ldd	r25, Y+20	; 0x14
    676e:	01 97       	sbiw	r24, 0x01	; 1
    6770:	9c 8b       	std	Y+20, r25	; 0x14
    6772:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6774:	8b 89       	ldd	r24, Y+19	; 0x13
    6776:	9c 89       	ldd	r25, Y+20	; 0x14
    6778:	00 97       	sbiw	r24, 0x00	; 0
    677a:	69 f7       	brne	.-38     	; 0x6756 <LCD_voidInit+0x27c>
    677c:	14 c0       	rjmp	.+40     	; 0x67a6 <LCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    677e:	6d 89       	ldd	r22, Y+21	; 0x15
    6780:	7e 89       	ldd	r23, Y+22	; 0x16
    6782:	8f 89       	ldd	r24, Y+23	; 0x17
    6784:	98 8d       	ldd	r25, Y+24	; 0x18
    6786:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    678a:	dc 01       	movw	r26, r24
    678c:	cb 01       	movw	r24, r22
    678e:	9c 8b       	std	Y+20, r25	; 0x14
    6790:	8b 8b       	std	Y+19, r24	; 0x13
    6792:	8b 89       	ldd	r24, Y+19	; 0x13
    6794:	9c 89       	ldd	r25, Y+20	; 0x14
    6796:	98 8b       	std	Y+16, r25	; 0x10
    6798:	8f 87       	std	Y+15, r24	; 0x0f
    679a:	8f 85       	ldd	r24, Y+15	; 0x0f
    679c:	98 89       	ldd	r25, Y+16	; 0x10
    679e:	01 97       	sbiw	r24, 0x01	; 1
    67a0:	f1 f7       	brne	.-4      	; 0x679e <LCD_voidInit+0x2c4>
    67a2:	98 8b       	std	Y+16, r25	; 0x10
    67a4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    LCD_voidSendCommand(DISPLAY_CLEAR);
    67a6:	81 e0       	ldi	r24, 0x01	; 1
    67a8:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    67ac:	80 e0       	ldi	r24, 0x00	; 0
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	a0 e0       	ldi	r26, 0x00	; 0
    67b2:	b0 e4       	ldi	r27, 0x40	; 64
    67b4:	8b 87       	std	Y+11, r24	; 0x0b
    67b6:	9c 87       	std	Y+12, r25	; 0x0c
    67b8:	ad 87       	std	Y+13, r26	; 0x0d
    67ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    67be:	7c 85       	ldd	r23, Y+12	; 0x0c
    67c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    67c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    67c4:	20 e0       	ldi	r18, 0x00	; 0
    67c6:	30 e0       	ldi	r19, 0x00	; 0
    67c8:	4a ef       	ldi	r20, 0xFA	; 250
    67ca:	54 e4       	ldi	r21, 0x44	; 68
    67cc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    67d0:	dc 01       	movw	r26, r24
    67d2:	cb 01       	movw	r24, r22
    67d4:	8f 83       	std	Y+7, r24	; 0x07
    67d6:	98 87       	std	Y+8, r25	; 0x08
    67d8:	a9 87       	std	Y+9, r26	; 0x09
    67da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67dc:	6f 81       	ldd	r22, Y+7	; 0x07
    67de:	78 85       	ldd	r23, Y+8	; 0x08
    67e0:	89 85       	ldd	r24, Y+9	; 0x09
    67e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    67e4:	20 e0       	ldi	r18, 0x00	; 0
    67e6:	30 e0       	ldi	r19, 0x00	; 0
    67e8:	40 e8       	ldi	r20, 0x80	; 128
    67ea:	5f e3       	ldi	r21, 0x3F	; 63
    67ec:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    67f0:	88 23       	and	r24, r24
    67f2:	2c f4       	brge	.+10     	; 0x67fe <LCD_voidInit+0x324>
		__ticks = 1;
    67f4:	81 e0       	ldi	r24, 0x01	; 1
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	9e 83       	std	Y+6, r25	; 0x06
    67fa:	8d 83       	std	Y+5, r24	; 0x05
    67fc:	3f c0       	rjmp	.+126    	; 0x687c <LCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    67fe:	6f 81       	ldd	r22, Y+7	; 0x07
    6800:	78 85       	ldd	r23, Y+8	; 0x08
    6802:	89 85       	ldd	r24, Y+9	; 0x09
    6804:	9a 85       	ldd	r25, Y+10	; 0x0a
    6806:	20 e0       	ldi	r18, 0x00	; 0
    6808:	3f ef       	ldi	r19, 0xFF	; 255
    680a:	4f e7       	ldi	r20, 0x7F	; 127
    680c:	57 e4       	ldi	r21, 0x47	; 71
    680e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6812:	18 16       	cp	r1, r24
    6814:	4c f5       	brge	.+82     	; 0x6868 <LCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6816:	6b 85       	ldd	r22, Y+11	; 0x0b
    6818:	7c 85       	ldd	r23, Y+12	; 0x0c
    681a:	8d 85       	ldd	r24, Y+13	; 0x0d
    681c:	9e 85       	ldd	r25, Y+14	; 0x0e
    681e:	20 e0       	ldi	r18, 0x00	; 0
    6820:	30 e0       	ldi	r19, 0x00	; 0
    6822:	40 e2       	ldi	r20, 0x20	; 32
    6824:	51 e4       	ldi	r21, 0x41	; 65
    6826:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    682a:	dc 01       	movw	r26, r24
    682c:	cb 01       	movw	r24, r22
    682e:	bc 01       	movw	r22, r24
    6830:	cd 01       	movw	r24, r26
    6832:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6836:	dc 01       	movw	r26, r24
    6838:	cb 01       	movw	r24, r22
    683a:	9e 83       	std	Y+6, r25	; 0x06
    683c:	8d 83       	std	Y+5, r24	; 0x05
    683e:	0f c0       	rjmp	.+30     	; 0x685e <LCD_voidInit+0x384>
    6840:	88 ec       	ldi	r24, 0xC8	; 200
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	9c 83       	std	Y+4, r25	; 0x04
    6846:	8b 83       	std	Y+3, r24	; 0x03
    6848:	8b 81       	ldd	r24, Y+3	; 0x03
    684a:	9c 81       	ldd	r25, Y+4	; 0x04
    684c:	01 97       	sbiw	r24, 0x01	; 1
    684e:	f1 f7       	brne	.-4      	; 0x684c <LCD_voidInit+0x372>
    6850:	9c 83       	std	Y+4, r25	; 0x04
    6852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6854:	8d 81       	ldd	r24, Y+5	; 0x05
    6856:	9e 81       	ldd	r25, Y+6	; 0x06
    6858:	01 97       	sbiw	r24, 0x01	; 1
    685a:	9e 83       	std	Y+6, r25	; 0x06
    685c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    685e:	8d 81       	ldd	r24, Y+5	; 0x05
    6860:	9e 81       	ldd	r25, Y+6	; 0x06
    6862:	00 97       	sbiw	r24, 0x00	; 0
    6864:	69 f7       	brne	.-38     	; 0x6840 <LCD_voidInit+0x366>
    6866:	14 c0       	rjmp	.+40     	; 0x6890 <LCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6868:	6f 81       	ldd	r22, Y+7	; 0x07
    686a:	78 85       	ldd	r23, Y+8	; 0x08
    686c:	89 85       	ldd	r24, Y+9	; 0x09
    686e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6870:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6874:	dc 01       	movw	r26, r24
    6876:	cb 01       	movw	r24, r22
    6878:	9e 83       	std	Y+6, r25	; 0x06
    687a:	8d 83       	std	Y+5, r24	; 0x05
    687c:	8d 81       	ldd	r24, Y+5	; 0x05
    687e:	9e 81       	ldd	r25, Y+6	; 0x06
    6880:	9a 83       	std	Y+2, r25	; 0x02
    6882:	89 83       	std	Y+1, r24	; 0x01
    6884:	89 81       	ldd	r24, Y+1	; 0x01
    6886:	9a 81       	ldd	r25, Y+2	; 0x02
    6888:	01 97       	sbiw	r24, 0x01	; 1
    688a:	f1 f7       	brne	.-4      	; 0x6888 <LCD_voidInit+0x3ae>
    688c:	9a 83       	std	Y+2, r25	; 0x02
    688e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_voidSendCommand(ENTRY_MODE_SET);
    6890:	86 e0       	ldi	r24, 0x06	; 6
    6892:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
}
    6896:	e8 96       	adiw	r28, 0x38	; 56
    6898:	0f b6       	in	r0, 0x3f	; 63
    689a:	f8 94       	cli
    689c:	de bf       	out	0x3e, r29	; 62
    689e:	0f be       	out	0x3f, r0	; 63
    68a0:	cd bf       	out	0x3d, r28	; 61
    68a2:	cf 91       	pop	r28
    68a4:	df 91       	pop	r29
    68a6:	08 95       	ret

000068a8 <LCD_voidClearDisplay>:
}
#endif

/******************the following functinos is valid for both 8bit & 4bit mode******************/
void LCD_voidClearDisplay(void)
{
    68a8:	df 93       	push	r29
    68aa:	cf 93       	push	r28
    68ac:	cd b7       	in	r28, 0x3d	; 61
    68ae:	de b7       	in	r29, 0x3e	; 62
    68b0:	2e 97       	sbiw	r28, 0x0e	; 14
    68b2:	0f b6       	in	r0, 0x3f	; 63
    68b4:	f8 94       	cli
    68b6:	de bf       	out	0x3e, r29	; 62
    68b8:	0f be       	out	0x3f, r0	; 63
    68ba:	cd bf       	out	0x3d, r28	; 61
    LCD_voidSendCommand(DISPLAY_CLEAR);
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	a0 e0       	ldi	r26, 0x00	; 0
    68c8:	b0 e4       	ldi	r27, 0x40	; 64
    68ca:	8b 87       	std	Y+11, r24	; 0x0b
    68cc:	9c 87       	std	Y+12, r25	; 0x0c
    68ce:	ad 87       	std	Y+13, r26	; 0x0d
    68d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    68d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    68d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    68d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    68da:	20 e0       	ldi	r18, 0x00	; 0
    68dc:	30 e0       	ldi	r19, 0x00	; 0
    68de:	4a ef       	ldi	r20, 0xFA	; 250
    68e0:	54 e4       	ldi	r21, 0x44	; 68
    68e2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    68e6:	dc 01       	movw	r26, r24
    68e8:	cb 01       	movw	r24, r22
    68ea:	8f 83       	std	Y+7, r24	; 0x07
    68ec:	98 87       	std	Y+8, r25	; 0x08
    68ee:	a9 87       	std	Y+9, r26	; 0x09
    68f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    68f2:	6f 81       	ldd	r22, Y+7	; 0x07
    68f4:	78 85       	ldd	r23, Y+8	; 0x08
    68f6:	89 85       	ldd	r24, Y+9	; 0x09
    68f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    68fa:	20 e0       	ldi	r18, 0x00	; 0
    68fc:	30 e0       	ldi	r19, 0x00	; 0
    68fe:	40 e8       	ldi	r20, 0x80	; 128
    6900:	5f e3       	ldi	r21, 0x3F	; 63
    6902:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6906:	88 23       	and	r24, r24
    6908:	2c f4       	brge	.+10     	; 0x6914 <LCD_voidClearDisplay+0x6c>
		__ticks = 1;
    690a:	81 e0       	ldi	r24, 0x01	; 1
    690c:	90 e0       	ldi	r25, 0x00	; 0
    690e:	9e 83       	std	Y+6, r25	; 0x06
    6910:	8d 83       	std	Y+5, r24	; 0x05
    6912:	3f c0       	rjmp	.+126    	; 0x6992 <LCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    6914:	6f 81       	ldd	r22, Y+7	; 0x07
    6916:	78 85       	ldd	r23, Y+8	; 0x08
    6918:	89 85       	ldd	r24, Y+9	; 0x09
    691a:	9a 85       	ldd	r25, Y+10	; 0x0a
    691c:	20 e0       	ldi	r18, 0x00	; 0
    691e:	3f ef       	ldi	r19, 0xFF	; 255
    6920:	4f e7       	ldi	r20, 0x7F	; 127
    6922:	57 e4       	ldi	r21, 0x47	; 71
    6924:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6928:	18 16       	cp	r1, r24
    692a:	4c f5       	brge	.+82     	; 0x697e <LCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    692c:	6b 85       	ldd	r22, Y+11	; 0x0b
    692e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6930:	8d 85       	ldd	r24, Y+13	; 0x0d
    6932:	9e 85       	ldd	r25, Y+14	; 0x0e
    6934:	20 e0       	ldi	r18, 0x00	; 0
    6936:	30 e0       	ldi	r19, 0x00	; 0
    6938:	40 e2       	ldi	r20, 0x20	; 32
    693a:	51 e4       	ldi	r21, 0x41	; 65
    693c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6940:	dc 01       	movw	r26, r24
    6942:	cb 01       	movw	r24, r22
    6944:	bc 01       	movw	r22, r24
    6946:	cd 01       	movw	r24, r26
    6948:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    694c:	dc 01       	movw	r26, r24
    694e:	cb 01       	movw	r24, r22
    6950:	9e 83       	std	Y+6, r25	; 0x06
    6952:	8d 83       	std	Y+5, r24	; 0x05
    6954:	0f c0       	rjmp	.+30     	; 0x6974 <LCD_voidClearDisplay+0xcc>
    6956:	88 ec       	ldi	r24, 0xC8	; 200
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	9c 83       	std	Y+4, r25	; 0x04
    695c:	8b 83       	std	Y+3, r24	; 0x03
    695e:	8b 81       	ldd	r24, Y+3	; 0x03
    6960:	9c 81       	ldd	r25, Y+4	; 0x04
    6962:	01 97       	sbiw	r24, 0x01	; 1
    6964:	f1 f7       	brne	.-4      	; 0x6962 <LCD_voidClearDisplay+0xba>
    6966:	9c 83       	std	Y+4, r25	; 0x04
    6968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    696a:	8d 81       	ldd	r24, Y+5	; 0x05
    696c:	9e 81       	ldd	r25, Y+6	; 0x06
    696e:	01 97       	sbiw	r24, 0x01	; 1
    6970:	9e 83       	std	Y+6, r25	; 0x06
    6972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6974:	8d 81       	ldd	r24, Y+5	; 0x05
    6976:	9e 81       	ldd	r25, Y+6	; 0x06
    6978:	00 97       	sbiw	r24, 0x00	; 0
    697a:	69 f7       	brne	.-38     	; 0x6956 <LCD_voidClearDisplay+0xae>
    697c:	14 c0       	rjmp	.+40     	; 0x69a6 <LCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    697e:	6f 81       	ldd	r22, Y+7	; 0x07
    6980:	78 85       	ldd	r23, Y+8	; 0x08
    6982:	89 85       	ldd	r24, Y+9	; 0x09
    6984:	9a 85       	ldd	r25, Y+10	; 0x0a
    6986:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    698a:	dc 01       	movw	r26, r24
    698c:	cb 01       	movw	r24, r22
    698e:	9e 83       	std	Y+6, r25	; 0x06
    6990:	8d 83       	std	Y+5, r24	; 0x05
    6992:	8d 81       	ldd	r24, Y+5	; 0x05
    6994:	9e 81       	ldd	r25, Y+6	; 0x06
    6996:	9a 83       	std	Y+2, r25	; 0x02
    6998:	89 83       	std	Y+1, r24	; 0x01
    699a:	89 81       	ldd	r24, Y+1	; 0x01
    699c:	9a 81       	ldd	r25, Y+2	; 0x02
    699e:	01 97       	sbiw	r24, 0x01	; 1
    69a0:	f1 f7       	brne	.-4      	; 0x699e <LCD_voidClearDisplay+0xf6>
    69a2:	9a 83       	std	Y+2, r25	; 0x02
    69a4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    69a6:	2e 96       	adiw	r28, 0x0e	; 14
    69a8:	0f b6       	in	r0, 0x3f	; 63
    69aa:	f8 94       	cli
    69ac:	de bf       	out	0x3e, r29	; 62
    69ae:	0f be       	out	0x3f, r0	; 63
    69b0:	cd bf       	out	0x3d, r28	; 61
    69b2:	cf 91       	pop	r28
    69b4:	df 91       	pop	r29
    69b6:	08 95       	ret

000069b8 <LCD_voidSendString>:

void LCD_voidSendString(u8 *A_Pu8String)
{
    69b8:	df 93       	push	r29
    69ba:	cf 93       	push	r28
    69bc:	00 d0       	rcall	.+0      	; 0x69be <LCD_voidSendString+0x6>
    69be:	0f 92       	push	r0
    69c0:	cd b7       	in	r28, 0x3d	; 61
    69c2:	de b7       	in	r29, 0x3e	; 62
    69c4:	9b 83       	std	Y+3, r25	; 0x03
    69c6:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter = 0;
    69c8:	19 82       	std	Y+1, r1	; 0x01
    69ca:	0e c0       	rjmp	.+28     	; 0x69e8 <LCD_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter] != '\0')
    {
        LCD_voidSendData(A_Pu8String[local_u8Couter]);
    69cc:	89 81       	ldd	r24, Y+1	; 0x01
    69ce:	28 2f       	mov	r18, r24
    69d0:	30 e0       	ldi	r19, 0x00	; 0
    69d2:	8a 81       	ldd	r24, Y+2	; 0x02
    69d4:	9b 81       	ldd	r25, Y+3	; 0x03
    69d6:	fc 01       	movw	r30, r24
    69d8:	e2 0f       	add	r30, r18
    69da:	f3 1f       	adc	r31, r19
    69dc:	80 81       	ld	r24, Z
    69de:	0e 94 cf 31 	call	0x639e	; 0x639e <LCD_voidSendData>
        local_u8Couter++;
    69e2:	89 81       	ldd	r24, Y+1	; 0x01
    69e4:	8f 5f       	subi	r24, 0xFF	; 255
    69e6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8 *A_Pu8String)
{
    u8 local_u8Couter = 0;
    while (A_Pu8String[local_u8Couter] != '\0')
    69e8:	89 81       	ldd	r24, Y+1	; 0x01
    69ea:	28 2f       	mov	r18, r24
    69ec:	30 e0       	ldi	r19, 0x00	; 0
    69ee:	8a 81       	ldd	r24, Y+2	; 0x02
    69f0:	9b 81       	ldd	r25, Y+3	; 0x03
    69f2:	fc 01       	movw	r30, r24
    69f4:	e2 0f       	add	r30, r18
    69f6:	f3 1f       	adc	r31, r19
    69f8:	80 81       	ld	r24, Z
    69fa:	88 23       	and	r24, r24
    69fc:	39 f7       	brne	.-50     	; 0x69cc <LCD_voidSendString+0x14>
    {
        LCD_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
}
    69fe:	0f 90       	pop	r0
    6a00:	0f 90       	pop	r0
    6a02:	0f 90       	pop	r0
    6a04:	cf 91       	pop	r28
    6a06:	df 91       	pop	r29
    6a08:	08 95       	ret

00006a0a <LCD_voidGoToPos>:

void LCD_voidGoToPos(u8 A_u8RowNum, u8 A_u8ColNum)
{
    6a0a:	df 93       	push	r29
    6a0c:	cf 93       	push	r28
    6a0e:	cd b7       	in	r28, 0x3d	; 61
    6a10:	de b7       	in	r29, 0x3e	; 62
    6a12:	63 97       	sbiw	r28, 0x13	; 19
    6a14:	0f b6       	in	r0, 0x3f	; 63
    6a16:	f8 94       	cli
    6a18:	de bf       	out	0x3e, r29	; 62
    6a1a:	0f be       	out	0x3f, r0	; 63
    6a1c:	cd bf       	out	0x3d, r28	; 61
    6a1e:	88 8b       	std	Y+16, r24	; 0x10
    6a20:	69 8b       	std	Y+17, r22	; 0x11
    // }
    // _delay_ms(1);
    /************************************************************/
    // Second method
    u8 local_u8Address;
    switch (A_u8RowNum)
    6a22:	88 89       	ldd	r24, Y+16	; 0x10
    6a24:	28 2f       	mov	r18, r24
    6a26:	30 e0       	ldi	r19, 0x00	; 0
    6a28:	3b 8b       	std	Y+19, r19	; 0x13
    6a2a:	2a 8b       	std	Y+18, r18	; 0x12
    6a2c:	8a 89       	ldd	r24, Y+18	; 0x12
    6a2e:	9b 89       	ldd	r25, Y+19	; 0x13
    6a30:	81 30       	cpi	r24, 0x01	; 1
    6a32:	91 05       	cpc	r25, r1
    6a34:	31 f0       	breq	.+12     	; 0x6a42 <LCD_voidGoToPos+0x38>
    6a36:	2a 89       	ldd	r18, Y+18	; 0x12
    6a38:	3b 89       	ldd	r19, Y+19	; 0x13
    6a3a:	22 30       	cpi	r18, 0x02	; 2
    6a3c:	31 05       	cpc	r19, r1
    6a3e:	59 f0       	breq	.+22     	; 0x6a56 <LCD_voidGoToPos+0x4c>
    6a40:	13 c0       	rjmp	.+38     	; 0x6a68 <LCD_voidGoToPos+0x5e>
    {
    case LCD_ROW_ONE:
        local_u8Address = FIRST_ROW_ADDRESS + A_u8ColNum - 1;
    6a42:	89 89       	ldd	r24, Y+17	; 0x11
    6a44:	81 50       	subi	r24, 0x01	; 1
    6a46:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address, PIN7);
    6a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a4a:	80 68       	ori	r24, 0x80	; 128
    6a4c:	8f 87       	std	Y+15, r24	; 0x0f
        LCD_voidSendCommand(local_u8Address);
    6a4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a50:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    6a54:	09 c0       	rjmp	.+18     	; 0x6a68 <LCD_voidGoToPos+0x5e>
        break;

    case LCD_ROW_TWO:
        local_u8Address = SECOND_ROW_ADDRESS + A_u8ColNum;
    6a56:	89 89       	ldd	r24, Y+17	; 0x11
    6a58:	81 5c       	subi	r24, 0xC1	; 193
    6a5a:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address, PIN7);
    6a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a5e:	80 68       	ori	r24, 0x80	; 128
    6a60:	8f 87       	std	Y+15, r24	; 0x0f
        LCD_voidSendCommand(local_u8Address);
    6a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a64:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    6a68:	80 e0       	ldi	r24, 0x00	; 0
    6a6a:	90 e0       	ldi	r25, 0x00	; 0
    6a6c:	a0 e8       	ldi	r26, 0x80	; 128
    6a6e:	bf e3       	ldi	r27, 0x3F	; 63
    6a70:	8b 87       	std	Y+11, r24	; 0x0b
    6a72:	9c 87       	std	Y+12, r25	; 0x0c
    6a74:	ad 87       	std	Y+13, r26	; 0x0d
    6a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a80:	20 e0       	ldi	r18, 0x00	; 0
    6a82:	30 e0       	ldi	r19, 0x00	; 0
    6a84:	4a ef       	ldi	r20, 0xFA	; 250
    6a86:	54 e4       	ldi	r21, 0x44	; 68
    6a88:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6a8c:	dc 01       	movw	r26, r24
    6a8e:	cb 01       	movw	r24, r22
    6a90:	8f 83       	std	Y+7, r24	; 0x07
    6a92:	98 87       	std	Y+8, r25	; 0x08
    6a94:	a9 87       	std	Y+9, r26	; 0x09
    6a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a98:	6f 81       	ldd	r22, Y+7	; 0x07
    6a9a:	78 85       	ldd	r23, Y+8	; 0x08
    6a9c:	89 85       	ldd	r24, Y+9	; 0x09
    6a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6aa0:	20 e0       	ldi	r18, 0x00	; 0
    6aa2:	30 e0       	ldi	r19, 0x00	; 0
    6aa4:	40 e8       	ldi	r20, 0x80	; 128
    6aa6:	5f e3       	ldi	r21, 0x3F	; 63
    6aa8:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6aac:	88 23       	and	r24, r24
    6aae:	2c f4       	brge	.+10     	; 0x6aba <LCD_voidGoToPos+0xb0>
		__ticks = 1;
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	9e 83       	std	Y+6, r25	; 0x06
    6ab6:	8d 83       	std	Y+5, r24	; 0x05
    6ab8:	3f c0       	rjmp	.+126    	; 0x6b38 <LCD_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    6aba:	6f 81       	ldd	r22, Y+7	; 0x07
    6abc:	78 85       	ldd	r23, Y+8	; 0x08
    6abe:	89 85       	ldd	r24, Y+9	; 0x09
    6ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ac2:	20 e0       	ldi	r18, 0x00	; 0
    6ac4:	3f ef       	ldi	r19, 0xFF	; 255
    6ac6:	4f e7       	ldi	r20, 0x7F	; 127
    6ac8:	57 e4       	ldi	r21, 0x47	; 71
    6aca:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6ace:	18 16       	cp	r1, r24
    6ad0:	4c f5       	brge	.+82     	; 0x6b24 <LCD_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ada:	20 e0       	ldi	r18, 0x00	; 0
    6adc:	30 e0       	ldi	r19, 0x00	; 0
    6ade:	40 e2       	ldi	r20, 0x20	; 32
    6ae0:	51 e4       	ldi	r21, 0x41	; 65
    6ae2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6ae6:	dc 01       	movw	r26, r24
    6ae8:	cb 01       	movw	r24, r22
    6aea:	bc 01       	movw	r22, r24
    6aec:	cd 01       	movw	r24, r26
    6aee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6af2:	dc 01       	movw	r26, r24
    6af4:	cb 01       	movw	r24, r22
    6af6:	9e 83       	std	Y+6, r25	; 0x06
    6af8:	8d 83       	std	Y+5, r24	; 0x05
    6afa:	0f c0       	rjmp	.+30     	; 0x6b1a <LCD_voidGoToPos+0x110>
    6afc:	88 ec       	ldi	r24, 0xC8	; 200
    6afe:	90 e0       	ldi	r25, 0x00	; 0
    6b00:	9c 83       	std	Y+4, r25	; 0x04
    6b02:	8b 83       	std	Y+3, r24	; 0x03
    6b04:	8b 81       	ldd	r24, Y+3	; 0x03
    6b06:	9c 81       	ldd	r25, Y+4	; 0x04
    6b08:	01 97       	sbiw	r24, 0x01	; 1
    6b0a:	f1 f7       	brne	.-4      	; 0x6b08 <LCD_voidGoToPos+0xfe>
    6b0c:	9c 83       	std	Y+4, r25	; 0x04
    6b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b10:	8d 81       	ldd	r24, Y+5	; 0x05
    6b12:	9e 81       	ldd	r25, Y+6	; 0x06
    6b14:	01 97       	sbiw	r24, 0x01	; 1
    6b16:	9e 83       	std	Y+6, r25	; 0x06
    6b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    6b1e:	00 97       	sbiw	r24, 0x00	; 0
    6b20:	69 f7       	brne	.-38     	; 0x6afc <LCD_voidGoToPos+0xf2>
    6b22:	14 c0       	rjmp	.+40     	; 0x6b4c <LCD_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b24:	6f 81       	ldd	r22, Y+7	; 0x07
    6b26:	78 85       	ldd	r23, Y+8	; 0x08
    6b28:	89 85       	ldd	r24, Y+9	; 0x09
    6b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b2c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6b30:	dc 01       	movw	r26, r24
    6b32:	cb 01       	movw	r24, r22
    6b34:	9e 83       	std	Y+6, r25	; 0x06
    6b36:	8d 83       	std	Y+5, r24	; 0x05
    6b38:	8d 81       	ldd	r24, Y+5	; 0x05
    6b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b3c:	9a 83       	std	Y+2, r25	; 0x02
    6b3e:	89 83       	std	Y+1, r24	; 0x01
    6b40:	89 81       	ldd	r24, Y+1	; 0x01
    6b42:	9a 81       	ldd	r25, Y+2	; 0x02
    6b44:	01 97       	sbiw	r24, 0x01	; 1
    6b46:	f1 f7       	brne	.-4      	; 0x6b44 <LCD_voidGoToPos+0x13a>
    6b48:	9a 83       	std	Y+2, r25	; 0x02
    6b4a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    _delay_ms(1);
}
    6b4c:	63 96       	adiw	r28, 0x13	; 19
    6b4e:	0f b6       	in	r0, 0x3f	; 63
    6b50:	f8 94       	cli
    6b52:	de bf       	out	0x3e, r29	; 62
    6b54:	0f be       	out	0x3f, r0	; 63
    6b56:	cd bf       	out	0x3d, r28	; 61
    6b58:	cf 91       	pop	r28
    6b5a:	df 91       	pop	r29
    6b5c:	08 95       	ret

00006b5e <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 A_u32Number)
{
    6b5e:	df 93       	push	r29
    6b60:	cf 93       	push	r28
    6b62:	00 d0       	rcall	.+0      	; 0x6b64 <LCD_voidDisplayNumber+0x6>
    6b64:	00 d0       	rcall	.+0      	; 0x6b66 <LCD_voidDisplayNumber+0x8>
    6b66:	cd b7       	in	r28, 0x3d	; 61
    6b68:	de b7       	in	r29, 0x3e	; 62
    6b6a:	9c 83       	std	Y+4, r25	; 0x04
    6b6c:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // LCD_voidSendString(local_u8NumToStr);
    //****************************************************//
    // third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number = 1;
    6b6e:	81 e0       	ldi	r24, 0x01	; 1
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	9a 83       	std	Y+2, r25	; 0x02
    6b74:	89 83       	std	Y+1, r24	; 0x01
    if (A_u32Number == 0)
    6b76:	8b 81       	ldd	r24, Y+3	; 0x03
    6b78:	9c 81       	ldd	r25, Y+4	; 0x04
    6b7a:	00 97       	sbiw	r24, 0x00	; 0
    6b7c:	31 f5       	brne	.+76     	; 0x6bca <LCD_voidDisplayNumber+0x6c>
    {
        LCD_voidSendData('0');
    6b7e:	80 e3       	ldi	r24, 0x30	; 48
    6b80:	0e 94 cf 31 	call	0x639e	; 0x639e <LCD_voidSendData>
    6b84:	22 c0       	rjmp	.+68     	; 0x6bca <LCD_voidDisplayNumber+0x6c>
    }
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
    6b86:	89 81       	ldd	r24, Y+1	; 0x01
    6b88:	9a 81       	ldd	r25, Y+2	; 0x02
    6b8a:	9c 01       	movw	r18, r24
    6b8c:	22 0f       	add	r18, r18
    6b8e:	33 1f       	adc	r19, r19
    6b90:	c9 01       	movw	r24, r18
    6b92:	88 0f       	add	r24, r24
    6b94:	99 1f       	adc	r25, r25
    6b96:	88 0f       	add	r24, r24
    6b98:	99 1f       	adc	r25, r25
    6b9a:	f9 01       	movw	r30, r18
    6b9c:	e8 0f       	add	r30, r24
    6b9e:	f9 1f       	adc	r31, r25
    6ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ba4:	2a e0       	ldi	r18, 0x0A	; 10
    6ba6:	30 e0       	ldi	r19, 0x00	; 0
    6ba8:	b9 01       	movw	r22, r18
    6baa:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    6bae:	8e 0f       	add	r24, r30
    6bb0:	9f 1f       	adc	r25, r31
    6bb2:	9a 83       	std	Y+2, r25	; 0x02
    6bb4:	89 83       	std	Y+1, r24	; 0x01
        A_u32Number = A_u32Number / 10;
    6bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    6bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    6bba:	2a e0       	ldi	r18, 0x0A	; 10
    6bbc:	30 e0       	ldi	r19, 0x00	; 0
    6bbe:	b9 01       	movw	r22, r18
    6bc0:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    6bc4:	cb 01       	movw	r24, r22
    6bc6:	9c 83       	std	Y+4, r25	; 0x04
    6bc8:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number = 1;
    if (A_u32Number == 0)
    {
        LCD_voidSendData('0');
    }
    while (A_u32Number != 0)
    6bca:	8b 81       	ldd	r24, Y+3	; 0x03
    6bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    6bce:	00 97       	sbiw	r24, 0x00	; 0
    6bd0:	d1 f6       	brne	.-76     	; 0x6b86 <LCD_voidDisplayNumber+0x28>
    6bd2:	14 c0       	rjmp	.+40     	; 0x6bfc <LCD_voidDisplayNumber+0x9e>
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
    {
        LCD_voidSendData((local_u32Number % 10) + 48);
    6bd4:	89 81       	ldd	r24, Y+1	; 0x01
    6bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd8:	2a e0       	ldi	r18, 0x0A	; 10
    6bda:	30 e0       	ldi	r19, 0x00	; 0
    6bdc:	b9 01       	movw	r22, r18
    6bde:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    6be2:	80 5d       	subi	r24, 0xD0	; 208
    6be4:	0e 94 cf 31 	call	0x639e	; 0x639e <LCD_voidSendData>
        local_u32Number = local_u32Number / 10;
    6be8:	89 81       	ldd	r24, Y+1	; 0x01
    6bea:	9a 81       	ldd	r25, Y+2	; 0x02
    6bec:	2a e0       	ldi	r18, 0x0A	; 10
    6bee:	30 e0       	ldi	r19, 0x00	; 0
    6bf0:	b9 01       	movw	r22, r18
    6bf2:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <__udivmodhi4>
    6bf6:	cb 01       	movw	r24, r22
    6bf8:	9a 83       	std	Y+2, r25	; 0x02
    6bfa:	89 83       	std	Y+1, r24	; 0x01
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
    6bfc:	89 81       	ldd	r24, Y+1	; 0x01
    6bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    6c00:	81 30       	cpi	r24, 0x01	; 1
    6c02:	91 05       	cpc	r25, r1
    6c04:	39 f7       	brne	.-50     	; 0x6bd4 <LCD_voidDisplayNumber+0x76>
    {
        LCD_voidSendData((local_u32Number % 10) + 48);
        local_u32Number = local_u32Number / 10;
    }
}
    6c06:	0f 90       	pop	r0
    6c08:	0f 90       	pop	r0
    6c0a:	0f 90       	pop	r0
    6c0c:	0f 90       	pop	r0
    6c0e:	cf 91       	pop	r28
    6c10:	df 91       	pop	r29
    6c12:	08 95       	ret

00006c14 <LCD_voidStoreCustomChar>:

void LCD_voidStoreCustomChar(u8 *A_u8Pattern, u8 A_u8CGRAMIndex)
{
    6c14:	df 93       	push	r29
    6c16:	cf 93       	push	r28
    6c18:	cd b7       	in	r28, 0x3d	; 61
    6c1a:	de b7       	in	r29, 0x3e	; 62
    6c1c:	aa 97       	sbiw	r28, 0x2a	; 42
    6c1e:	0f b6       	in	r0, 0x3f	; 63
    6c20:	f8 94       	cli
    6c22:	de bf       	out	0x3e, r29	; 62
    6c24:	0f be       	out	0x3f, r0	; 63
    6c26:	cd bf       	out	0x3d, r28	; 61
    6c28:	99 a7       	std	Y+41, r25	; 0x29
    6c2a:	88 a7       	std	Y+40, r24	; 0x28
    6c2c:	6a a7       	std	Y+42, r22	; 0x2a
    if (A_u8CGRAMIndex < 8)
    6c2e:	8a a5       	ldd	r24, Y+42	; 0x2a
    6c30:	88 30       	cpi	r24, 0x08	; 8
    6c32:	08 f0       	brcs	.+2      	; 0x6c36 <LCD_voidStoreCustomChar+0x22>
    6c34:	e5 c0       	rjmp	.+458    	; 0x6e00 <LCD_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex = A_u8CGRAMIndex * 8;
    6c36:	8a a5       	ldd	r24, Y+42	; 0x2a
    6c38:	88 2f       	mov	r24, r24
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
    6c3c:	88 0f       	add	r24, r24
    6c3e:	99 1f       	adc	r25, r25
    6c40:	88 0f       	add	r24, r24
    6c42:	99 1f       	adc	r25, r25
    6c44:	88 0f       	add	r24, r24
    6c46:	99 1f       	adc	r25, r25
    6c48:	8a a7       	std	Y+42, r24	; 0x2a
        SET_BIT(A_u8CGRAMIndex, PIN6);
    6c4a:	8a a5       	ldd	r24, Y+42	; 0x2a
    6c4c:	80 64       	ori	r24, 0x40	; 64
    6c4e:	8a a7       	std	Y+42, r24	; 0x2a
        CLR_BIT(A_u8CGRAMIndex, PIN7);
    6c50:	8a a5       	ldd	r24, Y+42	; 0x2a
    6c52:	8f 77       	andi	r24, 0x7F	; 127
    6c54:	8a a7       	std	Y+42, r24	; 0x2a
        LCD_voidSendCommand(A_u8CGRAMIndex);
    6c56:	8a a5       	ldd	r24, Y+42	; 0x2a
    6c58:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
        for (u8 i = 0; i < 8; i++)
    6c5c:	1f a2       	std	Y+39, r1	; 0x27
    6c5e:	cc c0       	rjmp	.+408    	; 0x6df8 <LCD_voidStoreCustomChar+0x1e4>
        {
            LCD_voidSendData(A_u8Pattern[i]);
    6c60:	8f a1       	ldd	r24, Y+39	; 0x27
    6c62:	28 2f       	mov	r18, r24
    6c64:	30 e0       	ldi	r19, 0x00	; 0
    6c66:	88 a5       	ldd	r24, Y+40	; 0x28
    6c68:	99 a5       	ldd	r25, Y+41	; 0x29
    6c6a:	fc 01       	movw	r30, r24
    6c6c:	e2 0f       	add	r30, r18
    6c6e:	f3 1f       	adc	r31, r19
    6c70:	80 81       	ld	r24, Z
    6c72:	0e 94 cf 31 	call	0x639e	; 0x639e <LCD_voidSendData>
    6c76:	80 e0       	ldi	r24, 0x00	; 0
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	a0 e7       	ldi	r26, 0x70	; 112
    6c7c:	b2 e4       	ldi	r27, 0x42	; 66
    6c7e:	8b a3       	std	Y+35, r24	; 0x23
    6c80:	9c a3       	std	Y+36, r25	; 0x24
    6c82:	ad a3       	std	Y+37, r26	; 0x25
    6c84:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6c86:	6b a1       	ldd	r22, Y+35	; 0x23
    6c88:	7c a1       	ldd	r23, Y+36	; 0x24
    6c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    6c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    6c8e:	2b ea       	ldi	r18, 0xAB	; 171
    6c90:	3a ea       	ldi	r19, 0xAA	; 170
    6c92:	4a e2       	ldi	r20, 0x2A	; 42
    6c94:	50 e4       	ldi	r21, 0x40	; 64
    6c96:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6c9a:	dc 01       	movw	r26, r24
    6c9c:	cb 01       	movw	r24, r22
    6c9e:	8f 8f       	std	Y+31, r24	; 0x1f
    6ca0:	98 a3       	std	Y+32, r25	; 0x20
    6ca2:	a9 a3       	std	Y+33, r26	; 0x21
    6ca4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    6ca6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6ca8:	78 a1       	ldd	r23, Y+32	; 0x20
    6caa:	89 a1       	ldd	r24, Y+33	; 0x21
    6cac:	9a a1       	ldd	r25, Y+34	; 0x22
    6cae:	20 e0       	ldi	r18, 0x00	; 0
    6cb0:	30 e0       	ldi	r19, 0x00	; 0
    6cb2:	40 e8       	ldi	r20, 0x80	; 128
    6cb4:	5f e3       	ldi	r21, 0x3F	; 63
    6cb6:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6cba:	88 23       	and	r24, r24
    6cbc:	1c f4       	brge	.+6      	; 0x6cc4 <LCD_voidStoreCustomChar+0xb0>
		__ticks = 1;
    6cbe:	81 e0       	ldi	r24, 0x01	; 1
    6cc0:	8e 8f       	std	Y+30, r24	; 0x1e
    6cc2:	91 c0       	rjmp	.+290    	; 0x6de6 <LCD_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    6cc4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6cc6:	78 a1       	ldd	r23, Y+32	; 0x20
    6cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    6cca:	9a a1       	ldd	r25, Y+34	; 0x22
    6ccc:	20 e0       	ldi	r18, 0x00	; 0
    6cce:	30 e0       	ldi	r19, 0x00	; 0
    6cd0:	4f e7       	ldi	r20, 0x7F	; 127
    6cd2:	53 e4       	ldi	r21, 0x43	; 67
    6cd4:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6cd8:	18 16       	cp	r1, r24
    6cda:	0c f0       	brlt	.+2      	; 0x6cde <LCD_voidStoreCustomChar+0xca>
    6cdc:	7b c0       	rjmp	.+246    	; 0x6dd4 <LCD_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    6cde:	6b a1       	ldd	r22, Y+35	; 0x23
    6ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    6ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    6ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    6ce6:	20 e0       	ldi	r18, 0x00	; 0
    6ce8:	30 e0       	ldi	r19, 0x00	; 0
    6cea:	4a e7       	ldi	r20, 0x7A	; 122
    6cec:	54 e4       	ldi	r21, 0x44	; 68
    6cee:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    6cf2:	dc 01       	movw	r26, r24
    6cf4:	cb 01       	movw	r24, r22
    6cf6:	8a 8f       	std	Y+26, r24	; 0x1a
    6cf8:	9b 8f       	std	Y+27, r25	; 0x1b
    6cfa:	ac 8f       	std	Y+28, r26	; 0x1c
    6cfc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cfe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6d00:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6d02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6d04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6d06:	20 e0       	ldi	r18, 0x00	; 0
    6d08:	30 e0       	ldi	r19, 0x00	; 0
    6d0a:	4a ef       	ldi	r20, 0xFA	; 250
    6d0c:	54 e4       	ldi	r21, 0x44	; 68
    6d0e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6d12:	dc 01       	movw	r26, r24
    6d14:	cb 01       	movw	r24, r22
    6d16:	8e 8b       	std	Y+22, r24	; 0x16
    6d18:	9f 8b       	std	Y+23, r25	; 0x17
    6d1a:	a8 8f       	std	Y+24, r26	; 0x18
    6d1c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    6d1e:	6e 89       	ldd	r22, Y+22	; 0x16
    6d20:	7f 89       	ldd	r23, Y+23	; 0x17
    6d22:	88 8d       	ldd	r24, Y+24	; 0x18
    6d24:	99 8d       	ldd	r25, Y+25	; 0x19
    6d26:	20 e0       	ldi	r18, 0x00	; 0
    6d28:	30 e0       	ldi	r19, 0x00	; 0
    6d2a:	40 e8       	ldi	r20, 0x80	; 128
    6d2c:	5f e3       	ldi	r21, 0x3F	; 63
    6d2e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6d32:	88 23       	and	r24, r24
    6d34:	2c f4       	brge	.+10     	; 0x6d40 <LCD_voidStoreCustomChar+0x12c>
		__ticks = 1;
    6d36:	81 e0       	ldi	r24, 0x01	; 1
    6d38:	90 e0       	ldi	r25, 0x00	; 0
    6d3a:	9d 8b       	std	Y+21, r25	; 0x15
    6d3c:	8c 8b       	std	Y+20, r24	; 0x14
    6d3e:	3f c0       	rjmp	.+126    	; 0x6dbe <LCD_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    6d40:	6e 89       	ldd	r22, Y+22	; 0x16
    6d42:	7f 89       	ldd	r23, Y+23	; 0x17
    6d44:	88 8d       	ldd	r24, Y+24	; 0x18
    6d46:	99 8d       	ldd	r25, Y+25	; 0x19
    6d48:	20 e0       	ldi	r18, 0x00	; 0
    6d4a:	3f ef       	ldi	r19, 0xFF	; 255
    6d4c:	4f e7       	ldi	r20, 0x7F	; 127
    6d4e:	57 e4       	ldi	r21, 0x47	; 71
    6d50:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6d54:	18 16       	cp	r1, r24
    6d56:	4c f5       	brge	.+82     	; 0x6daa <LCD_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d58:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6d5a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6d5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6d5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6d60:	20 e0       	ldi	r18, 0x00	; 0
    6d62:	30 e0       	ldi	r19, 0x00	; 0
    6d64:	40 e2       	ldi	r20, 0x20	; 32
    6d66:	51 e4       	ldi	r21, 0x41	; 65
    6d68:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6d6c:	dc 01       	movw	r26, r24
    6d6e:	cb 01       	movw	r24, r22
    6d70:	bc 01       	movw	r22, r24
    6d72:	cd 01       	movw	r24, r26
    6d74:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6d78:	dc 01       	movw	r26, r24
    6d7a:	cb 01       	movw	r24, r22
    6d7c:	9d 8b       	std	Y+21, r25	; 0x15
    6d7e:	8c 8b       	std	Y+20, r24	; 0x14
    6d80:	0f c0       	rjmp	.+30     	; 0x6da0 <LCD_voidStoreCustomChar+0x18c>
    6d82:	88 ec       	ldi	r24, 0xC8	; 200
    6d84:	90 e0       	ldi	r25, 0x00	; 0
    6d86:	9b 8b       	std	Y+19, r25	; 0x13
    6d88:	8a 8b       	std	Y+18, r24	; 0x12
    6d8a:	8a 89       	ldd	r24, Y+18	; 0x12
    6d8c:	9b 89       	ldd	r25, Y+19	; 0x13
    6d8e:	01 97       	sbiw	r24, 0x01	; 1
    6d90:	f1 f7       	brne	.-4      	; 0x6d8e <LCD_voidStoreCustomChar+0x17a>
    6d92:	9b 8b       	std	Y+19, r25	; 0x13
    6d94:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d96:	8c 89       	ldd	r24, Y+20	; 0x14
    6d98:	9d 89       	ldd	r25, Y+21	; 0x15
    6d9a:	01 97       	sbiw	r24, 0x01	; 1
    6d9c:	9d 8b       	std	Y+21, r25	; 0x15
    6d9e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6da0:	8c 89       	ldd	r24, Y+20	; 0x14
    6da2:	9d 89       	ldd	r25, Y+21	; 0x15
    6da4:	00 97       	sbiw	r24, 0x00	; 0
    6da6:	69 f7       	brne	.-38     	; 0x6d82 <LCD_voidStoreCustomChar+0x16e>
    6da8:	24 c0       	rjmp	.+72     	; 0x6df2 <LCD_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6daa:	6e 89       	ldd	r22, Y+22	; 0x16
    6dac:	7f 89       	ldd	r23, Y+23	; 0x17
    6dae:	88 8d       	ldd	r24, Y+24	; 0x18
    6db0:	99 8d       	ldd	r25, Y+25	; 0x19
    6db2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6db6:	dc 01       	movw	r26, r24
    6db8:	cb 01       	movw	r24, r22
    6dba:	9d 8b       	std	Y+21, r25	; 0x15
    6dbc:	8c 8b       	std	Y+20, r24	; 0x14
    6dbe:	8c 89       	ldd	r24, Y+20	; 0x14
    6dc0:	9d 89       	ldd	r25, Y+21	; 0x15
    6dc2:	99 8b       	std	Y+17, r25	; 0x11
    6dc4:	88 8b       	std	Y+16, r24	; 0x10
    6dc6:	88 89       	ldd	r24, Y+16	; 0x10
    6dc8:	99 89       	ldd	r25, Y+17	; 0x11
    6dca:	01 97       	sbiw	r24, 0x01	; 1
    6dcc:	f1 f7       	brne	.-4      	; 0x6dca <LCD_voidStoreCustomChar+0x1b6>
    6dce:	99 8b       	std	Y+17, r25	; 0x11
    6dd0:	88 8b       	std	Y+16, r24	; 0x10
    6dd2:	0f c0       	rjmp	.+30     	; 0x6df2 <LCD_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6dd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    6dd6:	78 a1       	ldd	r23, Y+32	; 0x20
    6dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    6dda:	9a a1       	ldd	r25, Y+34	; 0x22
    6ddc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6de0:	dc 01       	movw	r26, r24
    6de2:	cb 01       	movw	r24, r22
    6de4:	8e 8f       	std	Y+30, r24	; 0x1e
    6de6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6de8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dec:	8a 95       	dec	r24
    6dee:	f1 f7       	brne	.-4      	; 0x6dec <LCD_voidStoreCustomChar+0x1d8>
    6df0:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex = A_u8CGRAMIndex * 8;
        SET_BIT(A_u8CGRAMIndex, PIN6);
        CLR_BIT(A_u8CGRAMIndex, PIN7);
        LCD_voidSendCommand(A_u8CGRAMIndex);
        for (u8 i = 0; i < 8; i++)
    6df2:	8f a1       	ldd	r24, Y+39	; 0x27
    6df4:	8f 5f       	subi	r24, 0xFF	; 255
    6df6:	8f a3       	std	Y+39, r24	; 0x27
    6df8:	8f a1       	ldd	r24, Y+39	; 0x27
    6dfa:	88 30       	cpi	r24, 0x08	; 8
    6dfc:	08 f4       	brcc	.+2      	; 0x6e00 <LCD_voidStoreCustomChar+0x1ec>
    6dfe:	30 cf       	rjmp	.-416    	; 0x6c60 <LCD_voidStoreCustomChar+0x4c>
        {
            LCD_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    LCD_voidSendCommand(RETURN_HOME);
    6e00:	82 e0       	ldi	r24, 0x02	; 2
    6e02:	0e 94 31 31 	call	0x6262	; 0x6262 <LCD_voidSendCommand>
    6e06:	80 e0       	ldi	r24, 0x00	; 0
    6e08:	90 e0       	ldi	r25, 0x00	; 0
    6e0a:	a0 e0       	ldi	r26, 0x00	; 0
    6e0c:	b0 e4       	ldi	r27, 0x40	; 64
    6e0e:	8b 87       	std	Y+11, r24	; 0x0b
    6e10:	9c 87       	std	Y+12, r25	; 0x0c
    6e12:	ad 87       	std	Y+13, r26	; 0x0d
    6e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e1e:	20 e0       	ldi	r18, 0x00	; 0
    6e20:	30 e0       	ldi	r19, 0x00	; 0
    6e22:	4a ef       	ldi	r20, 0xFA	; 250
    6e24:	54 e4       	ldi	r21, 0x44	; 68
    6e26:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6e2a:	dc 01       	movw	r26, r24
    6e2c:	cb 01       	movw	r24, r22
    6e2e:	8f 83       	std	Y+7, r24	; 0x07
    6e30:	98 87       	std	Y+8, r25	; 0x08
    6e32:	a9 87       	std	Y+9, r26	; 0x09
    6e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e36:	6f 81       	ldd	r22, Y+7	; 0x07
    6e38:	78 85       	ldd	r23, Y+8	; 0x08
    6e3a:	89 85       	ldd	r24, Y+9	; 0x09
    6e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e3e:	20 e0       	ldi	r18, 0x00	; 0
    6e40:	30 e0       	ldi	r19, 0x00	; 0
    6e42:	40 e8       	ldi	r20, 0x80	; 128
    6e44:	5f e3       	ldi	r21, 0x3F	; 63
    6e46:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6e4a:	88 23       	and	r24, r24
    6e4c:	2c f4       	brge	.+10     	; 0x6e58 <LCD_voidStoreCustomChar+0x244>
		__ticks = 1;
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	9e 83       	std	Y+6, r25	; 0x06
    6e54:	8d 83       	std	Y+5, r24	; 0x05
    6e56:	3f c0       	rjmp	.+126    	; 0x6ed6 <LCD_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    6e58:	6f 81       	ldd	r22, Y+7	; 0x07
    6e5a:	78 85       	ldd	r23, Y+8	; 0x08
    6e5c:	89 85       	ldd	r24, Y+9	; 0x09
    6e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e60:	20 e0       	ldi	r18, 0x00	; 0
    6e62:	3f ef       	ldi	r19, 0xFF	; 255
    6e64:	4f e7       	ldi	r20, 0x7F	; 127
    6e66:	57 e4       	ldi	r21, 0x47	; 71
    6e68:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6e6c:	18 16       	cp	r1, r24
    6e6e:	4c f5       	brge	.+82     	; 0x6ec2 <LCD_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e78:	20 e0       	ldi	r18, 0x00	; 0
    6e7a:	30 e0       	ldi	r19, 0x00	; 0
    6e7c:	40 e2       	ldi	r20, 0x20	; 32
    6e7e:	51 e4       	ldi	r21, 0x41	; 65
    6e80:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6e84:	dc 01       	movw	r26, r24
    6e86:	cb 01       	movw	r24, r22
    6e88:	bc 01       	movw	r22, r24
    6e8a:	cd 01       	movw	r24, r26
    6e8c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e90:	dc 01       	movw	r26, r24
    6e92:	cb 01       	movw	r24, r22
    6e94:	9e 83       	std	Y+6, r25	; 0x06
    6e96:	8d 83       	std	Y+5, r24	; 0x05
    6e98:	0f c0       	rjmp	.+30     	; 0x6eb8 <LCD_voidStoreCustomChar+0x2a4>
    6e9a:	88 ec       	ldi	r24, 0xC8	; 200
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	9c 83       	std	Y+4, r25	; 0x04
    6ea0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    6ea6:	01 97       	sbiw	r24, 0x01	; 1
    6ea8:	f1 f7       	brne	.-4      	; 0x6ea6 <LCD_voidStoreCustomChar+0x292>
    6eaa:	9c 83       	std	Y+4, r25	; 0x04
    6eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6eae:	8d 81       	ldd	r24, Y+5	; 0x05
    6eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    6eb2:	01 97       	sbiw	r24, 0x01	; 1
    6eb4:	9e 83       	std	Y+6, r25	; 0x06
    6eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    6eba:	9e 81       	ldd	r25, Y+6	; 0x06
    6ebc:	00 97       	sbiw	r24, 0x00	; 0
    6ebe:	69 f7       	brne	.-38     	; 0x6e9a <LCD_voidStoreCustomChar+0x286>
    6ec0:	14 c0       	rjmp	.+40     	; 0x6eea <LCD_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    6ec4:	78 85       	ldd	r23, Y+8	; 0x08
    6ec6:	89 85       	ldd	r24, Y+9	; 0x09
    6ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6ece:	dc 01       	movw	r26, r24
    6ed0:	cb 01       	movw	r24, r22
    6ed2:	9e 83       	std	Y+6, r25	; 0x06
    6ed4:	8d 83       	std	Y+5, r24	; 0x05
    6ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    6eda:	9a 83       	std	Y+2, r25	; 0x02
    6edc:	89 83       	std	Y+1, r24	; 0x01
    6ede:	89 81       	ldd	r24, Y+1	; 0x01
    6ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee2:	01 97       	sbiw	r24, 0x01	; 1
    6ee4:	f1 f7       	brne	.-4      	; 0x6ee2 <LCD_voidStoreCustomChar+0x2ce>
    6ee6:	9a 83       	std	Y+2, r25	; 0x02
    6ee8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    6eea:	aa 96       	adiw	r28, 0x2a	; 42
    6eec:	0f b6       	in	r0, 0x3f	; 63
    6eee:	f8 94       	cli
    6ef0:	de bf       	out	0x3e, r29	; 62
    6ef2:	0f be       	out	0x3f, r0	; 63
    6ef4:	cd bf       	out	0x3d, r28	; 61
    6ef6:	cf 91       	pop	r28
    6ef8:	df 91       	pop	r29
    6efa:	08 95       	ret

00006efc <LCD_voidDisplayCustomChar>:

void LCD_voidDisplayCustomChar(u8 A_u8CGRAMIndex, u8 A_u8Row, u8 A_u8Col)
{
    6efc:	df 93       	push	r29
    6efe:	cf 93       	push	r28
    6f00:	00 d0       	rcall	.+0      	; 0x6f02 <LCD_voidDisplayCustomChar+0x6>
    6f02:	0f 92       	push	r0
    6f04:	cd b7       	in	r28, 0x3d	; 61
    6f06:	de b7       	in	r29, 0x3e	; 62
    6f08:	89 83       	std	Y+1, r24	; 0x01
    6f0a:	6a 83       	std	Y+2, r22	; 0x02
    6f0c:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoToPos(A_u8Row, A_u8Col);
    6f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    6f10:	6b 81       	ldd	r22, Y+3	; 0x03
    6f12:	0e 94 05 35 	call	0x6a0a	; 0x6a0a <LCD_voidGoToPos>
    LCD_voidSendData(A_u8CGRAMIndex);
    6f16:	89 81       	ldd	r24, Y+1	; 0x01
    6f18:	0e 94 cf 31 	call	0x639e	; 0x639e <LCD_voidSendData>
}
    6f1c:	0f 90       	pop	r0
    6f1e:	0f 90       	pop	r0
    6f20:	0f 90       	pop	r0
    6f22:	cf 91       	pop	r28
    6f24:	df 91       	pop	r29
    6f26:	08 95       	ret

00006f28 <KEYPAD_u8GetPressedKey>:
u8 KeypadArr[COLS_NUMBER][ROWS_NUMBER] = KEYPAD_SYMBOLS;
u8 keypadRow[ROWS_NUMBER] = ROW_PINS;
u8 keypadCol[COLS_NUMBER] = COL_PINS;

u8 KEYPAD_u8GetPressedKey()
{
    6f28:	df 93       	push	r29
    6f2a:	cf 93       	push	r28
    6f2c:	cd b7       	in	r28, 0x3d	; 61
    6f2e:	de b7       	in	r29, 0x3e	; 62
    6f30:	62 97       	sbiw	r28, 0x12	; 18
    6f32:	0f b6       	in	r0, 0x3f	; 63
    6f34:	f8 94       	cli
    6f36:	de bf       	out	0x3e, r29	; 62
    6f38:	0f be       	out	0x3f, r0	; 63
    6f3a:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8RowCounter, local_u8ColCounter, local_u8Flag = FLAG_DOWN, local_u8PressedKey = KEY_NOT_PRESSED;
    6f3c:	18 8a       	std	Y+16, r1	; 0x10
    6f3e:	8f ef       	ldi	r24, 0xFF	; 255
    6f40:	8f 87       	std	Y+15, r24	; 0x0f

    for (local_u8RowCounter = 0; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    6f42:	1a 8a       	std	Y+18, r1	; 0x12
    6f44:	c9 c0       	rjmp	.+402    	; 0x70d8 <KEYPAD_u8GetPressedKey+0x1b0>
    {
        DIO_voidSetPinValue(KEYPAD_PORT, keypadRow[local_u8RowCounter], PIN_LOW);
    6f46:	8a 89       	ldd	r24, Y+18	; 0x12
    6f48:	88 2f       	mov	r24, r24
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	fc 01       	movw	r30, r24
    6f4e:	e7 58       	subi	r30, 0x87	; 135
    6f50:	fe 4f       	sbci	r31, 0xFE	; 254
    6f52:	90 81       	ld	r25, Z
    6f54:	80 e0       	ldi	r24, 0x00	; 0
    6f56:	69 2f       	mov	r22, r25
    6f58:	40 e0       	ldi	r20, 0x00	; 0
    6f5a:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        for (local_u8ColCounter = 0; local_u8ColCounter < COLS_NUMBER; local_u8ColCounter++)
    6f5e:	19 8a       	std	Y+17, r1	; 0x11
    6f60:	a5 c0       	rjmp	.+330    	; 0x70ac <KEYPAD_u8GetPressedKey+0x184>
        {
            if (DIO_u8GetPinValue(KEYPAD_PORT, keypadCol[local_u8ColCounter]) == PIN_LOW)
    6f62:	89 89       	ldd	r24, Y+17	; 0x11
    6f64:	88 2f       	mov	r24, r24
    6f66:	90 e0       	ldi	r25, 0x00	; 0
    6f68:	fc 01       	movw	r30, r24
    6f6a:	e3 58       	subi	r30, 0x83	; 131
    6f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    6f6e:	90 81       	ld	r25, Z
    6f70:	80 e0       	ldi	r24, 0x00	; 0
    6f72:	69 2f       	mov	r22, r25
    6f74:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <DIO_u8GetPinValue>
    6f78:	88 23       	and	r24, r24
    6f7a:	09 f0       	breq	.+2      	; 0x6f7e <KEYPAD_u8GetPressedKey+0x56>
    6f7c:	94 c0       	rjmp	.+296    	; 0x70a6 <KEYPAD_u8GetPressedKey+0x17e>
    6f7e:	80 e0       	ldi	r24, 0x00	; 0
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	a6 e1       	ldi	r26, 0x16	; 22
    6f84:	b3 e4       	ldi	r27, 0x43	; 67
    6f86:	8b 87       	std	Y+11, r24	; 0x0b
    6f88:	9c 87       	std	Y+12, r25	; 0x0c
    6f8a:	ad 87       	std	Y+13, r26	; 0x0d
    6f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f96:	20 e0       	ldi	r18, 0x00	; 0
    6f98:	30 e0       	ldi	r19, 0x00	; 0
    6f9a:	4a ef       	ldi	r20, 0xFA	; 250
    6f9c:	54 e4       	ldi	r21, 0x44	; 68
    6f9e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6fa2:	dc 01       	movw	r26, r24
    6fa4:	cb 01       	movw	r24, r22
    6fa6:	8f 83       	std	Y+7, r24	; 0x07
    6fa8:	98 87       	std	Y+8, r25	; 0x08
    6faa:	a9 87       	std	Y+9, r26	; 0x09
    6fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6fae:	6f 81       	ldd	r22, Y+7	; 0x07
    6fb0:	78 85       	ldd	r23, Y+8	; 0x08
    6fb2:	89 85       	ldd	r24, Y+9	; 0x09
    6fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fb6:	20 e0       	ldi	r18, 0x00	; 0
    6fb8:	30 e0       	ldi	r19, 0x00	; 0
    6fba:	40 e8       	ldi	r20, 0x80	; 128
    6fbc:	5f e3       	ldi	r21, 0x3F	; 63
    6fbe:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    6fc2:	88 23       	and	r24, r24
    6fc4:	2c f4       	brge	.+10     	; 0x6fd0 <KEYPAD_u8GetPressedKey+0xa8>
		__ticks = 1;
    6fc6:	81 e0       	ldi	r24, 0x01	; 1
    6fc8:	90 e0       	ldi	r25, 0x00	; 0
    6fca:	9e 83       	std	Y+6, r25	; 0x06
    6fcc:	8d 83       	std	Y+5, r24	; 0x05
    6fce:	3f c0       	rjmp	.+126    	; 0x704e <KEYPAD_u8GetPressedKey+0x126>
	else if (__tmp > 65535)
    6fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    6fd2:	78 85       	ldd	r23, Y+8	; 0x08
    6fd4:	89 85       	ldd	r24, Y+9	; 0x09
    6fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fd8:	20 e0       	ldi	r18, 0x00	; 0
    6fda:	3f ef       	ldi	r19, 0xFF	; 255
    6fdc:	4f e7       	ldi	r20, 0x7F	; 127
    6fde:	57 e4       	ldi	r21, 0x47	; 71
    6fe0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    6fe4:	18 16       	cp	r1, r24
    6fe6:	4c f5       	brge	.+82     	; 0x703a <KEYPAD_u8GetPressedKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    6fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ff0:	20 e0       	ldi	r18, 0x00	; 0
    6ff2:	30 e0       	ldi	r19, 0x00	; 0
    6ff4:	40 e2       	ldi	r20, 0x20	; 32
    6ff6:	51 e4       	ldi	r21, 0x41	; 65
    6ff8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    6ffc:	dc 01       	movw	r26, r24
    6ffe:	cb 01       	movw	r24, r22
    7000:	bc 01       	movw	r22, r24
    7002:	cd 01       	movw	r24, r26
    7004:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7008:	dc 01       	movw	r26, r24
    700a:	cb 01       	movw	r24, r22
    700c:	9e 83       	std	Y+6, r25	; 0x06
    700e:	8d 83       	std	Y+5, r24	; 0x05
    7010:	0f c0       	rjmp	.+30     	; 0x7030 <KEYPAD_u8GetPressedKey+0x108>
    7012:	88 ec       	ldi	r24, 0xC8	; 200
    7014:	90 e0       	ldi	r25, 0x00	; 0
    7016:	9c 83       	std	Y+4, r25	; 0x04
    7018:	8b 83       	std	Y+3, r24	; 0x03
    701a:	8b 81       	ldd	r24, Y+3	; 0x03
    701c:	9c 81       	ldd	r25, Y+4	; 0x04
    701e:	01 97       	sbiw	r24, 0x01	; 1
    7020:	f1 f7       	brne	.-4      	; 0x701e <KEYPAD_u8GetPressedKey+0xf6>
    7022:	9c 83       	std	Y+4, r25	; 0x04
    7024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7026:	8d 81       	ldd	r24, Y+5	; 0x05
    7028:	9e 81       	ldd	r25, Y+6	; 0x06
    702a:	01 97       	sbiw	r24, 0x01	; 1
    702c:	9e 83       	std	Y+6, r25	; 0x06
    702e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7030:	8d 81       	ldd	r24, Y+5	; 0x05
    7032:	9e 81       	ldd	r25, Y+6	; 0x06
    7034:	00 97       	sbiw	r24, 0x00	; 0
    7036:	69 f7       	brne	.-38     	; 0x7012 <KEYPAD_u8GetPressedKey+0xea>
    7038:	14 c0       	rjmp	.+40     	; 0x7062 <KEYPAD_u8GetPressedKey+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    703a:	6f 81       	ldd	r22, Y+7	; 0x07
    703c:	78 85       	ldd	r23, Y+8	; 0x08
    703e:	89 85       	ldd	r24, Y+9	; 0x09
    7040:	9a 85       	ldd	r25, Y+10	; 0x0a
    7042:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7046:	dc 01       	movw	r26, r24
    7048:	cb 01       	movw	r24, r22
    704a:	9e 83       	std	Y+6, r25	; 0x06
    704c:	8d 83       	std	Y+5, r24	; 0x05
    704e:	8d 81       	ldd	r24, Y+5	; 0x05
    7050:	9e 81       	ldd	r25, Y+6	; 0x06
    7052:	9a 83       	std	Y+2, r25	; 0x02
    7054:	89 83       	std	Y+1, r24	; 0x01
    7056:	89 81       	ldd	r24, Y+1	; 0x01
    7058:	9a 81       	ldd	r25, Y+2	; 0x02
    705a:	01 97       	sbiw	r24, 0x01	; 1
    705c:	f1 f7       	brne	.-4      	; 0x705a <KEYPAD_u8GetPressedKey+0x132>
    705e:	9a 83       	std	Y+2, r25	; 0x02
    7060:	89 83       	std	Y+1, r24	; 0x01
            {
                // to avoid "debounce effect"
                _delay_ms(DEBOUNCING_DELAY);
                local_u8Flag = FLAG_UP;
    7062:	81 e0       	ldi	r24, 0x01	; 1
    7064:	88 8b       	std	Y+16, r24	; 0x10
                // to make sure it will not print the character more than once if the user still press the button
                while (DIO_u8GetPinValue(KEYPAD_PORT, keypadCol[local_u8ColCounter]) == PIN_LOW)
    7066:	89 89       	ldd	r24, Y+17	; 0x11
    7068:	88 2f       	mov	r24, r24
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	fc 01       	movw	r30, r24
    706e:	e3 58       	subi	r30, 0x83	; 131
    7070:	fe 4f       	sbci	r31, 0xFE	; 254
    7072:	90 81       	ld	r25, Z
    7074:	80 e0       	ldi	r24, 0x00	; 0
    7076:	69 2f       	mov	r22, r25
    7078:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <DIO_u8GetPinValue>
    707c:	88 23       	and	r24, r24
    707e:	99 f3       	breq	.-26     	; 0x7066 <KEYPAD_u8GetPressedKey+0x13e>
                    ;
                local_u8PressedKey = KeypadArr[local_u8RowCounter][local_u8ColCounter];
    7080:	8a 89       	ldd	r24, Y+18	; 0x12
    7082:	48 2f       	mov	r20, r24
    7084:	50 e0       	ldi	r21, 0x00	; 0
    7086:	89 89       	ldd	r24, Y+17	; 0x11
    7088:	28 2f       	mov	r18, r24
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	ca 01       	movw	r24, r20
    708e:	88 0f       	add	r24, r24
    7090:	99 1f       	adc	r25, r25
    7092:	88 0f       	add	r24, r24
    7094:	99 1f       	adc	r25, r25
    7096:	82 0f       	add	r24, r18
    7098:	93 1f       	adc	r25, r19
    709a:	fc 01       	movw	r30, r24
    709c:	e7 59       	subi	r30, 0x97	; 151
    709e:	fe 4f       	sbci	r31, 0xFE	; 254
    70a0:	80 81       	ld	r24, Z
    70a2:	8f 87       	std	Y+15, r24	; 0x0f
    70a4:	07 c0       	rjmp	.+14     	; 0x70b4 <KEYPAD_u8GetPressedKey+0x18c>
    u8 local_u8RowCounter, local_u8ColCounter, local_u8Flag = FLAG_DOWN, local_u8PressedKey = KEY_NOT_PRESSED;

    for (local_u8RowCounter = 0; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    {
        DIO_voidSetPinValue(KEYPAD_PORT, keypadRow[local_u8RowCounter], PIN_LOW);
        for (local_u8ColCounter = 0; local_u8ColCounter < COLS_NUMBER; local_u8ColCounter++)
    70a6:	89 89       	ldd	r24, Y+17	; 0x11
    70a8:	8f 5f       	subi	r24, 0xFF	; 255
    70aa:	89 8b       	std	Y+17, r24	; 0x11
    70ac:	89 89       	ldd	r24, Y+17	; 0x11
    70ae:	84 30       	cpi	r24, 0x04	; 4
    70b0:	08 f4       	brcc	.+2      	; 0x70b4 <KEYPAD_u8GetPressedKey+0x18c>
    70b2:	57 cf       	rjmp	.-338    	; 0x6f62 <KEYPAD_u8GetPressedKey+0x3a>
                    ;
                local_u8PressedKey = KeypadArr[local_u8RowCounter][local_u8ColCounter];
                break;
            }
        }
        DIO_voidSetPinValue(KEYPAD_PORT, keypadRow[local_u8RowCounter], PIN_HIGH);
    70b4:	8a 89       	ldd	r24, Y+18	; 0x12
    70b6:	88 2f       	mov	r24, r24
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	fc 01       	movw	r30, r24
    70bc:	e7 58       	subi	r30, 0x87	; 135
    70be:	fe 4f       	sbci	r31, 0xFE	; 254
    70c0:	90 81       	ld	r25, Z
    70c2:	80 e0       	ldi	r24, 0x00	; 0
    70c4:	69 2f       	mov	r22, r25
    70c6:	41 e0       	ldi	r20, 0x01	; 1
    70c8:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
        if (local_u8Flag)
    70cc:	88 89       	ldd	r24, Y+16	; 0x10
    70ce:	88 23       	and	r24, r24
    70d0:	39 f4       	brne	.+14     	; 0x70e0 <KEYPAD_u8GetPressedKey+0x1b8>

u8 KEYPAD_u8GetPressedKey()
{
    u8 local_u8RowCounter, local_u8ColCounter, local_u8Flag = FLAG_DOWN, local_u8PressedKey = KEY_NOT_PRESSED;

    for (local_u8RowCounter = 0; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    70d2:	8a 89       	ldd	r24, Y+18	; 0x12
    70d4:	8f 5f       	subi	r24, 0xFF	; 255
    70d6:	8a 8b       	std	Y+18, r24	; 0x12
    70d8:	8a 89       	ldd	r24, Y+18	; 0x12
    70da:	84 30       	cpi	r24, 0x04	; 4
    70dc:	08 f4       	brcc	.+2      	; 0x70e0 <KEYPAD_u8GetPressedKey+0x1b8>
    70de:	33 cf       	rjmp	.-410    	; 0x6f46 <KEYPAD_u8GetPressedKey+0x1e>
        if (local_u8Flag)
        {
            break;
        }
    }
    return local_u8PressedKey;
    70e0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    70e2:	62 96       	adiw	r28, 0x12	; 18
    70e4:	0f b6       	in	r0, 0x3f	; 63
    70e6:	f8 94       	cli
    70e8:	de bf       	out	0x3e, r29	; 62
    70ea:	0f be       	out	0x3f, r0	; 63
    70ec:	cd bf       	out	0x3d, r28	; 61
    70ee:	cf 91       	pop	r28
    70f0:	df 91       	pop	r29
    70f2:	08 95       	ret

000070f4 <EEPROM_voidWriteInit>:
    A1 & A0: they will be addressed using hardware also but to express software address

*/

TWI_STATUS EEPROM_voidWriteInit(u8 A_u8MemoryNumber, u16 A_u8MemoryAdress)
{
    70f4:	df 93       	push	r29
    70f6:	cf 93       	push	r28
    70f8:	00 d0       	rcall	.+0      	; 0x70fa <EEPROM_voidWriteInit+0x6>
    70fa:	00 d0       	rcall	.+0      	; 0x70fc <EEPROM_voidWriteInit+0x8>
    70fc:	00 d0       	rcall	.+0      	; 0x70fe <EEPROM_voidWriteInit+0xa>
    70fe:	cd b7       	in	r28, 0x3d	; 61
    7100:	de b7       	in	r29, 0x3e	; 62
    7102:	8b 83       	std	Y+3, r24	; 0x03
    7104:	7d 83       	std	Y+5, r23	; 0x05
    7106:	6c 83       	std	Y+4, r22	; 0x04
    /*
        0b01010 A2 A1 A0
        A2:HW addressing so shifted by two (memory number)
        A1 & A0: part of memroy address
    */
    TWI_STATUS status = TWI_OK;
    7108:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8slaveAddress = EEPROM_ADD_MASK | (u8)((A_u8MemoryAdress >> 8)) | (A_u8MemoryNumber << 2);
    710a:	8c 81       	ldd	r24, Y+4	; 0x04
    710c:	9d 81       	ldd	r25, Y+5	; 0x05
    710e:	89 2f       	mov	r24, r25
    7110:	99 27       	eor	r25, r25
    7112:	80 65       	ori	r24, 0x50	; 80
    7114:	28 2f       	mov	r18, r24
    7116:	8b 81       	ldd	r24, Y+3	; 0x03
    7118:	88 2f       	mov	r24, r24
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	88 0f       	add	r24, r24
    711e:	99 1f       	adc	r25, r25
    7120:	88 0f       	add	r24, r24
    7122:	99 1f       	adc	r25, r25
    7124:	82 2b       	or	r24, r18
    7126:	89 83       	std	Y+1, r24	; 0x01

    // 01- Send START condition
    status = TWI_u8Start();
    7128:	0e 94 34 14 	call	0x2868	; 0x2868 <TWI_u8Start>
    712c:	8a 83       	std	Y+2, r24	; 0x02
    if (status != TWI_OK)
    712e:	8a 81       	ldd	r24, Y+2	; 0x02
    7130:	88 23       	and	r24, r24
    7132:	19 f0       	breq	.+6      	; 0x713a <EEPROM_voidWriteInit+0x46>
        return status;
    7134:	8a 81       	ldd	r24, Y+2	; 0x02
    7136:	8e 83       	std	Y+6, r24	; 0x06
    7138:	10 c0       	rjmp	.+32     	; 0x715a <EEPROM_voidWriteInit+0x66>

    // 02- Send Slave Address
    status = TWI_u8SendSlaveAddWrite(local_u8slaveAddress); // A2:0 A1:0 A:0
    713a:	89 81       	ldd	r24, Y+1	; 0x01
    713c:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_u8SendSlaveAddWrite>
    7140:	8a 83       	std	Y+2, r24	; 0x02
    if (status != TWI_OK)
    7142:	8a 81       	ldd	r24, Y+2	; 0x02
    7144:	88 23       	and	r24, r24
    7146:	19 f0       	breq	.+6      	; 0x714e <EEPROM_voidWriteInit+0x5a>
        return status;
    7148:	8a 81       	ldd	r24, Y+2	; 0x02
    714a:	8e 83       	std	Y+6, r24	; 0x06
    714c:	06 c0       	rjmp	.+12     	; 0x715a <EEPROM_voidWriteInit+0x66>

    // 03- send the rest of address
    status = TWI_u8SendData((u8)A_u8MemoryAdress);
    714e:	8c 81       	ldd	r24, Y+4	; 0x04
    7150:	0e 94 91 14 	call	0x2922	; 0x2922 <TWI_u8SendData>
    7154:	8a 83       	std	Y+2, r24	; 0x02
    return status;
    7156:	8a 81       	ldd	r24, Y+2	; 0x02
    7158:	8e 83       	std	Y+6, r24	; 0x06
    715a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    715c:	26 96       	adiw	r28, 0x06	; 6
    715e:	0f b6       	in	r0, 0x3f	; 63
    7160:	f8 94       	cli
    7162:	de bf       	out	0x3e, r29	; 62
    7164:	0f be       	out	0x3f, r0	; 63
    7166:	cd bf       	out	0x3d, r28	; 61
    7168:	cf 91       	pop	r28
    716a:	df 91       	pop	r29
    716c:	08 95       	ret

0000716e <EEPROM_voidSendData>:

TWI_STATUS EEPROM_voidSendData(u8 A_u8Data)
{
    716e:	df 93       	push	r29
    7170:	cf 93       	push	r28
    7172:	0f 92       	push	r0
    7174:	cd b7       	in	r28, 0x3d	; 61
    7176:	de b7       	in	r29, 0x3e	; 62
    7178:	89 83       	std	Y+1, r24	; 0x01
    // 04- sned byte
    return TWI_u8SendData(A_u8Data);
    717a:	89 81       	ldd	r24, Y+1	; 0x01
    717c:	0e 94 91 14 	call	0x2922	; 0x2922 <TWI_u8SendData>
}
    7180:	0f 90       	pop	r0
    7182:	cf 91       	pop	r28
    7184:	df 91       	pop	r29
    7186:	08 95       	ret

00007188 <EEPROM_voidReadInit>:

TWI_STATUS EEPROM_voidReadInit(u8 A_u8MemoryNumber, u16 A_u8MemoryAdress)
{
    7188:	df 93       	push	r29
    718a:	cf 93       	push	r28
    718c:	00 d0       	rcall	.+0      	; 0x718e <EEPROM_voidReadInit+0x6>
    718e:	00 d0       	rcall	.+0      	; 0x7190 <EEPROM_voidReadInit+0x8>
    7190:	00 d0       	rcall	.+0      	; 0x7192 <EEPROM_voidReadInit+0xa>
    7192:	cd b7       	in	r28, 0x3d	; 61
    7194:	de b7       	in	r29, 0x3e	; 62
    7196:	8b 83       	std	Y+3, r24	; 0x03
    7198:	7d 83       	std	Y+5, r23	; 0x05
    719a:	6c 83       	std	Y+4, r22	; 0x04
    TWI_STATUS status = TWI_OK;
    719c:	1a 82       	std	Y+2, r1	; 0x02
    u8 local_u8slaveAddress = EEPROM_ADD_MASK | (u8)((A_u8MemoryAdress >> 8)) | (A_u8MemoryNumber << 2);
    719e:	8c 81       	ldd	r24, Y+4	; 0x04
    71a0:	9d 81       	ldd	r25, Y+5	; 0x05
    71a2:	89 2f       	mov	r24, r25
    71a4:	99 27       	eor	r25, r25
    71a6:	80 65       	ori	r24, 0x50	; 80
    71a8:	28 2f       	mov	r18, r24
    71aa:	8b 81       	ldd	r24, Y+3	; 0x03
    71ac:	88 2f       	mov	r24, r24
    71ae:	90 e0       	ldi	r25, 0x00	; 0
    71b0:	88 0f       	add	r24, r24
    71b2:	99 1f       	adc	r25, r25
    71b4:	88 0f       	add	r24, r24
    71b6:	99 1f       	adc	r25, r25
    71b8:	82 2b       	or	r24, r18
    71ba:	89 83       	std	Y+1, r24	; 0x01

    // 01- Send START condition
    status = TWI_u8Start();
    71bc:	0e 94 34 14 	call	0x2868	; 0x2868 <TWI_u8Start>
    71c0:	8a 83       	std	Y+2, r24	; 0x02
    if (status != TWI_OK)
    71c2:	8a 81       	ldd	r24, Y+2	; 0x02
    71c4:	88 23       	and	r24, r24
    71c6:	19 f0       	breq	.+6      	; 0x71ce <EEPROM_voidReadInit+0x46>
        return status;
    71c8:	8a 81       	ldd	r24, Y+2	; 0x02
    71ca:	8e 83       	std	Y+6, r24	; 0x06
    71cc:	23 c0       	rjmp	.+70     	; 0x7214 <EEPROM_voidReadInit+0x8c>

    // 02- Send Slave Address
    status = TWI_u8SendSlaveAddWrite(local_u8slaveAddress); // A2:0 A1:0 A:0
    71ce:	89 81       	ldd	r24, Y+1	; 0x01
    71d0:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_u8SendSlaveAddWrite>
    71d4:	8a 83       	std	Y+2, r24	; 0x02
    if (status != TWI_OK)
    71d6:	8a 81       	ldd	r24, Y+2	; 0x02
    71d8:	88 23       	and	r24, r24
    71da:	19 f0       	breq	.+6      	; 0x71e2 <EEPROM_voidReadInit+0x5a>
        return status;
    71dc:	8a 81       	ldd	r24, Y+2	; 0x02
    71de:	8e 83       	std	Y+6, r24	; 0x06
    71e0:	19 c0       	rjmp	.+50     	; 0x7214 <EEPROM_voidReadInit+0x8c>

    // 03- send the rest of address
    status = TWI_u8SendData((u8)A_u8MemoryAdress);
    71e2:	8c 81       	ldd	r24, Y+4	; 0x04
    71e4:	0e 94 91 14 	call	0x2922	; 0x2922 <TWI_u8SendData>
    71e8:	8a 83       	std	Y+2, r24	; 0x02
    if (status != TWI_OK)
    71ea:	8a 81       	ldd	r24, Y+2	; 0x02
    71ec:	88 23       	and	r24, r24
    71ee:	19 f0       	breq	.+6      	; 0x71f6 <EEPROM_voidReadInit+0x6e>
        return status;
    71f0:	8a 81       	ldd	r24, Y+2	; 0x02
    71f2:	8e 83       	std	Y+6, r24	; 0x06
    71f4:	0f c0       	rjmp	.+30     	; 0x7214 <EEPROM_voidReadInit+0x8c>

    // 04-Repeated Start to Initate
    status = TWI_u8SendReStart();
    71f6:	0e 94 c2 14 	call	0x2984	; 0x2984 <TWI_u8SendReStart>
    71fa:	8a 83       	std	Y+2, r24	; 0x02
    if (status != TWI_OK)
    71fc:	8a 81       	ldd	r24, Y+2	; 0x02
    71fe:	88 23       	and	r24, r24
    7200:	19 f0       	breq	.+6      	; 0x7208 <EEPROM_voidReadInit+0x80>
        return status;
    7202:	8a 81       	ldd	r24, Y+2	; 0x02
    7204:	8e 83       	std	Y+6, r24	; 0x06
    7206:	06 c0       	rjmp	.+12     	; 0x7214 <EEPROM_voidReadInit+0x8c>

    // 05- send slave address again but with read command
    status = TWI_u8SendSlaveAddRead(local_u8slaveAddress);
    7208:	89 81       	ldd	r24, Y+1	; 0x01
    720a:	0e 94 ed 14 	call	0x29da	; 0x29da <TWI_u8SendSlaveAddRead>
    720e:	8a 83       	std	Y+2, r24	; 0x02
    return status;
    7210:	8a 81       	ldd	r24, Y+2	; 0x02
    7212:	8e 83       	std	Y+6, r24	; 0x06
    7214:	8e 81       	ldd	r24, Y+6	; 0x06
}
    7216:	26 96       	adiw	r28, 0x06	; 6
    7218:	0f b6       	in	r0, 0x3f	; 63
    721a:	f8 94       	cli
    721c:	de bf       	out	0x3e, r29	; 62
    721e:	0f be       	out	0x3f, r0	; 63
    7220:	cd bf       	out	0x3d, r28	; 61
    7222:	cf 91       	pop	r28
    7224:	df 91       	pop	r29
    7226:	08 95       	ret

00007228 <EEPROM_u8ReadData>:

void EEPROM_u8ReadData(u8 *A_u8Data, u8 ack)
{
    7228:	df 93       	push	r29
    722a:	cf 93       	push	r28
    722c:	00 d0       	rcall	.+0      	; 0x722e <EEPROM_u8ReadData+0x6>
    722e:	0f 92       	push	r0
    7230:	cd b7       	in	r28, 0x3d	; 61
    7232:	de b7       	in	r29, 0x3e	; 62
    7234:	9a 83       	std	Y+2, r25	; 0x02
    7236:	89 83       	std	Y+1, r24	; 0x01
    7238:	6b 83       	std	Y+3, r22	; 0x03
    // 04- sned byte
    TWI_u8ReadData(ack, A_u8Data);
    723a:	29 81       	ldd	r18, Y+1	; 0x01
    723c:	3a 81       	ldd	r19, Y+2	; 0x02
    723e:	8b 81       	ldd	r24, Y+3	; 0x03
    7240:	b9 01       	movw	r22, r18
    7242:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_u8ReadData>
}
    7246:	0f 90       	pop	r0
    7248:	0f 90       	pop	r0
    724a:	0f 90       	pop	r0
    724c:	cf 91       	pop	r28
    724e:	df 91       	pop	r29
    7250:	08 95       	ret

00007252 <EEPROM_voidSendStop>:

void EEPROM_voidSendStop()
{
    7252:	df 93       	push	r29
    7254:	cf 93       	push	r28
    7256:	cd b7       	in	r28, 0x3d	; 61
    7258:	de b7       	in	r29, 0x3e	; 62
    725a:	2e 97       	sbiw	r28, 0x0e	; 14
    725c:	0f b6       	in	r0, 0x3f	; 63
    725e:	f8 94       	cli
    7260:	de bf       	out	0x3e, r29	; 62
    7262:	0f be       	out	0x3f, r0	; 63
    7264:	cd bf       	out	0x3d, r28	; 61
    TWI_voidStop();
    7266:	0e 94 57 15 	call	0x2aae	; 0x2aae <TWI_voidStop>
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	a0 e2       	ldi	r26, 0x20	; 32
    7270:	b1 e4       	ldi	r27, 0x41	; 65
    7272:	8b 87       	std	Y+11, r24	; 0x0b
    7274:	9c 87       	std	Y+12, r25	; 0x0c
    7276:	ad 87       	std	Y+13, r26	; 0x0d
    7278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    727a:	6b 85       	ldd	r22, Y+11	; 0x0b
    727c:	7c 85       	ldd	r23, Y+12	; 0x0c
    727e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7280:	9e 85       	ldd	r25, Y+14	; 0x0e
    7282:	20 e0       	ldi	r18, 0x00	; 0
    7284:	30 e0       	ldi	r19, 0x00	; 0
    7286:	4a ef       	ldi	r20, 0xFA	; 250
    7288:	54 e4       	ldi	r21, 0x44	; 68
    728a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    728e:	dc 01       	movw	r26, r24
    7290:	cb 01       	movw	r24, r22
    7292:	8f 83       	std	Y+7, r24	; 0x07
    7294:	98 87       	std	Y+8, r25	; 0x08
    7296:	a9 87       	std	Y+9, r26	; 0x09
    7298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    729a:	6f 81       	ldd	r22, Y+7	; 0x07
    729c:	78 85       	ldd	r23, Y+8	; 0x08
    729e:	89 85       	ldd	r24, Y+9	; 0x09
    72a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    72a2:	20 e0       	ldi	r18, 0x00	; 0
    72a4:	30 e0       	ldi	r19, 0x00	; 0
    72a6:	40 e8       	ldi	r20, 0x80	; 128
    72a8:	5f e3       	ldi	r21, 0x3F	; 63
    72aa:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    72ae:	88 23       	and	r24, r24
    72b0:	2c f4       	brge	.+10     	; 0x72bc <EEPROM_voidSendStop+0x6a>
		__ticks = 1;
    72b2:	81 e0       	ldi	r24, 0x01	; 1
    72b4:	90 e0       	ldi	r25, 0x00	; 0
    72b6:	9e 83       	std	Y+6, r25	; 0x06
    72b8:	8d 83       	std	Y+5, r24	; 0x05
    72ba:	3f c0       	rjmp	.+126    	; 0x733a <EEPROM_voidSendStop+0xe8>
	else if (__tmp > 65535)
    72bc:	6f 81       	ldd	r22, Y+7	; 0x07
    72be:	78 85       	ldd	r23, Y+8	; 0x08
    72c0:	89 85       	ldd	r24, Y+9	; 0x09
    72c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    72c4:	20 e0       	ldi	r18, 0x00	; 0
    72c6:	3f ef       	ldi	r19, 0xFF	; 255
    72c8:	4f e7       	ldi	r20, 0x7F	; 127
    72ca:	57 e4       	ldi	r21, 0x47	; 71
    72cc:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    72d0:	18 16       	cp	r1, r24
    72d2:	4c f5       	brge	.+82     	; 0x7326 <EEPROM_voidSendStop+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    72d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    72d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    72da:	9e 85       	ldd	r25, Y+14	; 0x0e
    72dc:	20 e0       	ldi	r18, 0x00	; 0
    72de:	30 e0       	ldi	r19, 0x00	; 0
    72e0:	40 e2       	ldi	r20, 0x20	; 32
    72e2:	51 e4       	ldi	r21, 0x41	; 65
    72e4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    72e8:	dc 01       	movw	r26, r24
    72ea:	cb 01       	movw	r24, r22
    72ec:	bc 01       	movw	r22, r24
    72ee:	cd 01       	movw	r24, r26
    72f0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    72f4:	dc 01       	movw	r26, r24
    72f6:	cb 01       	movw	r24, r22
    72f8:	9e 83       	std	Y+6, r25	; 0x06
    72fa:	8d 83       	std	Y+5, r24	; 0x05
    72fc:	0f c0       	rjmp	.+30     	; 0x731c <EEPROM_voidSendStop+0xca>
    72fe:	88 ec       	ldi	r24, 0xC8	; 200
    7300:	90 e0       	ldi	r25, 0x00	; 0
    7302:	9c 83       	std	Y+4, r25	; 0x04
    7304:	8b 83       	std	Y+3, r24	; 0x03
    7306:	8b 81       	ldd	r24, Y+3	; 0x03
    7308:	9c 81       	ldd	r25, Y+4	; 0x04
    730a:	01 97       	sbiw	r24, 0x01	; 1
    730c:	f1 f7       	brne	.-4      	; 0x730a <EEPROM_voidSendStop+0xb8>
    730e:	9c 83       	std	Y+4, r25	; 0x04
    7310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7312:	8d 81       	ldd	r24, Y+5	; 0x05
    7314:	9e 81       	ldd	r25, Y+6	; 0x06
    7316:	01 97       	sbiw	r24, 0x01	; 1
    7318:	9e 83       	std	Y+6, r25	; 0x06
    731a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    731c:	8d 81       	ldd	r24, Y+5	; 0x05
    731e:	9e 81       	ldd	r25, Y+6	; 0x06
    7320:	00 97       	sbiw	r24, 0x00	; 0
    7322:	69 f7       	brne	.-38     	; 0x72fe <EEPROM_voidSendStop+0xac>
    7324:	14 c0       	rjmp	.+40     	; 0x734e <EEPROM_voidSendStop+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7326:	6f 81       	ldd	r22, Y+7	; 0x07
    7328:	78 85       	ldd	r23, Y+8	; 0x08
    732a:	89 85       	ldd	r24, Y+9	; 0x09
    732c:	9a 85       	ldd	r25, Y+10	; 0x0a
    732e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7332:	dc 01       	movw	r26, r24
    7334:	cb 01       	movw	r24, r22
    7336:	9e 83       	std	Y+6, r25	; 0x06
    7338:	8d 83       	std	Y+5, r24	; 0x05
    733a:	8d 81       	ldd	r24, Y+5	; 0x05
    733c:	9e 81       	ldd	r25, Y+6	; 0x06
    733e:	9a 83       	std	Y+2, r25	; 0x02
    7340:	89 83       	std	Y+1, r24	; 0x01
    7342:	89 81       	ldd	r24, Y+1	; 0x01
    7344:	9a 81       	ldd	r25, Y+2	; 0x02
    7346:	01 97       	sbiw	r24, 0x01	; 1
    7348:	f1 f7       	brne	.-4      	; 0x7346 <EEPROM_voidSendStop+0xf4>
    734a:	9a 83       	std	Y+2, r25	; 0x02
    734c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    734e:	2e 96       	adiw	r28, 0x0e	; 14
    7350:	0f b6       	in	r0, 0x3f	; 63
    7352:	f8 94       	cli
    7354:	de bf       	out	0x3e, r29	; 62
    7356:	0f be       	out	0x3f, r0	; 63
    7358:	cd bf       	out	0x3d, r28	; 61
    735a:	cf 91       	pop	r28
    735c:	df 91       	pop	r29
    735e:	08 95       	ret

00007360 <DCMOTOR_voidHBridge>:

#include <util/delay.h>

// H-bridge using 4npn transistors 2N2222
void DCMOTOR_voidHBridge()
{
    7360:	df 93       	push	r29
    7362:	cf 93       	push	r28
    7364:	cd b7       	in	r28, 0x3d	; 61
    7366:	de b7       	in	r29, 0x3e	; 62
    7368:	6c 97       	sbiw	r28, 0x1c	; 28
    736a:	0f b6       	in	r0, 0x3f	; 63
    736c:	f8 94       	cli
    736e:	de bf       	out	0x3e, r29	; 62
    7370:	0f be       	out	0x3f, r0	; 63
    7372:	cd bf       	out	0x3d, r28	; 61
    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, PIN_HIGH);
    7374:	80 e0       	ldi	r24, 0x00	; 0
    7376:	60 e0       	ldi	r22, 0x00	; 0
    7378:	41 e0       	ldi	r20, 0x01	; 1
    737a:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, PIN_LOW);
    737e:	80 e0       	ldi	r24, 0x00	; 0
    7380:	61 e0       	ldi	r22, 0x01	; 1
    7382:	40 e0       	ldi	r20, 0x00	; 0
    7384:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    7388:	80 e0       	ldi	r24, 0x00	; 0
    738a:	90 e0       	ldi	r25, 0x00	; 0
    738c:	aa e7       	ldi	r26, 0x7A	; 122
    738e:	b4 e4       	ldi	r27, 0x44	; 68
    7390:	89 8f       	std	Y+25, r24	; 0x19
    7392:	9a 8f       	std	Y+26, r25	; 0x1a
    7394:	ab 8f       	std	Y+27, r26	; 0x1b
    7396:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7398:	69 8d       	ldd	r22, Y+25	; 0x19
    739a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    739c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    739e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    73a0:	20 e0       	ldi	r18, 0x00	; 0
    73a2:	30 e0       	ldi	r19, 0x00	; 0
    73a4:	4a ef       	ldi	r20, 0xFA	; 250
    73a6:	54 e4       	ldi	r21, 0x44	; 68
    73a8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    73ac:	dc 01       	movw	r26, r24
    73ae:	cb 01       	movw	r24, r22
    73b0:	8d 8b       	std	Y+21, r24	; 0x15
    73b2:	9e 8b       	std	Y+22, r25	; 0x16
    73b4:	af 8b       	std	Y+23, r26	; 0x17
    73b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    73b8:	6d 89       	ldd	r22, Y+21	; 0x15
    73ba:	7e 89       	ldd	r23, Y+22	; 0x16
    73bc:	8f 89       	ldd	r24, Y+23	; 0x17
    73be:	98 8d       	ldd	r25, Y+24	; 0x18
    73c0:	20 e0       	ldi	r18, 0x00	; 0
    73c2:	30 e0       	ldi	r19, 0x00	; 0
    73c4:	40 e8       	ldi	r20, 0x80	; 128
    73c6:	5f e3       	ldi	r21, 0x3F	; 63
    73c8:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    73cc:	88 23       	and	r24, r24
    73ce:	2c f4       	brge	.+10     	; 0x73da <DCMOTOR_voidHBridge+0x7a>
		__ticks = 1;
    73d0:	81 e0       	ldi	r24, 0x01	; 1
    73d2:	90 e0       	ldi	r25, 0x00	; 0
    73d4:	9c 8b       	std	Y+20, r25	; 0x14
    73d6:	8b 8b       	std	Y+19, r24	; 0x13
    73d8:	3f c0       	rjmp	.+126    	; 0x7458 <DCMOTOR_voidHBridge+0xf8>
	else if (__tmp > 65535)
    73da:	6d 89       	ldd	r22, Y+21	; 0x15
    73dc:	7e 89       	ldd	r23, Y+22	; 0x16
    73de:	8f 89       	ldd	r24, Y+23	; 0x17
    73e0:	98 8d       	ldd	r25, Y+24	; 0x18
    73e2:	20 e0       	ldi	r18, 0x00	; 0
    73e4:	3f ef       	ldi	r19, 0xFF	; 255
    73e6:	4f e7       	ldi	r20, 0x7F	; 127
    73e8:	57 e4       	ldi	r21, 0x47	; 71
    73ea:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    73ee:	18 16       	cp	r1, r24
    73f0:	4c f5       	brge	.+82     	; 0x7444 <DCMOTOR_voidHBridge+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73f2:	69 8d       	ldd	r22, Y+25	; 0x19
    73f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    73f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    73f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    73fa:	20 e0       	ldi	r18, 0x00	; 0
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	40 e2       	ldi	r20, 0x20	; 32
    7400:	51 e4       	ldi	r21, 0x41	; 65
    7402:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    7406:	dc 01       	movw	r26, r24
    7408:	cb 01       	movw	r24, r22
    740a:	bc 01       	movw	r22, r24
    740c:	cd 01       	movw	r24, r26
    740e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7412:	dc 01       	movw	r26, r24
    7414:	cb 01       	movw	r24, r22
    7416:	9c 8b       	std	Y+20, r25	; 0x14
    7418:	8b 8b       	std	Y+19, r24	; 0x13
    741a:	0f c0       	rjmp	.+30     	; 0x743a <DCMOTOR_voidHBridge+0xda>
    741c:	88 ec       	ldi	r24, 0xC8	; 200
    741e:	90 e0       	ldi	r25, 0x00	; 0
    7420:	9a 8b       	std	Y+18, r25	; 0x12
    7422:	89 8b       	std	Y+17, r24	; 0x11
    7424:	89 89       	ldd	r24, Y+17	; 0x11
    7426:	9a 89       	ldd	r25, Y+18	; 0x12
    7428:	01 97       	sbiw	r24, 0x01	; 1
    742a:	f1 f7       	brne	.-4      	; 0x7428 <DCMOTOR_voidHBridge+0xc8>
    742c:	9a 8b       	std	Y+18, r25	; 0x12
    742e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7430:	8b 89       	ldd	r24, Y+19	; 0x13
    7432:	9c 89       	ldd	r25, Y+20	; 0x14
    7434:	01 97       	sbiw	r24, 0x01	; 1
    7436:	9c 8b       	std	Y+20, r25	; 0x14
    7438:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    743a:	8b 89       	ldd	r24, Y+19	; 0x13
    743c:	9c 89       	ldd	r25, Y+20	; 0x14
    743e:	00 97       	sbiw	r24, 0x00	; 0
    7440:	69 f7       	brne	.-38     	; 0x741c <DCMOTOR_voidHBridge+0xbc>
    7442:	14 c0       	rjmp	.+40     	; 0x746c <DCMOTOR_voidHBridge+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7444:	6d 89       	ldd	r22, Y+21	; 0x15
    7446:	7e 89       	ldd	r23, Y+22	; 0x16
    7448:	8f 89       	ldd	r24, Y+23	; 0x17
    744a:	98 8d       	ldd	r25, Y+24	; 0x18
    744c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7450:	dc 01       	movw	r26, r24
    7452:	cb 01       	movw	r24, r22
    7454:	9c 8b       	std	Y+20, r25	; 0x14
    7456:	8b 8b       	std	Y+19, r24	; 0x13
    7458:	8b 89       	ldd	r24, Y+19	; 0x13
    745a:	9c 89       	ldd	r25, Y+20	; 0x14
    745c:	98 8b       	std	Y+16, r25	; 0x10
    745e:	8f 87       	std	Y+15, r24	; 0x0f
    7460:	8f 85       	ldd	r24, Y+15	; 0x0f
    7462:	98 89       	ldd	r25, Y+16	; 0x10
    7464:	01 97       	sbiw	r24, 0x01	; 1
    7466:	f1 f7       	brne	.-4      	; 0x7464 <DCMOTOR_voidHBridge+0x104>
    7468:	98 8b       	std	Y+16, r25	; 0x10
    746a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(INVERSE_MOTOR_DELAY);
    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN1, PIN_LOW);
    746c:	80 e0       	ldi	r24, 0x00	; 0
    746e:	60 e0       	ldi	r22, 0x00	; 0
    7470:	40 e0       	ldi	r20, 0x00	; 0
    7472:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(DC_MOTOR_PORT, DC_MOTOR_PIN2, PIN_HIGH);
    7476:	80 e0       	ldi	r24, 0x00	; 0
    7478:	61 e0       	ldi	r22, 0x01	; 1
    747a:	41 e0       	ldi	r20, 0x01	; 1
    747c:	0e 94 20 21 	call	0x4240	; 0x4240 <DIO_voidSetPinValue>
    7480:	80 e0       	ldi	r24, 0x00	; 0
    7482:	90 e0       	ldi	r25, 0x00	; 0
    7484:	aa e7       	ldi	r26, 0x7A	; 122
    7486:	b4 e4       	ldi	r27, 0x44	; 68
    7488:	8b 87       	std	Y+11, r24	; 0x0b
    748a:	9c 87       	std	Y+12, r25	; 0x0c
    748c:	ad 87       	std	Y+13, r26	; 0x0d
    748e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7490:	6b 85       	ldd	r22, Y+11	; 0x0b
    7492:	7c 85       	ldd	r23, Y+12	; 0x0c
    7494:	8d 85       	ldd	r24, Y+13	; 0x0d
    7496:	9e 85       	ldd	r25, Y+14	; 0x0e
    7498:	20 e0       	ldi	r18, 0x00	; 0
    749a:	30 e0       	ldi	r19, 0x00	; 0
    749c:	4a ef       	ldi	r20, 0xFA	; 250
    749e:	54 e4       	ldi	r21, 0x44	; 68
    74a0:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    74a4:	dc 01       	movw	r26, r24
    74a6:	cb 01       	movw	r24, r22
    74a8:	8f 83       	std	Y+7, r24	; 0x07
    74aa:	98 87       	std	Y+8, r25	; 0x08
    74ac:	a9 87       	std	Y+9, r26	; 0x09
    74ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    74b0:	6f 81       	ldd	r22, Y+7	; 0x07
    74b2:	78 85       	ldd	r23, Y+8	; 0x08
    74b4:	89 85       	ldd	r24, Y+9	; 0x09
    74b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    74b8:	20 e0       	ldi	r18, 0x00	; 0
    74ba:	30 e0       	ldi	r19, 0x00	; 0
    74bc:	40 e8       	ldi	r20, 0x80	; 128
    74be:	5f e3       	ldi	r21, 0x3F	; 63
    74c0:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    74c4:	88 23       	and	r24, r24
    74c6:	2c f4       	brge	.+10     	; 0x74d2 <DCMOTOR_voidHBridge+0x172>
		__ticks = 1;
    74c8:	81 e0       	ldi	r24, 0x01	; 1
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	9e 83       	std	Y+6, r25	; 0x06
    74ce:	8d 83       	std	Y+5, r24	; 0x05
    74d0:	3f c0       	rjmp	.+126    	; 0x7550 <DCMOTOR_voidHBridge+0x1f0>
	else if (__tmp > 65535)
    74d2:	6f 81       	ldd	r22, Y+7	; 0x07
    74d4:	78 85       	ldd	r23, Y+8	; 0x08
    74d6:	89 85       	ldd	r24, Y+9	; 0x09
    74d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    74da:	20 e0       	ldi	r18, 0x00	; 0
    74dc:	3f ef       	ldi	r19, 0xFF	; 255
    74de:	4f e7       	ldi	r20, 0x7F	; 127
    74e0:	57 e4       	ldi	r21, 0x47	; 71
    74e2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    74e6:	18 16       	cp	r1, r24
    74e8:	4c f5       	brge	.+82     	; 0x753c <DCMOTOR_voidHBridge+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    74ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    74ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    74f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    74f2:	20 e0       	ldi	r18, 0x00	; 0
    74f4:	30 e0       	ldi	r19, 0x00	; 0
    74f6:	40 e2       	ldi	r20, 0x20	; 32
    74f8:	51 e4       	ldi	r21, 0x41	; 65
    74fa:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    74fe:	dc 01       	movw	r26, r24
    7500:	cb 01       	movw	r24, r22
    7502:	bc 01       	movw	r22, r24
    7504:	cd 01       	movw	r24, r26
    7506:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    750a:	dc 01       	movw	r26, r24
    750c:	cb 01       	movw	r24, r22
    750e:	9e 83       	std	Y+6, r25	; 0x06
    7510:	8d 83       	std	Y+5, r24	; 0x05
    7512:	0f c0       	rjmp	.+30     	; 0x7532 <DCMOTOR_voidHBridge+0x1d2>
    7514:	88 ec       	ldi	r24, 0xC8	; 200
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	9c 83       	std	Y+4, r25	; 0x04
    751a:	8b 83       	std	Y+3, r24	; 0x03
    751c:	8b 81       	ldd	r24, Y+3	; 0x03
    751e:	9c 81       	ldd	r25, Y+4	; 0x04
    7520:	01 97       	sbiw	r24, 0x01	; 1
    7522:	f1 f7       	brne	.-4      	; 0x7520 <DCMOTOR_voidHBridge+0x1c0>
    7524:	9c 83       	std	Y+4, r25	; 0x04
    7526:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7528:	8d 81       	ldd	r24, Y+5	; 0x05
    752a:	9e 81       	ldd	r25, Y+6	; 0x06
    752c:	01 97       	sbiw	r24, 0x01	; 1
    752e:	9e 83       	std	Y+6, r25	; 0x06
    7530:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7532:	8d 81       	ldd	r24, Y+5	; 0x05
    7534:	9e 81       	ldd	r25, Y+6	; 0x06
    7536:	00 97       	sbiw	r24, 0x00	; 0
    7538:	69 f7       	brne	.-38     	; 0x7514 <DCMOTOR_voidHBridge+0x1b4>
    753a:	14 c0       	rjmp	.+40     	; 0x7564 <DCMOTOR_voidHBridge+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    753c:	6f 81       	ldd	r22, Y+7	; 0x07
    753e:	78 85       	ldd	r23, Y+8	; 0x08
    7540:	89 85       	ldd	r24, Y+9	; 0x09
    7542:	9a 85       	ldd	r25, Y+10	; 0x0a
    7544:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7548:	dc 01       	movw	r26, r24
    754a:	cb 01       	movw	r24, r22
    754c:	9e 83       	std	Y+6, r25	; 0x06
    754e:	8d 83       	std	Y+5, r24	; 0x05
    7550:	8d 81       	ldd	r24, Y+5	; 0x05
    7552:	9e 81       	ldd	r25, Y+6	; 0x06
    7554:	9a 83       	std	Y+2, r25	; 0x02
    7556:	89 83       	std	Y+1, r24	; 0x01
    7558:	89 81       	ldd	r24, Y+1	; 0x01
    755a:	9a 81       	ldd	r25, Y+2	; 0x02
    755c:	01 97       	sbiw	r24, 0x01	; 1
    755e:	f1 f7       	brne	.-4      	; 0x755c <DCMOTOR_voidHBridge+0x1fc>
    7560:	9a 83       	std	Y+2, r25	; 0x02
    7562:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(INVERSE_MOTOR_DELAY);
}
    7564:	6c 96       	adiw	r28, 0x1c	; 28
    7566:	0f b6       	in	r0, 0x3f	; 63
    7568:	f8 94       	cli
    756a:	de bf       	out	0x3e, r29	; 62
    756c:	0f be       	out	0x3f, r0	; 63
    756e:	cd bf       	out	0x3d, r28	; 61
    7570:	cf 91       	pop	r28
    7572:	df 91       	pop	r29
    7574:	08 95       	ret

00007576 <main>:
#define F_CPU 8000000UL

u16 ton = 10;
// void func2();
void main(void)
{
    7576:	df 93       	push	r29
    7578:	cf 93       	push	r28
    757a:	cd b7       	in	r28, 0x3d	; 61
    757c:	de b7       	in	r29, 0x3e	; 62
	//	u8 str[100];
	DIO_voidInit();
    757e:	0e 94 49 20 	call	0x4092	; 0x4092 <DIO_voidInit>
	// LCD_voidSendString("Ahmd nabasdil :)");
	//	sei();
	//	UART_voidInit();
	//	UART_voidSendStingAsynch("Ahmed Nabil");
	// receive variable
	SSD_voidDisplay(5, PORTA);
    7582:	85 e0       	ldi	r24, 0x05	; 5
    7584:	60 e0       	ldi	r22, 0x00	; 0
    7586:	0e 94 40 2c 	call	0x5880	; 0x5880 <SSD_voidDisplay>
    758a:	ff cf       	rjmp	.-2      	; 0x758a <main+0x14>

0000758c <__mulsi3>:
    758c:	62 9f       	mul	r22, r18
    758e:	d0 01       	movw	r26, r0
    7590:	73 9f       	mul	r23, r19
    7592:	f0 01       	movw	r30, r0
    7594:	82 9f       	mul	r24, r18
    7596:	e0 0d       	add	r30, r0
    7598:	f1 1d       	adc	r31, r1
    759a:	64 9f       	mul	r22, r20
    759c:	e0 0d       	add	r30, r0
    759e:	f1 1d       	adc	r31, r1
    75a0:	92 9f       	mul	r25, r18
    75a2:	f0 0d       	add	r31, r0
    75a4:	83 9f       	mul	r24, r19
    75a6:	f0 0d       	add	r31, r0
    75a8:	74 9f       	mul	r23, r20
    75aa:	f0 0d       	add	r31, r0
    75ac:	65 9f       	mul	r22, r21
    75ae:	f0 0d       	add	r31, r0
    75b0:	99 27       	eor	r25, r25
    75b2:	72 9f       	mul	r23, r18
    75b4:	b0 0d       	add	r27, r0
    75b6:	e1 1d       	adc	r30, r1
    75b8:	f9 1f       	adc	r31, r25
    75ba:	63 9f       	mul	r22, r19
    75bc:	b0 0d       	add	r27, r0
    75be:	e1 1d       	adc	r30, r1
    75c0:	f9 1f       	adc	r31, r25
    75c2:	bd 01       	movw	r22, r26
    75c4:	cf 01       	movw	r24, r30
    75c6:	11 24       	eor	r1, r1
    75c8:	08 95       	ret

000075ca <__udivmodhi4>:
    75ca:	aa 1b       	sub	r26, r26
    75cc:	bb 1b       	sub	r27, r27
    75ce:	51 e1       	ldi	r21, 0x11	; 17
    75d0:	07 c0       	rjmp	.+14     	; 0x75e0 <__udivmodhi4_ep>

000075d2 <__udivmodhi4_loop>:
    75d2:	aa 1f       	adc	r26, r26
    75d4:	bb 1f       	adc	r27, r27
    75d6:	a6 17       	cp	r26, r22
    75d8:	b7 07       	cpc	r27, r23
    75da:	10 f0       	brcs	.+4      	; 0x75e0 <__udivmodhi4_ep>
    75dc:	a6 1b       	sub	r26, r22
    75de:	b7 0b       	sbc	r27, r23

000075e0 <__udivmodhi4_ep>:
    75e0:	88 1f       	adc	r24, r24
    75e2:	99 1f       	adc	r25, r25
    75e4:	5a 95       	dec	r21
    75e6:	a9 f7       	brne	.-22     	; 0x75d2 <__udivmodhi4_loop>
    75e8:	80 95       	com	r24
    75ea:	90 95       	com	r25
    75ec:	bc 01       	movw	r22, r24
    75ee:	cd 01       	movw	r24, r26
    75f0:	08 95       	ret

000075f2 <__udivmodsi4>:
    75f2:	a1 e2       	ldi	r26, 0x21	; 33
    75f4:	1a 2e       	mov	r1, r26
    75f6:	aa 1b       	sub	r26, r26
    75f8:	bb 1b       	sub	r27, r27
    75fa:	fd 01       	movw	r30, r26
    75fc:	0d c0       	rjmp	.+26     	; 0x7618 <__udivmodsi4_ep>

000075fe <__udivmodsi4_loop>:
    75fe:	aa 1f       	adc	r26, r26
    7600:	bb 1f       	adc	r27, r27
    7602:	ee 1f       	adc	r30, r30
    7604:	ff 1f       	adc	r31, r31
    7606:	a2 17       	cp	r26, r18
    7608:	b3 07       	cpc	r27, r19
    760a:	e4 07       	cpc	r30, r20
    760c:	f5 07       	cpc	r31, r21
    760e:	20 f0       	brcs	.+8      	; 0x7618 <__udivmodsi4_ep>
    7610:	a2 1b       	sub	r26, r18
    7612:	b3 0b       	sbc	r27, r19
    7614:	e4 0b       	sbc	r30, r20
    7616:	f5 0b       	sbc	r31, r21

00007618 <__udivmodsi4_ep>:
    7618:	66 1f       	adc	r22, r22
    761a:	77 1f       	adc	r23, r23
    761c:	88 1f       	adc	r24, r24
    761e:	99 1f       	adc	r25, r25
    7620:	1a 94       	dec	r1
    7622:	69 f7       	brne	.-38     	; 0x75fe <__udivmodsi4_loop>
    7624:	60 95       	com	r22
    7626:	70 95       	com	r23
    7628:	80 95       	com	r24
    762a:	90 95       	com	r25
    762c:	9b 01       	movw	r18, r22
    762e:	ac 01       	movw	r20, r24
    7630:	bd 01       	movw	r22, r26
    7632:	cf 01       	movw	r24, r30
    7634:	08 95       	ret

00007636 <__prologue_saves__>:
    7636:	2f 92       	push	r2
    7638:	3f 92       	push	r3
    763a:	4f 92       	push	r4
    763c:	5f 92       	push	r5
    763e:	6f 92       	push	r6
    7640:	7f 92       	push	r7
    7642:	8f 92       	push	r8
    7644:	9f 92       	push	r9
    7646:	af 92       	push	r10
    7648:	bf 92       	push	r11
    764a:	cf 92       	push	r12
    764c:	df 92       	push	r13
    764e:	ef 92       	push	r14
    7650:	ff 92       	push	r15
    7652:	0f 93       	push	r16
    7654:	1f 93       	push	r17
    7656:	cf 93       	push	r28
    7658:	df 93       	push	r29
    765a:	cd b7       	in	r28, 0x3d	; 61
    765c:	de b7       	in	r29, 0x3e	; 62
    765e:	ca 1b       	sub	r28, r26
    7660:	db 0b       	sbc	r29, r27
    7662:	0f b6       	in	r0, 0x3f	; 63
    7664:	f8 94       	cli
    7666:	de bf       	out	0x3e, r29	; 62
    7668:	0f be       	out	0x3f, r0	; 63
    766a:	cd bf       	out	0x3d, r28	; 61
    766c:	09 94       	ijmp

0000766e <__epilogue_restores__>:
    766e:	2a 88       	ldd	r2, Y+18	; 0x12
    7670:	39 88       	ldd	r3, Y+17	; 0x11
    7672:	48 88       	ldd	r4, Y+16	; 0x10
    7674:	5f 84       	ldd	r5, Y+15	; 0x0f
    7676:	6e 84       	ldd	r6, Y+14	; 0x0e
    7678:	7d 84       	ldd	r7, Y+13	; 0x0d
    767a:	8c 84       	ldd	r8, Y+12	; 0x0c
    767c:	9b 84       	ldd	r9, Y+11	; 0x0b
    767e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7680:	b9 84       	ldd	r11, Y+9	; 0x09
    7682:	c8 84       	ldd	r12, Y+8	; 0x08
    7684:	df 80       	ldd	r13, Y+7	; 0x07
    7686:	ee 80       	ldd	r14, Y+6	; 0x06
    7688:	fd 80       	ldd	r15, Y+5	; 0x05
    768a:	0c 81       	ldd	r16, Y+4	; 0x04
    768c:	1b 81       	ldd	r17, Y+3	; 0x03
    768e:	aa 81       	ldd	r26, Y+2	; 0x02
    7690:	b9 81       	ldd	r27, Y+1	; 0x01
    7692:	ce 0f       	add	r28, r30
    7694:	d1 1d       	adc	r29, r1
    7696:	0f b6       	in	r0, 0x3f	; 63
    7698:	f8 94       	cli
    769a:	de bf       	out	0x3e, r29	; 62
    769c:	0f be       	out	0x3f, r0	; 63
    769e:	cd bf       	out	0x3d, r28	; 61
    76a0:	ed 01       	movw	r28, r26
    76a2:	08 95       	ret

000076a4 <_exit>:
    76a4:	f8 94       	cli

000076a6 <__stop_program>:
    76a6:	ff cf       	rjmp	.-2      	; 0x76a6 <__stop_program>
