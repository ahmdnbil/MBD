var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"blinkLED","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"blinkLED.h\"                  /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  blinkLED_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  blinkLED_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.01 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"blinkLED.c","type":"source","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: blinkLED.c\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"blinkLED.h\"\r\n#include \"blinkLEDFucn.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Model step function */\r\nvoid blinkLED_step(void)\r\n{\r\n  /* Outputs for Atomic SubSystem: '<Root>/blinkLEDFucn' */\r\n\r\n  /* Outport: '<Root>/firstLamp_B' */\r\n  rtY.firstLamp_B = blinkLEDFucn(&rtDW.blinkLEDFucn_d);\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/blinkLEDFucn' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid blinkLED_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"blinkLED.h","type":"header","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: blinkLED.h\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef blinkLED_h_\r\n#define blinkLED_h_\r\n#ifndef blinkLED_COMMON_INCLUDES_\r\n#define blinkLED_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* blinkLED_COMMON_INCLUDES_ */\r\n\r\n#include \"blinkLED_types.h\"\r\n#include \"blinkLEDFucn.h\"\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  DW_blinkLEDFucn blinkLEDFucn_d;      /* '<Root>/blinkLEDFucn' */\r\n} DW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  boolean_T firstLamp_B;               /* '<Root>/firstLamp_B' */\r\n} ExtY;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void blinkLED_initialize(void);\r\nextern void blinkLED_step(void);\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'blinkLED'\r\n * '<S1>'   : 'blinkLED/blinkLEDFucn'\r\n */\r\n#endif                                 /* blinkLED_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"blinkLED_private.h","type":"header","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: blinkLED_private.h\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef blinkLED_private_h_\r\n#define blinkLED_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"blinkLED_types.h\"\r\n#endif                                 /* blinkLED_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"blinkLED_types.h","type":"header","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: blinkLED_types.h\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef blinkLED_types_h_\r\n#define blinkLED_types_h_\r\n#endif                                 /* blinkLED_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"blinkLEDFucn.c","type":"source","group":"subsystem","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * File: blinkLEDFucn.c\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"blinkLEDFucn.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Output and update for atomic system: '<Root>/blinkLEDFucn' */\r\nboolean_T blinkLEDFucn(DW_blinkLEDFucn *localDW)\r\n{\r\n  int16_T rtb_PulseGenerator;\r\n\r\n  /* DiscretePulseGenerator: '<S1>/Pulse Generator' */\r\n  rtb_PulseGenerator = ((localDW->clockTickCounter < 100L) &&\r\n                        (localDW->clockTickCounter >= 0L));\r\n  if (localDW->clockTickCounter >= 199L) {\r\n    localDW->clockTickCounter = 0L;\r\n  } else {\r\n    localDW->clockTickCounter++;\r\n  }\r\n\r\n  /* End of DiscretePulseGenerator: '<S1>/Pulse Generator' */\r\n\r\n  /* DataTypeConversion: '<S1>/Data Type Conversion' */\r\n  return rtb_PulseGenerator != 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"blinkLEDFucn.h","type":"header","group":"subsystem","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * File: blinkLEDFucn.h\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef blinkLEDFucn_h_\r\n#define blinkLEDFucn_h_\r\n#ifndef blinkLED_COMMON_INCLUDES_\r\n#define blinkLED_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* blinkLED_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>/blinkLEDFucn' */\r\ntypedef struct {\r\n  int32_T clockTickCounter;            /* '<S1>/Pulse Generator' */\r\n} DW_blinkLEDFucn;\r\n\r\nextern boolean_T blinkLEDFucn(DW_blinkLEDFucn *localDW);\r\n\r\n#endif                                 /* blinkLEDFucn_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'blinkLED'.\r\n *\r\n * Model version                  : 1.12\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 23:06:30 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR (8-bit)\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Atmel->AVR (8-bit)\r\n *   Number of bits:     char:   8    short:   16    int:  16\r\n *                       long:  32    long long:  64\r\n *                       native word size:  16\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef int int16_T;\r\ntypedef unsigned int uint16_T;\r\ntypedef long int32_T;\r\ntypedef unsigned long uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647L))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647L-1L))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFUL))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"cm":{"GlobalVarInfo":[{"Name":"rtDW","Size":4,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw\\blinkLED.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":1,"Members":{"Name":"blinkLEDFucn_d","File":2,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":{"Name":"clockTickCounter","File":5,"Size":4,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"blinkLED_step","UseCount":1}},"UseInFunctions":{"FunctionName":"blinkLED_step","UseCount":1}},"UseInFunctions":{"FunctionName":"blinkLED_step","UseCount":1}},{"Name":"rtY","Size":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw\\blinkLED.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":1,"Members":{"Name":"firstLamp_B","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"blinkLED_step","UseCount":1}},"UseInFunctions":{"FunctionName":"blinkLED_step","UseCount":1}}],"GlobalConstInfo":[],"FcnInfo":[{"Name":"blinkLEDFucn","UniqueKey":"$blinkLEDFucn","Idx":1,"NumCommentLines":3,"NumTotalLines":18,"NumCodeLines":9,"Callee":[],"Caller":{"Name":"blinkLED_step","Weight":1},"Stack":5,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw\\blinkLEDFucn.c"],"IsStatic":0,"Complexity":2,"StackTotal":5,"CalleeIdx":[]},{"Name":"blinkLED_initialize","UniqueKey":"$blinkLED_initialize","Idx":2,"NumCommentLines":1,"NumTotalLines":4,"NumCodeLines":0,"Callee":[],"Caller":[],"Stack":0,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw\\blinkLED.c"],"IsStatic":0,"Complexity":1,"StackTotal":0,"CalleeIdx":[]},{"Name":"blinkLED_step","UniqueKey":"$blinkLED_step","Idx":3,"NumCommentLines":3,"NumTotalLines":9,"NumCodeLines":1,"Callee":{"Name":"blinkLEDFucn","Weight":1},"Caller":[],"Stack":0,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut05_BlinkLED\\blinkLED_ert_rtw\\blinkLED.c"],"IsStatic":0,"Complexity":1,"StackTotal":5,"CalleeIdx":1}]},"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};