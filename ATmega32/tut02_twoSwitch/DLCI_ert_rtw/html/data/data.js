var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"DLCI","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"DLCI.h\"                      /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(DLCI_M, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  DLCI_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  DLCI_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.01 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(DLCI_M) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* Terminate model */\r\n  DLCI_terminate();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"DLCI.c","type":"source","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: DLCI.c\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"DLCI.h\"\r\n#include \"lampAlgo.h\"\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_DLCI_T DLCI_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_DLCI_T DLCI_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_DLCI_T DLCI_M_;\r\nRT_MODEL_DLCI_T *const DLCI_M = &DLCI_M_;\r\n\r\n/* Model step function */\r\nvoid DLCI_step(void)\r\n{\r\n  /* Outputs for Atomic SubSystem: '<Root>/lampAlgo' */\r\n\r\n  /* Inport: '<Root>/rightSW_B' incorporates:\r\n   *  Inport: '<Root>/leftSW_B'\r\n   *  Outport: '<Root>/leftLamp_B'\r\n   *  Outport: '<Root>/rightLamp_B'\r\n   */\r\n  DLCI_lampAlgo(DLCI_U.rightSW_B, DLCI_U.leftSW_B, &DLCI_Y.rightLamp_B,\r\n                &DLCI_Y.leftLamp_B);\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/lampAlgo' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid DLCI_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid DLCI_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"DLCI.h","type":"header","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: DLCI.h\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef DLCI_h_\r\n#define DLCI_h_\r\n#ifndef DLCI_COMMON_INCLUDES_\r\n#define DLCI_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* DLCI_COMMON_INCLUDES_ */\r\n\r\n#include \"DLCI_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  boolean_T rightSW_B;                 /* '<Root>/rightSW_B' */\r\n  boolean_T leftSW_B;                  /* '<Root>/leftSW_B' */\r\n} ExtU_DLCI_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  boolean_T rightLamp_B;               /* '<Root>/rightLamp_B' */\r\n  boolean_T leftLamp_B;                /* '<Root>/leftLamp_B' */\r\n} ExtY_DLCI_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_DLCI_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_DLCI_T DLCI_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_DLCI_T DLCI_Y;\r\n\r\n/* Model entry point functions */\r\nextern void DLCI_initialize(void);\r\nextern void DLCI_step(void);\r\nextern void DLCI_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_DLCI_T *const DLCI_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'DLCI'\r\n * '<S1>'   : 'DLCI/lampAlgo'\r\n */\r\n#endif                                 /* DLCI_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"DLCI_private.h","type":"header","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: DLCI_private.h\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef DLCI_private_h_\r\n#define DLCI_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"DLCI_types.h\"\r\n#endif                                 /* DLCI_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"DLCI_types.h","type":"header","group":"model","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * File: DLCI_types.h\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef DLCI_types_h_\r\n#define DLCI_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_DLCI_T RT_MODEL_DLCI_T;\r\n\r\n#endif                                 /* DLCI_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"lampAlgo.c","type":"source","group":"subsystem","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * File: lampAlgo.c\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"lampAlgo.h\"\r\n\r\n/* Output and update for atomic system: '<Root>/lampAlgo' */\r\nvoid DLCI_lampAlgo(boolean_T rtu_rightSW_B, boolean_T rtu_leftSW_B, boolean_T\r\n                   *rty_rightLamp_B, boolean_T *rty_leftLamp_B)\r\n{\r\n  boolean_T tmp;\r\n  boolean_T tmp_0;\r\n\r\n  /* Logic: '<S1>/AND' incorporates:\r\n   *  Logic: '<S1>/AND1'\r\n   */\r\n  tmp = !rtu_rightSW_B;\r\n  tmp_0 = !rtu_leftSW_B;\r\n\r\n  /* Switch: '<S1>/Switch2' incorporates:\r\n   *  Logic: '<S1>/AND'\r\n   */\r\n  *rty_rightLamp_B = ((tmp_0 || tmp) && rtu_rightSW_B);\r\n\r\n  /* Switch: '<S1>/Switch3' incorporates:\r\n   *  Logic: '<S1>/AND1'\r\n   */\r\n  *rty_leftLamp_B = ((tmp || tmp_0) && rtu_leftSW_B);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"lampAlgo.h","type":"header","group":"subsystem","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Subsystem files","code":"/*\r\n * File: lampAlgo.h\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef lampAlgo_h_\r\n#define lampAlgo_h_\r\n#ifndef DLCI_COMMON_INCLUDES_\r\n#define DLCI_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* DLCI_COMMON_INCLUDES_ */\r\n\r\nextern void DLCI_lampAlgo(boolean_T rtu_rightSW_B, boolean_T rtu_leftSW_B,\r\n  boolean_T *rty_rightLamp_B, boolean_T *rty_leftLamp_B);\r\n\r\n#endif                                 /* lampAlgo_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'DLCI'.\r\n *\r\n * Model version                  : 1.4\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Tue May 20 14:25:23 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Intel->x86-64 (Windows64)\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  64\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"cm":{"GlobalVarInfo":[{"Name":"DLCI.c:DLCI_M_","Size":8,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\DLCI.c"],"IsStatic":true,"IsBitField":false,"IsExported":true,"UseCount":0,"Members":{"Name":"errorStatus","File":2,"Size":8,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":0,"Members":[],"UseInFunctions":[]},"UseInFunctions":[]},{"Name":"DLCI_U","Size":2,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\DLCI.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":2,"Members":[{"Name":"rightSW_B","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"DLCI_step","UseCount":1}},{"Name":"leftSW_B","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"DLCI_step","UseCount":1}}],"UseInFunctions":{"FunctionName":"DLCI_step","UseCount":2}},{"Name":"DLCI_Y","Size":2,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\DLCI.c"],"IsStatic":false,"IsBitField":false,"IsExported":true,"UseCount":2,"Members":[{"Name":"rightLamp_B","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"DLCI_step","UseCount":1}},{"Name":"leftLamp_B","File":2,"Size":1,"IsStatic":false,"IsBitField":false,"IsExported":false,"UseCount":1,"Members":[],"UseInFunctions":{"FunctionName":"DLCI_step","UseCount":1}}],"UseInFunctions":{"FunctionName":"DLCI_step","UseCount":2}}],"GlobalConstInfo":[],"FcnInfo":[{"Name":"DLCI_initialize","UniqueKey":"$DLCI_initialize","Idx":1,"NumCommentLines":1,"NumTotalLines":4,"NumCodeLines":0,"Callee":[],"Caller":[],"Stack":0,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\DLCI.c"],"IsStatic":0,"Complexity":1,"StackTotal":0,"CalleeIdx":[]},{"Name":"DLCI_lampAlgo","UniqueKey":"$DLCI_lampAlgo","Idx":2,"NumCommentLines":9,"NumTotalLines":22,"NumCodeLines":6,"Callee":[],"Caller":{"Name":"DLCI_step","Weight":1},"Stack":20,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\lampAlgo.c"],"IsStatic":0,"Complexity":1,"StackTotal":20,"CalleeIdx":[]},{"Name":"DLCI_step","UniqueKey":"$DLCI_step","Idx":3,"NumCommentLines":7,"NumTotalLines":14,"NumCodeLines":2,"Callee":{"Name":"DLCI_lampAlgo","Weight":1},"Caller":[],"Stack":0,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\DLCI.c"],"IsStatic":0,"Complexity":1,"StackTotal":20,"CalleeIdx":2},{"Name":"DLCI_terminate","UniqueKey":"$DLCI_terminate","Idx":4,"NumCommentLines":1,"NumTotalLines":4,"NumCodeLines":0,"Callee":[],"Caller":[],"Stack":0,"HasDefinition":1,"File":["D:\\ME\\Career\\04.MBD\\Projects\\hardware\\ATmega32\\tut02\\DLCI_ert_rtw\\DLCI.c"],"IsStatic":0,"Complexity":1,"StackTotal":0,"CalleeIdx":[]}]},"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};